{
  "language": "Solidity",
  "sources": {
    "contracts/mspell/mSpellSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\nimport \"../libraries/BoringOwnable.sol\";\n\ninterface AnyswapRouter {\n    function anySwapOutUnderlying(\n        address token,\n        address to,\n        uint256 amount,\n        uint256 toChainID\n    ) external;\n}\n\ncontract mSpellSender is BoringOwnable {\n    using SafeTransferLib for ERC20;\n\n    /// EVENTS\n    event LogSetOperator(address indexed operator, bool status);\n    event LogAddRecipient(address indexed recipient, uint256 chainId);\n    event LogBridgeToRecipient(address indexed recipient, uint256 amount, uint256 chainId);\n\n    /// CONSTANTS\n    ERC20 private constant MIM = ERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\n    address private constant ANY_MIM = 0xbbc4A8d076F4B1888fec42581B6fc58d242CF2D5;\n    AnyswapRouter private constant ANYSWAP_ROUTER = AnyswapRouter(0x6b7a87899490EcE95443e979cA9485CBE7E71522);\n\n    struct MSpellRecipients {\n        address recipient;\n        uint256 chainId;\n    }\n\n    MSpellRecipients[] public recipients;\n    mapping(uint256 => bool) public isActiveChain;\n    mapping(address => bool) public isOperator;\n\n    modifier onlyOperator() {\n        require(isOperator[msg.sender], \"only operator\");\n        _;\n    }\n\n    constructor() {\n        MIM.approve(ANY_MIM, type(uint256).max);\n    }\n\n    /// @param ratios ratio in bps, 1 is 0.01%, 10_000 is 100%\n    function bridgeMim(uint256[] memory ratios) external onlyOperator {\n        require(ratios.length == recipients.length, \"ratios length mismatch\");\n\n        uint256 summedRatio;\n        uint256 totalAmount = MIM.balanceOf(address(this));\n\n        for (uint256 i = 0; i < ratios.length; i++) {\n            summedRatio += ratios[i];\n        }\n\n        for (uint256 i = 0; i < ratios.length; i++) {\n            uint256 amount = (totalAmount * ratios[i]) / summedRatio;\n            if (amount > 0) {\n                ANYSWAP_ROUTER.anySwapOutUnderlying(ANY_MIM, recipients[i].recipient, amount, recipients[i].chainId);\n                emit LogBridgeToRecipient(recipients[i].recipient, amount, recipients[i].chainId);\n            }\n        }\n    }\n\n    function addMSpellRecipient(address recipient, uint256 chainId) external onlyOwner {\n        require(!isActiveChain[chainId], \"chainId already added\");\n\n        isActiveChain[chainId] = true;\n        recipients.push(MSpellRecipients(recipient, chainId));\n        emit LogAddRecipient(recipient, chainId);\n    }\n\n    function setOperator(address operator, bool status) external onlyOwner {\n        isOperator[operator] = status;\n        emit LogSetOperator(operator, status);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\nlibrary SafeTransferLib {\n    /*///////////////////////////////////////////////////////////////\n                            ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool callStatus;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(callStatus, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 100 because the calldata length is 4 + 32 * 3.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"APPROVE_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                         INTERNAL HELPER LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\n        assembly {\n            // Get how many bytes the call returned.\n            let returnDataSize := returndatasize()\n\n            // If the call reverted:\n            if iszero(callStatus) {\n                // Copy the revert message into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Revert with the same message.\n                revert(0, returnDataSize)\n            }\n\n            switch returnDataSize\n            case 32 {\n                // Copy the return data into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Set success to whether it returned true.\n                success := iszero(iszero(mload(0)))\n            }\n            case 0 {\n                // There was no return data.\n                success := 1\n            }\n            default {\n                // It returned some malformed input.\n                success := 0\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/BoringOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.12;\n\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\n// Edited by BoringCrypto\n\ncontract BoringOwnableData {\n    address public owner;\n    address public pendingOwner;\n}\n\ncontract BoringOwnable is BoringOwnableData {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice `owner` defaults to msg.sender on construction.\n    constructor() {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n    /// Can only be invoked by the current `owner`.\n    /// @param newOwner Address of the new owner.\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\n    function transferOwnership(\n        address newOwner,\n        bool direct,\n        bool renounce\n    ) public onlyOwner {\n        if (direct) {\n            // Checks\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\n\n            // Effects\n            emit OwnershipTransferred(owner, newOwner);\n            owner = newOwner;\n            pendingOwner = address(0);\n        } else {\n            // Effects\n            pendingOwner = newOwner;\n        }\n    }\n\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\n    function claimOwnership() public {\n        address _pendingOwner = pendingOwner;\n\n        // Checks\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\n\n        // Effects\n        emit OwnershipTransferred(owner, _pendingOwner);\n        owner = _pendingOwner;\n        pendingOwner = address(0);\n    }\n\n    /// @notice Only allows the `owner` to execute the function.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n}"
    },
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\nabstract contract ERC20 {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                           EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        if (allowance[from][msg.sender] != type(uint256).max) {\n            allowance[from][msg.sender] -= amount;\n        }\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v, r, s);\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_PERMIT_SIGNATURE\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(bytes(\"1\")),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "contracts/mspell/mSpell.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Inspired by Stable Joe Staking which in turn is derived from the SushiSwap MasterChef contract\n\npragma solidity 0.8.10;\nimport \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\nimport \"../libraries/BoringOwnable.sol\";\n\n/**\n * @title Magic Spell Staking\n * @author 0xMerlin\n */\ncontract mSpellStaking is BoringOwnable {\n    using SafeTransferLib for ERC20;\n\n    /// @notice Info of each user\n    struct UserInfo {\n        uint128 amount;\n\n        uint128 rewardDebt;\n        uint128 lastAdded;\n        /**\n         * @notice We do some fancy math here. Basically, any point in time, the amount of JOEs\n         * entitled to a user but is pending to be distributed is:\n         *\n         *   pending reward = (user.amount * accRewardPerShare) - user.rewardDebt[token]\n         *\n         * Whenever a user deposits or withdraws SPELL. Here's what happens:\n         *   1. accRewardPerShare (and `lastRewardBalance`) gets updated\n         *   2. User receives the pending reward sent to his/her address\n         *   3. User's `amount` gets updated\n         *   4. User's `rewardDebt[token]` gets updated\n         */\n    }\n\n    ERC20 public immutable spell;\n    /// @notice Array of tokens that users can claim\n    ERC20 public immutable mim;\n    /// @notice Last reward balance of `token`\n    uint256 public lastRewardBalance;\n\n    /// @notice amount of time that the position is locked for.\n    uint256 private constant LOCK_TIME = 24 hours;\n    bool public toggleLockup;\n\n    /// @notice Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`\n    uint256 public accRewardPerShare;\n    /// @notice The precision of `accRewardPerShare`\n    uint256 public constant ACC_REWARD_PER_SHARE_PRECISION = 1e24;\n\n    /// @dev Info of each user that stakes SPELL\n    mapping(address => UserInfo) public userInfo;\n\n    /// @notice Emitted when a user deposits SPELL\n    event Deposit(address indexed user, uint256 amount);\n\n    /// @notice Emitted when a user withdraws SPELL\n    event Withdraw(address indexed user, uint256 amount);\n\n    /// @notice Emitted when a user claims reward\n    event ClaimReward(address indexed user, uint256 amount);\n\n    /// @notice Emitted when a user emergency withdraws its SPELL\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n\n    /**\n     * @notice Initialize a new mSpellStaking contract\n     * @dev This contract needs to receive an ERC20 `_rewardToken` in order to distribute them\n     * (with MoneyMaker in our case)\n     * @param _mim The address of the MIM token\n     * @param _spell The address of the SPELL token\n     */\n    constructor(\n        ERC20 _mim,\n        ERC20 _spell\n    ) {\n        require(address(_mim) != address(0), \"mSpellStaking: reward token can't be address(0)\");\n        require(address(_spell) != address(0), \"mSpellStaking: spell can't be address(0)\");\n\n        spell = _spell;\n        toggleLockup = true;\n\n        mim = _mim;\n    }\n\n    /**\n     * @notice Deposit SPELL for reward token allocation\n     * @param _amount The amount of SPELL to deposit\n     */\n    function deposit(uint256 _amount) external {\n        UserInfo storage user = userInfo[msg.sender];\n\n        uint256 _previousAmount = user.amount;\n        uint256 _newAmount = user.amount + _amount;\n        user.amount = uint128(_newAmount);\n        user.lastAdded = uint128(block.timestamp);\n\n        updateReward();\n\n        uint256 _previousRewardDebt = user.rewardDebt;\n        user.rewardDebt = uint128(_newAmount * accRewardPerShare / ACC_REWARD_PER_SHARE_PRECISION);\n\n        if (_previousAmount != 0) {\n            uint256 _pending = _previousAmount * accRewardPerShare / ACC_REWARD_PER_SHARE_PRECISION - _previousRewardDebt;\n            if (_pending != 0) {\n                safeTokenTransfer(mim, msg.sender, _pending);\n                emit ClaimReward(msg.sender, _pending);\n            }\n        }\n\n        spell.safeTransferFrom(msg.sender, address(this), _amount);\n        emit Deposit(msg.sender, _amount);\n    }\n\n    /**\n     * @notice View function to see pending reward token on frontend\n     * @param _user The address of the user\n     * @return `_user`'s pending reward token\n     */\n    function pendingReward(address _user) external view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        uint256 _totalSpell = spell.balanceOf(address(this));\n        uint256 _accRewardTokenPerShare = accRewardPerShare;\n\n        uint256 _rewardBalance = mim.balanceOf(address(this));\n\n        if (_rewardBalance != lastRewardBalance && _totalSpell != 0) {\n            uint256 _accruedReward = _rewardBalance - lastRewardBalance;\n            _accRewardTokenPerShare = _accRewardTokenPerShare + _accruedReward * ACC_REWARD_PER_SHARE_PRECISION / _totalSpell;\n        }\n        return user.amount * _accRewardTokenPerShare / ACC_REWARD_PER_SHARE_PRECISION - user.rewardDebt;\n    }\n\n    /**\n     * @notice Withdraw SPELL and harvest the rewards\n     * @param _amount The amount of SPELL to withdraw\n     */\n    function withdraw(uint256 _amount) external {\n        UserInfo storage user = userInfo[msg.sender];\n\n        require(!toggleLockup || user.lastAdded + LOCK_TIME < block.timestamp, \"mSpell: Wait for LockUp\");\n\n        uint256 _previousAmount = user.amount;\n        uint256 _newAmount = user.amount - _amount;\n        user.amount = uint128(_newAmount);\n\n        updateReward();\n\n        uint256 _pending = _previousAmount * accRewardPerShare / ACC_REWARD_PER_SHARE_PRECISION - user.rewardDebt;\n        user.rewardDebt = uint128(_newAmount * accRewardPerShare / ACC_REWARD_PER_SHARE_PRECISION);\n\n        if (_pending != 0) {\n            safeTokenTransfer(mim, msg.sender, _pending);\n            emit ClaimReward(msg.sender, _pending);\n        }\n\n        spell.safeTransfer(msg.sender, _amount);\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY\n     */\n    function emergencyWithdraw() external {\n        UserInfo storage user = userInfo[msg.sender];\n\n        uint256 _amount = user.amount;\n\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        spell.safeTransfer(msg.sender, _amount);\n        emit EmergencyWithdraw(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Update reward variables\n     * @dev Needs to be called before any deposit or withdrawal\n     */\n    function updateReward() public {\n        uint256 _rewardBalance = mim.balanceOf(address(this));\n        uint256 _totalSpell = spell.balanceOf(address(this));\n\n        // Did mSpellStaking receive any token\n        if (_rewardBalance == lastRewardBalance || _totalSpell == 0) {\n            return;\n        }\n\n        uint256 _accruedReward = _rewardBalance - lastRewardBalance;\n\n        accRewardPerShare = accRewardPerShare + _accruedReward * ACC_REWARD_PER_SHARE_PRECISION / _totalSpell;\n        lastRewardBalance = _rewardBalance;\n    }\n\n    /**\n     * @notice Safe token transfer function, just in case if rounding error\n     * causes pool to not have enough reward tokens\n     * @param _token The address of then token to transfer\n     * @param _to The address that will receive `_amount` `rewardToken`\n     * @param _amount The amount to send to `_to`\n     */\n    function safeTokenTransfer(\n        ERC20 _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 _rewardBalance = _token.balanceOf(address(this));\n\n        if (_amount > _rewardBalance) {\n            lastRewardBalance = lastRewardBalance - _rewardBalance;\n            _token.safeTransfer(_to, _rewardBalance);\n        } else {\n            lastRewardBalance = lastRewardBalance - _amount;\n            _token.safeTransfer(_to, _amount);\n        }\n    }\n\n    /**\n     * @notice Allows to enable and disable the lockup\n     * @param status The new lockup status\n     */\n\n     function toggleLockUp(bool status) external onlyOwner {\n        toggleLockup = status;\n     }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}