{
  "address": "0x1E217d3cA2a19f2cB0F9f12a65b40f335286758E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "_bentoBox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FUSDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LP",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM3POOL",
      "outputs": [
        {
          "internalType": "contract CurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapExact",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shareUsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x611192b2aee335f6557986a8704d61b451458e81c1b4ebb9e39213330c372173",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0x1E217d3cA2a19f2cB0F9f12a65b40f335286758E",
    "transactionIndex": 3,
    "gasUsed": "526326",
    "logsBloom": "0x
    "blockHash": "0x0001c5260000071affcb60eeb2a62d160a5cdf7e7c41b512e6426c8f82c2dceb",
    "transactionHash": "0x611192b2aee335f6557986a8704d61b451458e81c1b4ebb9e39213330c372173",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 38996935,
        "transactionHash": "0x611192b2aee335f6557986a8704d61b451458e81c1b4ebb9e39213330c372173",
        "address": "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001e217d3ca2a19f2cb0f9f12a65b40f335286758e",
          "0x0000000000000000000000002dd7c9371965472e5a5fd28fbe165007c61439e1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x0001c5260000071affcb60eeb2a62d160a5cdf7e7c41b512e6426c8f82c2dceb"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38996935,
        "transactionHash": "0x611192b2aee335f6557986a8704d61b451458e81c1b4ebb9e39213330c372173",
        "address": "0x049d68029688eAbF473097a2fC38ef61633A3C7A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001e217d3ca2a19f2cb0f9f12a65b40f335286758e",
          "0x0000000000000000000000002dd7c9371965472e5a5fd28fbe165007c61439e1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x0001c5260000071affcb60eeb2a62d160a5cdf7e7c41b512e6426c8f82c2dceb"
      }
    ],
    "blockNumber": 38996935,
    "cumulativeGasUsed": "717524",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc7a161Cfd0e133d289B13692b636B8e8B5CD8d8c"
  ],
  "numDeployments": 1,
  "solcInputHash": "3cedbfc58fe4754231958049c0f01daf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"_bentoBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FUSDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM3POOL\",\"outputs\":[{\"internalType\":\"contract CurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapExact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shareUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap(address,address,address,uint256,uint256)\":{\"notice\":\"Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for at least 'amountToMin' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Returns the amount of tokens 'to' transferred to BentoBox. (The BentoBox skim function will be used by the caller to get the swapped funds).\"},\"swapExact(address,address,address,address,uint256,uint256)\":{\"notice\":\"Calculates the amount of token 'from' needed to complete the swap (amountFrom), this should be less than or equal to amountFromMax. Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for exactly 'exactAmountTo' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom). Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom). (The BentoBox skim function will be used by the caller to get the swapped funds).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Liquidations/SpiritfUSDTUSDCSwapper.sol\":\"SpiritfUSDTUSDCSwapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":690},\"remappings\":[]},\"sources\":{\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBentoBoxV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IBentoBoxV1 {\\r\\n    function toAmount(\\r\\n        address _token,\\r\\n        uint256 _share,\\r\\n        bool _roundUp\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function withdraw(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deploy(\\r\\n        address masterContract,\\r\\n        bytes calldata data,\\r\\n        bool useCreate2\\r\\n    ) external payable returns (address cloneAddress);\\r\\n\\r\\n    function setMasterContractApproval(\\r\\n        address user,\\r\\n        address masterContract,\\r\\n        bool approved,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(IERC20, address) external view returns (uint256);\\r\\n\\r\\n    function totals(IERC20) external view returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function flashLoan(\\r\\n        address borrower,\\r\\n        address receiver,\\r\\n        IERC20 token,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function toShare(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 share);\\r\\n}\\r\\n\",\"keccak256\":\"0xf654f9181ff602627dd70c0c65999488b3a28d6941386231351f38bc9eb7f8fb\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x051f26454648a09bf39bed672a6a7aa9b5bc7b3f74822de5e743beef94428c52\",\"license\":\"MIT\"},\"contracts/interfaces/IPopsicle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IPopsicle {\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    function usersAmounts() external view returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function totalSupply() external view returns (uint256 amount);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256 shares, address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function tickLower() external view returns (int24);\\r\\n\\r\\n    function tickUpper() external view returns (int24);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 amount0Desired,\\r\\n        uint256 amount1Desired,\\r\\n        address to\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 shares,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xd15ec8ff66de58406a9961383e2636c3b414f56ccc04eb0312782a11f5628f53\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapperGeneric.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >= 0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ISwapperGeneric {\\r\\n    /// @notice Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\r\\n    /// Swaps it for at least 'amountToMin' of token 'to'.\\r\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\r\\n    /// Returns the amount of tokens 'to' transferred to BentoBox.\\r\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\r\\n    function swap(\\r\\n        IERC20 fromToken,\\r\\n        IERC20 toToken,\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom\\r\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\r\\n\\r\\n    /// @notice Calculates the amount of token 'from' needed to complete the swap (amountFrom),\\r\\n    /// this should be less than or equal to amountFromMax.\\r\\n    /// Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\r\\n    /// Swaps it for exactly 'exactAmountTo' of token 'to'.\\r\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\r\\n    /// Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom).\\r\\n    /// Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom).\\r\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\r\\n    function swapExact(\\r\\n        IERC20 fromToken,\\r\\n        IERC20 toToken,\\r\\n        address recipient,\\r\\n        address refundTo,\\r\\n        uint256 shareFromSupplied,\\r\\n        uint256 shareToExact\\r\\n    ) external returns (uint256 shareUsed, uint256 shareReturned);\\r\\n}\\r\\n\",\"keccak256\":\"0xa570144cf506e407d9f9283278509e24015e69e15f0017f9ea7d3fe4b870b13e\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable func-name-mixedcase, var-name-mixedcase\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface CurvePool {\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n\\r\\n    function exchange_underlying(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function exchange(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function exchange(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function get_dy_underlying(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function get_dy(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address _spender, uint256 _value) external returns (bool);\\r\\n\\r\\n    function add_liquidity(uint256[2] memory amounts, uint256 _min_mint_amount) external;\\r\\n\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 _min_mint_amount) external;\\r\\n\\r\\n    function add_liquidity(uint256[4] memory amounts, uint256 _min_mint_amount) external;\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 tokenAmount,\\r\\n        int128 i,\\r\\n        uint256 min_amount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 tokenAmount,\\r\\n        uint256 i,\\r\\n        uint256 min_amount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 tokenAmount,\\r\\n        int128 i,\\r\\n        uint256 min_amount,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x22260ed5207ce81d1bfc5f97685d1859f034861ffb22adfed2f176ab05bb6a61\",\"license\":\"MIT\"},\"contracts/swappers/Liquidations/SpiritfUSDTUSDCSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"../../interfaces/ISwapperGeneric.sol\\\";\\r\\nimport \\\"../../interfaces/IPopsicle.sol\\\";\\r\\nimport \\\"../../interfaces/IBentoBoxV1.sol\\\";\\r\\nimport \\\"../../interfaces/curve/ICurvePool.sol\\\";\\r\\n\\r\\ncontract SpiritfUSDTUSDCSwapper is ISwapperGeneric {\\r\\n    IBentoBoxV1 public immutable bentoBox;\\r\\n\\r\\n    IUniswapV2Pair public constant LP = IUniswapV2Pair(0xe7F86CEf8FEf60ce5050899D1F8e465C00D04a79);\\r\\n\\r\\n    CurvePool public constant MIM3POOL = CurvePool(0x2dd7C9371965472E5A5fD28fbE165007c61439E1);\\r\\n    IERC20 public constant MIM = IERC20(0x82f0B8B456c1A451378467398982d4834b6829c1);\\r\\n    IERC20 public constant USDC = IERC20(0x04068DA6C83AFCFA0e13ba15A6696662335D5B75);\\r\\n    IERC20 public constant FUSDT = IERC20(0x049d68029688eAbF473097a2fC38ef61633A3C7A);\\r\\n\\r\\n    constructor(IBentoBoxV1 _bentoBox) {\\r\\n        bentoBox = _bentoBox;\\r\\n\\r\\n        USDC.approve(address(MIM3POOL), type(uint256).max);\\r\\n        FUSDT.approve(address(MIM3POOL), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISwapperGeneric\\r\\n    function swap(\\r\\n        IERC20,\\r\\n        IERC20,\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom\\r\\n    ) public override returns (uint256 extraShare, uint256 shareReturned) {\\r\\n        (uint256 amountFrom, ) = bentoBox.withdraw(IERC20(address(LP)), address(this), address(this), 0, shareFrom);\\r\\n\\r\\n        // LP -> USDC/fUSDT\\r\\n        LP.transfer(address(LP), amountFrom);\\r\\n        (uint256 usdcAmount, uint256 fusdtAmount) = LP.burn(address(this));\\r\\n\\r\\n        // fUSDT -> MIM\\r\\n        uint256 mimAmount = MIM3POOL.exchange(1, 0, fusdtAmount, 0, address(bentoBox));\\r\\n\\r\\n        // USDC -> MIM\\r\\n        mimAmount += MIM3POOL.exchange(2, 0, usdcAmount, 0, address(bentoBox));\\r\\n\\r\\n        (, shareReturned) = bentoBox.deposit(MIM, address(bentoBox), recipient, mimAmount, 0);\\r\\n        extraShare = shareReturned - shareToMin;\\r\\n    }\\r\\n\\r\\n    // Swaps to an exact amount, from a flexible input amount\\r\\n    /// @inheritdoc ISwapperGeneric\\r\\n    function swapExact(\\r\\n        IERC20,\\r\\n        IERC20,\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256\\r\\n    ) public pure virtual returns (uint256 shareUsed, uint256 shareReturned) {\\r\\n        return (0, 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb413c0515db5088b58016575491c0e47544377d2f43466ac09ddaf5350560fe1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161096438038061096483398101604081905261002f91610166565b6001600160a01b03811660805260405163095ea7b360e01b8152732dd7c9371965472e5a5fd28fbe165007c61439e1600482015260001960248201527304068da6c83afcfa0e13ba15a6696662335d5b759063095ea7b3906044016020604051808303816000875af11580156100a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cd9190610196565b5060405163095ea7b360e01b8152732dd7c9371965472e5a5fd28fbe165007c61439e16004820152600019602482015273049d68029688eabf473097a2fc38ef61633a3c7a9063095ea7b3906044016020604051808303816000875af115801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f9190610196565b50506101b8565b60006020828403121561017857600080fd5b81516001600160a01b038116811461018f57600080fd5b9392505050565b6000602082840312156101a857600080fd5b8151801515811461018f57600080fd5b6080516107756101ef60003960008181610116015281816101ea0152818161038501528181610445015261050901526107756000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806389a302711161005b57806389a3027114610138578063b6fccf8a14610153578063daec383d1461016e578063e343fe121461018957600080fd5b806322a88c091461008d57806323c35834146100c55780634622be90146100e05780636b2ace8714610111575b600080fd5b6100a8732dd7c9371965472e5a5fd28fbe165007c61439e181565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a873049d68029688eabf473097a2fc38ef61633a3c7a81565b6100fc6100ee3660046105cb565b600080965096945050505050565b604080519283526020830191909152016100bc565b6100a87f000000000000000000000000000000000000000000000000000000000000000081565b6100a87304068da6c83afcfa0e13ba15a6696662335d5b7581565b6100a873e7f86cef8fef60ce5050899d1f8e465c00d04a7981565b6100a87382f0b8b456c1a451378467398982d4834b6829c181565b6100fc610197366004610639565b60405163097da6d360e41b815273e7f86cef8fef60ce5050899d1f8e465c00d04a796004820152306024820181905260448201526000606482018190526084820183905290819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015610232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102569190610694565b5060405163a9059cbb60e01b815273e7f86cef8fef60ce5050899d1f8e465c00d04a79600482018190526024820183905291925063a9059cbb906044016020604051808303816000875af11580156102b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d691906106b8565b5060405163226bf2d160e21b8152306004820152600090819073e7f86cef8fef60ce5050899d1f8e465c00d04a79906389afcb449060240160408051808303816000875af115801561032c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103509190610694565b60405163ddc1f59d60e01b81526001600482015260006024820181905260448201839052606482018190526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166084830152929450909250732dd7c9371965472e5a5fd28fbe165007c61439e19063ddc1f59d9060a4016020604051808303816000875af11580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041291906106e1565b60405163ddc1f59d60e01b8152600260048201526000602482018190526044820186905260648201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166084820152909150732dd7c9371965472e5a5fd28fbe165007c61439e19063ddc1f59d9060a4016020604051808303816000875af11580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf91906106e1565b6104d99082610710565b60405162ae511b60e21b81527382f0b8b456c1a451378467398982d4834b6829c160048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301819052908c16604483015260648201839052600060848301529192506302b9446c9060a40160408051808303816000875af1158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610694565b95506105a390508886610728565b9550505050509550959350505050565b6001600160a01b03811681146105c857600080fd5b50565b60008060008060008060c087890312156105e457600080fd5b86356105ef816105b3565b955060208701356105ff816105b3565b9450604087013561060f816105b3565b9350606087013561061f816105b3565b9598949750929560808101359460a0909101359350915050565b600080600080600060a0868803121561065157600080fd5b853561065c816105b3565b9450602086013561066c816105b3565b9350604086013561067c816105b3565b94979396509394606081013594506080013592915050565b600080604083850312156106a757600080fd5b505080516020909101519092909150565b6000602082840312156106ca57600080fd5b815180151581146106da57600080fd5b9392505050565b6000602082840312156106f357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610723576107236106fa565b500190565b60008282101561073a5761073a6106fa565b50039056fea26469706673582212208f3f82eb8a929e5d16d29304c56ec1603e5ac0dd92c60fb6a6c12e2bfe5ecfec64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806389a302711161005b57806389a3027114610138578063b6fccf8a14610153578063daec383d1461016e578063e343fe121461018957600080fd5b806322a88c091461008d57806323c35834146100c55780634622be90146100e05780636b2ace8714610111575b600080fd5b6100a8732dd7c9371965472e5a5fd28fbe165007c61439e181565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a873049d68029688eabf473097a2fc38ef61633a3c7a81565b6100fc6100ee3660046105cb565b600080965096945050505050565b604080519283526020830191909152016100bc565b6100a87f000000000000000000000000000000000000000000000000000000000000000081565b6100a87304068da6c83afcfa0e13ba15a6696662335d5b7581565b6100a873e7f86cef8fef60ce5050899d1f8e465c00d04a7981565b6100a87382f0b8b456c1a451378467398982d4834b6829c181565b6100fc610197366004610639565b60405163097da6d360e41b815273e7f86cef8fef60ce5050899d1f8e465c00d04a796004820152306024820181905260448201526000606482018190526084820183905290819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015610232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102569190610694565b5060405163a9059cbb60e01b815273e7f86cef8fef60ce5050899d1f8e465c00d04a79600482018190526024820183905291925063a9059cbb906044016020604051808303816000875af11580156102b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d691906106b8565b5060405163226bf2d160e21b8152306004820152600090819073e7f86cef8fef60ce5050899d1f8e465c00d04a79906389afcb449060240160408051808303816000875af115801561032c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103509190610694565b60405163ddc1f59d60e01b81526001600482015260006024820181905260448201839052606482018190526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166084830152929450909250732dd7c9371965472e5a5fd28fbe165007c61439e19063ddc1f59d9060a4016020604051808303816000875af11580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041291906106e1565b60405163ddc1f59d60e01b8152600260048201526000602482018190526044820186905260648201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166084820152909150732dd7c9371965472e5a5fd28fbe165007c61439e19063ddc1f59d9060a4016020604051808303816000875af11580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf91906106e1565b6104d99082610710565b60405162ae511b60e21b81527382f0b8b456c1a451378467398982d4834b6829c160048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301819052908c16604483015260648201839052600060848301529192506302b9446c9060a40160408051808303816000875af1158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610694565b95506105a390508886610728565b9550505050509550959350505050565b6001600160a01b03811681146105c857600080fd5b50565b60008060008060008060c087890312156105e457600080fd5b86356105ef816105b3565b955060208701356105ff816105b3565b9450604087013561060f816105b3565b9350606087013561061f816105b3565b9598949750929560808101359460a0909101359350915050565b600080600080600060a0868803121561065157600080fd5b853561065c816105b3565b9450602086013561066c816105b3565b9350604086013561067c816105b3565b94979396509394606081013594506080013592915050565b600080604083850312156106a757600080fd5b505080516020909101519092909150565b6000602082840312156106ca57600080fd5b815180151581146106da57600080fd5b9392505050565b6000602082840312156106f357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610723576107236106fa565b500190565b60008282101561073a5761073a6106fa565b50039056fea26469706673582212208f3f82eb8a929e5d16d29304c56ec1603e5ac0dd92c60fb6a6c12e2bfe5ecfec64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swap(address,address,address,uint256,uint256)": {
        "notice": "Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for at least 'amountToMin' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Returns the amount of tokens 'to' transferred to BentoBox. (The BentoBox skim function will be used by the caller to get the swapped funds)."
      },
      "swapExact(address,address,address,address,uint256,uint256)": {
        "notice": "Calculates the amount of token 'from' needed to complete the swap (amountFrom), this should be less than or equal to amountFromMax. Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for exactly 'exactAmountTo' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom). Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom). (The BentoBox skim function will be used by the caller to get the swapped funds)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}