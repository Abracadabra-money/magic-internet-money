{
  "address": "0x15a2a96608b48ebfd80c31DA8a9bE340A354CD46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_SPELL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mSpell",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mSpellSender",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotNoon",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "SPELL",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mSpell",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mSpellSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1f2d723b15990dfbaca718c55a97ee7f11ec78b01fa7b3890e6f98bf5baa948b",
  "receipt": {
    "to": null,
    "from": "0xb4EfdA6DAf5ef75D08869A0f9C0213278fb43b6C",
    "contractAddress": "0x15a2a96608b48ebfd80c31DA8a9bE340A354CD46",
    "transactionIndex": 12,
    "gasUsed": "918609",
    "logsBloom": "0x
    "blockHash": "0xaa0a179c6162f70147785f487659f3917cb92602eddd74a58cc5c136f3da9f4b",
    "transactionHash": "0x1f2d723b15990dfbaca718c55a97ee7f11ec78b01fa7b3890e6f98bf5baa948b",
    "logs": [],
    "blockNumber": 12699141,
    "cumulativeGasUsed": "3489573",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3c2269811836af69497E5F486A85D7316753cf62",
    "0xCE1bFFBD5374Dac86a2893119683F4911a2F7814",
    "0xC1f1862dE85374378173566a8F3BE28DA3c3EC70",
    "0xf780Dec6C8f7B4a14858FE3CCD64E4CC1F8F3e12"
  ],
  "numDeployments": 1,
  "solcInputHash": "9948f6800783bd651239ff2c49784094",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_SPELL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mSpell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mSpellSender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotNoon\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"SPELL\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mSpell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mSpellSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mspell/mSpellReporter.sol\":\"mSpellReporter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x058e0708ffdd2b04a17b96b5775d9fab8daa19d3cd37d26ce6c923679bf9cc9a\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50f187c86835070ec519acffcc259cd7900fdb85cb53333210fba9491eb65eca\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xfc70adbccff46f55614fe8ddcd6966a7cbae0bfcbe787e58cb1a327a5e8bfdf6\",\"license\":\"MIT\"},\"contracts/mspell/mSpellReporter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nimport \\\"../libraries/BokkyPooBahsDateTimeLibrary.sol\\\";\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\ninterface ILayerZeroEndpoint {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n}\\n\\ncontract mSpellReporter {\\n    using SafeTransferLib for ERC20;\\n    ILayerZeroEndpoint private immutable endpoint;\\n    uint16 private constant destChain = 1;\\n    address private constant refund = 0xfddfE525054efaAD204600d00CA86ADb1Cc2ea8a;\\n    ERC20 public immutable SPELL;\\n    address public immutable mSpell;\\n    address public immutable mSpellSender;\\n    uint256 public lastUpdated;\\n\\n    constructor (ILayerZeroEndpoint _endpoint, ERC20 _SPELL, address _mSpell, address _mSpellSender){\\n        SPELL = _SPELL;\\n        mSpell = _mSpell;\\n        mSpellSender = _mSpellSender;\\n        endpoint = _endpoint;\\n    }\\n\\n    error NotNoon();\\n\\n    modifier onlyNoon {\\n        uint256 hour = block.timestamp / 1 hours % 24;\\n        if (hour != 12) {\\n            revert NotNoon();\\n        }\\n        _;\\n    }\\n\\n    function withdraw() external {\\n        // get the amount of Ether stored in this contract\\n        uint amount = address(this).balance;\\n\\n        // send all Ether to owner\\n        // Owner can receive Ether since the address of owner is payable\\n        (bool success, ) = refund.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function sendAmount () external onlyNoon {\\n        require(BokkyPooBahsDateTimeLibrary.getDay(lastUpdated) < BokkyPooBahsDateTimeLibrary.getDay(block.timestamp) || BokkyPooBahsDateTimeLibrary.getYear(lastUpdated) < BokkyPooBahsDateTimeLibrary.getYear(block.timestamp));\\n        uint256 weekDay = BokkyPooBahsDateTimeLibrary.getDayOfWeek(block.timestamp);\\n        require(weekDay == 1 || weekDay == 3 || weekDay == 5);\\n        uint128 amount = uint128(SPELL.balanceOf(mSpell));\\n        bytes memory payload = abi.encode(uint32(block.timestamp), amount);\\n\\n        endpoint.send{value: address(this).balance} (\\n            destChain,\\n            abi.encodePacked(mSpellSender),\\n            payload,\\n            payable(this),\\n            address(0),\\n            bytes(\\\"\\\")\\n        );\\n\\n        lastUpdated = block.timestamp;\\n    }\\n    fallback() external payable {}\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x5ea699a4c6d1438e2248894af81b90eee37cd6c0553591acaaab0317b1205f6e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200125038038062001250833981810160405281019062000038919062000206565b8273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050505062000278565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001448262000117565b9050919050565b6000620001588262000137565b9050919050565b6200016a816200014b565b81146200017657600080fd5b50565b6000815190506200018a816200015f565b92915050565b60006200019d8262000137565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b620001e08162000137565b8114620001ec57600080fd5b50565b6000815190506200020081620001d5565b92915050565b6000806000806080858703121562000223576200022262000112565b5b6000620002338782880162000179565b94505060206200024687828801620001be565b93505060406200025987828801620001ef565b92505060606200026c87828801620001ef565b91505092959194509250565b60805160a05160c05160e051610f89620002c76000396000818161022b0152610458015260008181610207015261037301526000818161024f0152610337015260006104190152610f896000f3fe6080604052600436106100595760003560e01c80633ccfd60b146100625780634375feb414610079578063572e9858146100a457806376636722146100cf5780638b2b3d8b146100fa578063d0b06f5d1461011157610060565b3661006057005b005b34801561006e57600080fd5b5061007761013c565b005b34801561008557600080fd5b5061008e610205565b60405161009b919061077d565b60405180910390f35b3480156100b057600080fd5b506100b9610229565b6040516100c6919061077d565b60405180910390f35b3480156100db57600080fd5b506100e461024d565b6040516100f191906107f7565b60405180910390f35b34801561010657600080fd5b5061010f610271565b005b34801561011d57600080fd5b5061012661050a565b604051610133919061082b565b60405180910390f35b6000479050600073fddfe525054efaad204600d00ca86adb1cc2ea8a73ffffffffffffffffffffffffffffffffffffffff168260405161017b90610877565b60006040518083038185875af1925050503d80600081146101b8576040519150601f19603f3d011682016040523d82523d6000602084013e6101bd565b606091505b5050905080610201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f8906108e9565b60405180910390fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006018610e10426102839190610967565b61028d9190610998565b9050600c81146102c9576040517f3ea9114000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102d242610510565b6102dd600054610510565b10806102fa57506102ed42610537565b6102f8600054610537565b105b61030357600080fd5b600061030e4261055c565b9050600181148061031f5750600381145b8061032a5750600581145b61033357600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016103ae919061077d565b602060405180830381865afa1580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef91906109fa565b905060004282604051602001610406929190610a71565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c58031004760017f00000000000000000000000000000000000000000000000000000000000000006040516020016104879190610ae2565b60405160208183030381529060405285306000604051806020016040528060008152506040518863ffffffff1660e01b81526004016104cb96959493929190610bd4565b6000604051808303818588803b1580156104e457600080fd5b505af11580156104f8573d6000803e3d6000fd5b50505050504260008190555050505050565b60005481565b600061052962015180836105249190610967565b61059d565b909150905080915050919050565b6000610550620151808361054b9190610967565b61059d565b90505080915050919050565b600080620151808361056e9190610967565b9050600160076003836105819190610c4a565b61058b9190610998565b6105959190610c4a565b915050919050565b600080600080849050600062253d8c62010bd9836105bb9190610caa565b6105c59190610caa565b9050600062023ab18260046105da9190610d3e565b6105e49190610e55565b9050600460038262023ab16105f99190610d3e565b6106039190610caa565b61060d9190610e55565b826106189190610ebf565b9150600062164b0960018461062d9190610caa565b610fa061063a9190610d3e565b6106449190610e55565b9050601f6004826105b56106589190610d3e565b6106629190610e55565b8461066d9190610ebf565b6106779190610caa565b9250600061098f84605061068b9190610d3e565b6106959190610e55565b9050600060508261098f6106a99190610d3e565b6106b39190610e55565b856106be9190610ebf565b9050600b826106cd9190610e55565b945084600c6106dc9190610d3e565b6002836106e99190610caa565b6106f39190610ebf565b915084836031866107049190610ebf565b60646107109190610d3e565b61071a9190610caa565b6107249190610caa565b92508298508197508096505050505050509193909250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107678261073c565b9050919050565b6107778161075c565b82525050565b6000602082019050610792600083018461076e565b92915050565b6000819050919050565b60006107bd6107b86107b38461073c565b610798565b61073c565b9050919050565b60006107cf826107a2565b9050919050565b60006107e1826107c4565b9050919050565b6107f1816107d6565b82525050565b600060208201905061080c60008301846107e8565b92915050565b6000819050919050565b61082581610812565b82525050565b6000602082019050610840600083018461081c565b92915050565b600081905092915050565b50565b6000610861600083610846565b915061086c82610851565b600082019050919050565b600061088282610854565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006108d360148361088c565b91506108de8261089d565b602082019050919050565b60006020820190508181036000830152610902816108c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061097282610812565b915061097d83610812565b92508261098d5761098c610909565b5b828204905092915050565b60006109a382610812565b91506109ae83610812565b9250826109be576109bd610909565b5b828206905092915050565b600080fd5b6109d781610812565b81146109e257600080fd5b50565b6000815190506109f4816109ce565b92915050565b600060208284031215610a1057610a0f6109c9565b5b6000610a1e848285016109e5565b91505092915050565b600063ffffffff82169050919050565b610a4081610a27565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610a6b81610a46565b82525050565b6000604082019050610a866000830185610a37565b610a936020830184610a62565b9392505050565b60008160601b9050919050565b6000610ab282610a9a565b9050919050565b6000610ac482610aa7565b9050919050565b610adc610ad78261075c565b610ab9565b82525050565b6000610aee8284610acb565b60148201915081905092915050565b600061ffff82169050919050565b610b1481610afd565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b54578082015181840152602081019050610b39565b83811115610b63576000848401525b50505050565b6000601f19601f8301169050919050565b6000610b8582610b1a565b610b8f8185610b25565b9350610b9f818560208601610b36565b610ba881610b69565b840191505092915050565b6000610bbe8261073c565b9050919050565b610bce81610bb3565b82525050565b600060c082019050610be96000830189610b0b565b8181036020830152610bfb8188610b7a565b90508181036040830152610c0f8187610b7a565b9050610c1e6060830186610bc5565b610c2b608083018561076e565b81810360a0830152610c3d8184610b7a565b9050979650505050505050565b6000610c5582610812565b9150610c6083610812565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c9557610c94610938565b5b828201905092915050565b6000819050919050565b6000610cb582610ca0565b9150610cc083610ca0565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610cfb57610cfa610938565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610d3357610d32610938565b5b828201905092915050565b6000610d4982610ca0565b9150610d5483610ca0565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d9357610d92610938565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dd057610dcf610938565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0d57610e0c610938565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4a57610e49610938565b5b828202905092915050565b6000610e6082610ca0565b9150610e6b83610ca0565b925082610e7b57610e7a610909565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610eb457610eb3610938565b5b828205905092915050565b6000610eca82610ca0565b9150610ed583610ca0565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610f1057610f0f610938565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610f4857610f47610938565b5b82820390509291505056fea2646970667358221220088c781ef874462bb248a1e8b1ba76cdc71c935109d5226db4ff553f59c8554064736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80633ccfd60b146100625780634375feb414610079578063572e9858146100a457806376636722146100cf5780638b2b3d8b146100fa578063d0b06f5d1461011157610060565b3661006057005b005b34801561006e57600080fd5b5061007761013c565b005b34801561008557600080fd5b5061008e610205565b60405161009b919061077d565b60405180910390f35b3480156100b057600080fd5b506100b9610229565b6040516100c6919061077d565b60405180910390f35b3480156100db57600080fd5b506100e461024d565b6040516100f191906107f7565b60405180910390f35b34801561010657600080fd5b5061010f610271565b005b34801561011d57600080fd5b5061012661050a565b604051610133919061082b565b60405180910390f35b6000479050600073fddfe525054efaad204600d00ca86adb1cc2ea8a73ffffffffffffffffffffffffffffffffffffffff168260405161017b90610877565b60006040518083038185875af1925050503d80600081146101b8576040519150601f19603f3d011682016040523d82523d6000602084013e6101bd565b606091505b5050905080610201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f8906108e9565b60405180910390fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006018610e10426102839190610967565b61028d9190610998565b9050600c81146102c9576040517f3ea9114000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102d242610510565b6102dd600054610510565b10806102fa57506102ed42610537565b6102f8600054610537565b105b61030357600080fd5b600061030e4261055c565b9050600181148061031f5750600381145b8061032a5750600581145b61033357600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016103ae919061077d565b602060405180830381865afa1580156103cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ef91906109fa565b905060004282604051602001610406929190610a71565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c58031004760017f00000000000000000000000000000000000000000000000000000000000000006040516020016104879190610ae2565b60405160208183030381529060405285306000604051806020016040528060008152506040518863ffffffff1660e01b81526004016104cb96959493929190610bd4565b6000604051808303818588803b1580156104e457600080fd5b505af11580156104f8573d6000803e3d6000fd5b50505050504260008190555050505050565b60005481565b600061052962015180836105249190610967565b61059d565b909150905080915050919050565b6000610550620151808361054b9190610967565b61059d565b90505080915050919050565b600080620151808361056e9190610967565b9050600160076003836105819190610c4a565b61058b9190610998565b6105959190610c4a565b915050919050565b600080600080849050600062253d8c62010bd9836105bb9190610caa565b6105c59190610caa565b9050600062023ab18260046105da9190610d3e565b6105e49190610e55565b9050600460038262023ab16105f99190610d3e565b6106039190610caa565b61060d9190610e55565b826106189190610ebf565b9150600062164b0960018461062d9190610caa565b610fa061063a9190610d3e565b6106449190610e55565b9050601f6004826105b56106589190610d3e565b6106629190610e55565b8461066d9190610ebf565b6106779190610caa565b9250600061098f84605061068b9190610d3e565b6106959190610e55565b9050600060508261098f6106a99190610d3e565b6106b39190610e55565b856106be9190610ebf565b9050600b826106cd9190610e55565b945084600c6106dc9190610d3e565b6002836106e99190610caa565b6106f39190610ebf565b915084836031866107049190610ebf565b60646107109190610d3e565b61071a9190610caa565b6107249190610caa565b92508298508197508096505050505050509193909250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107678261073c565b9050919050565b6107778161075c565b82525050565b6000602082019050610792600083018461076e565b92915050565b6000819050919050565b60006107bd6107b86107b38461073c565b610798565b61073c565b9050919050565b60006107cf826107a2565b9050919050565b60006107e1826107c4565b9050919050565b6107f1816107d6565b82525050565b600060208201905061080c60008301846107e8565b92915050565b6000819050919050565b61082581610812565b82525050565b6000602082019050610840600083018461081c565b92915050565b600081905092915050565b50565b6000610861600083610846565b915061086c82610851565b600082019050919050565b600061088282610854565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006108d360148361088c565b91506108de8261089d565b602082019050919050565b60006020820190508181036000830152610902816108c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061097282610812565b915061097d83610812565b92508261098d5761098c610909565b5b828204905092915050565b60006109a382610812565b91506109ae83610812565b9250826109be576109bd610909565b5b828206905092915050565b600080fd5b6109d781610812565b81146109e257600080fd5b50565b6000815190506109f4816109ce565b92915050565b600060208284031215610a1057610a0f6109c9565b5b6000610a1e848285016109e5565b91505092915050565b600063ffffffff82169050919050565b610a4081610a27565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610a6b81610a46565b82525050565b6000604082019050610a866000830185610a37565b610a936020830184610a62565b9392505050565b60008160601b9050919050565b6000610ab282610a9a565b9050919050565b6000610ac482610aa7565b9050919050565b610adc610ad78261075c565b610ab9565b82525050565b6000610aee8284610acb565b60148201915081905092915050565b600061ffff82169050919050565b610b1481610afd565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b54578082015181840152602081019050610b39565b83811115610b63576000848401525b50505050565b6000601f19601f8301169050919050565b6000610b8582610b1a565b610b8f8185610b25565b9350610b9f818560208601610b36565b610ba881610b69565b840191505092915050565b6000610bbe8261073c565b9050919050565b610bce81610bb3565b82525050565b600060c082019050610be96000830189610b0b565b8181036020830152610bfb8188610b7a565b90508181036040830152610c0f8187610b7a565b9050610c1e6060830186610bc5565b610c2b608083018561076e565b81810360a0830152610c3d8184610b7a565b9050979650505050505050565b6000610c5582610812565b9150610c6083610812565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c9557610c94610938565b5b828201905092915050565b6000819050919050565b6000610cb582610ca0565b9150610cc083610ca0565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610cfb57610cfa610938565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610d3357610d32610938565b5b828201905092915050565b6000610d4982610ca0565b9150610d5483610ca0565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d9357610d92610938565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dd057610dcf610938565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0d57610e0c610938565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4a57610e49610938565b5b828202905092915050565b6000610e6082610ca0565b9150610e6b83610ca0565b925082610e7b57610e7a610909565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610eb457610eb3610938565b5b828205905092915050565b6000610eca82610ca0565b9150610ed583610ca0565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610f1057610f0f610938565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610f4857610f47610938565b5b82820390509291505056fea2646970667358221220088c781ef874462bb248a1e8b1ba76cdc71c935109d5226db4ff553f59c8554064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2148,
        "contract": "contracts/mspell/mSpellReporter.sol:mSpellReporter",
        "label": "lastUpdated",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}