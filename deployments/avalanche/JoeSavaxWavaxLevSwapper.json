{
  "address": "0xd1631DD915cc7B0ad94c307b576012817F6C41A5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxV1Minimal",
          "name": "_bentoBox",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_mim",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zeroXExchangeProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minOneSideableAmount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOneSideableAmount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrToken0SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrToken1SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mim",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minOneSideableAmount0",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minOneSideableAmount1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zeroXExchangeProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ca5e828e0f6b371247cb92ff47ccf21e104f0905bd487836360eb013e69ed59",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0xd1631DD915cc7B0ad94c307b576012817F6C41A5",
    "transactionIndex": 2,
    "gasUsed": "1354441",
    "logsBloom": "0x
    "blockHash": "0x82c0313ed2e6375fe2b7118ae27ed0a075df2e6ce148891fe0a6a1ac7c3d0920",
    "transactionHash": "0x8ca5e828e0f6b371247cb92ff47ccf21e104f0905bd487836360eb013e69ed59",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 15598557,
        "transactionHash": "0x8ca5e828e0f6b371247cb92ff47ccf21e104f0905bd487836360eb013e69ed59",
        "address": "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d1631dd915cc7b0ad94c307b576012817f6c41a5",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x82c0313ed2e6375fe2b7118ae27ed0a075df2e6ce148891fe0a6a1ac7c3d0920"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 15598557,
        "transactionHash": "0x8ca5e828e0f6b371247cb92ff47ccf21e104f0905bd487836360eb013e69ed59",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d1631dd915cc7b0ad94c307b576012817f6c41a5",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x82c0313ed2e6375fe2b7118ae27ed0a075df2e6ce148891fe0a6a1ac7c3d0920"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 15598557,
        "transactionHash": "0x8ca5e828e0f6b371247cb92ff47ccf21e104f0905bd487836360eb013e69ed59",
        "address": "0x130966628846BFd36ff31a822705796e8cb8C18D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000d1631dd915cc7b0ad94c307b576012817f6c41a5",
          "0x000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 9,
        "blockHash": "0x82c0313ed2e6375fe2b7118ae27ed0a075df2e6ce148891fe0a6a1ac7c3d0920"
      }
    ],
    "blockNumber": 15598557,
    "cumulativeGasUsed": "1563834",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD825d06061fdc0585e4373F0A3F01a8C02b0e6A4",
    "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
    "0x4b946c91C2B1a7d7C40FB3C130CdfBaf8389094d",
    "0x130966628846BFd36ff31a822705796e8cb8C18D",
    "0xDef1C0ded9bec7F1a1670819833240f027b25EfF",
    "10000000000000000",
    "10000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "469e47309c479f66de662c0a08238ba7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1Minimal\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_mim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroXExchangeProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOneSideableAmount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOneSideableAmount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrToken0SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrToken1SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mim\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOneSideableAmount0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOneSideableAmount1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroXExchangeProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"minOneSideableAmount0\":{\"details\":\"The minimum amount of amount0 and amount1 amounts to trigger adding extra liquidity\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Generic LP leverage swapper for Uniswap like compatible DEX using Matcha/0x aggregator\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Leverage/0x/ZeroXUniswapLikeLPLevSwapper.sol\":\"ZeroXUniswapLikeLPLevSwapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":690},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc39d0f5693925ea1e8c517f7cc24211a9899c83a57e62d806180cdb056b6b75\",\"license\":\"AGPL-3.0-only\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x12091adc186fe351c639dc62aa0b691f78c7bea054c27bbb4b58acd02e1b2ce7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBentoBoxV1Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IBentoBoxV1Minimal {\\r\\n    function toAmount(\\r\\n        address _token,\\r\\n        uint256 _share,\\r\\n        bool _roundUp\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function withdraw(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deploy(\\r\\n        address masterContract,\\r\\n        bytes calldata data,\\r\\n        bool useCreate2\\r\\n    ) external payable returns (address cloneAddress);\\r\\n\\r\\n    function setMasterContractApproval(\\r\\n        address user,\\r\\n        address masterContract,\\r\\n        bool approved,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address, address) external view returns (uint256);\\r\\n\\r\\n    function totals(address) external view returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function flashLoan(\\r\\n        address borrower,\\r\\n        address receiver,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function toShare(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 share);\\r\\n}\",\"keccak256\":\"0x55a1fb58f49bbfd66add21b8796557d5c52bed842b778c3219ef503f51518c42\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x051f26454648a09bf39bed672a6a7aa9b5bc7b3f74822de5e743beef94428c52\",\"license\":\"MIT\"},\"contracts/interfaces/ILevSwapperV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface ILevSwapperV2 {\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\r\\n}\\r\\n\",\"keccak256\":\"0x5c253e03dd1e8bdc6229c3f725ca9258b46c7dc55c04de29890bb2b7f41ac610\",\"license\":\"MIT\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @notice Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method).\\r\\nlibrary Babylonian {\\r\\n    // computes square roots using the babylonian method\\r\\n    // credit for this implementation goes to\\r\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\r\\n        // however that code costs significantly more gas\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) {\\r\\n            xx >>= 128;\\r\\n            r <<= 64;\\r\\n        }\\r\\n        if (xx >= 0x10000000000000000) {\\r\\n            xx >>= 64;\\r\\n            r <<= 32;\\r\\n        }\\r\\n        if (xx >= 0x100000000) {\\r\\n            xx >>= 32;\\r\\n            r <<= 16;\\r\\n        }\\r\\n        if (xx >= 0x10000) {\\r\\n            xx >>= 16;\\r\\n            r <<= 8;\\r\\n        }\\r\\n        if (xx >= 0x100) {\\r\\n            xx >>= 8;\\r\\n            r <<= 4;\\r\\n        }\\r\\n        if (xx >= 0x10) {\\r\\n            xx >>= 4;\\r\\n            r <<= 2;\\r\\n        }\\r\\n        if (xx >= 0x8) {\\r\\n            r <<= 1;\\r\\n        }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return (r < r1 ? r : r1);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfdbe64ff139295d3a3f80e8f10aa93c49b5f362d61423f0f5613c3f0a392e569\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UniswapV2OneSidedUsingUniV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\\\";\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\nimport \\\"./Babylonian.sol\\\";\\r\\n\\r\\nlibrary UniswapV2OneSidedUsingUniV2 {\\r\\n    struct AddLiquidityAndOneSideRemainingParams {\\r\\n        IUniswapV2Router01 router;\\r\\n        IUniswapV2Pair pair;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        uint256 token0Amount;\\r\\n        uint256 token1Amount;\\r\\n        uint256 minOneSideableAmount0;\\r\\n        uint256 minOneSideableAmount1;\\r\\n        address recipient;\\r\\n    }\\r\\n\\r\\n    struct AddLiquidityFromSingleTokenParams {\\r\\n        IUniswapV2Router01 router;\\r\\n        IUniswapV2Pair pair;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        address tokenIn;\\r\\n        uint256 tokenInAmount;\\r\\n        address recipient;\\r\\n    }\\r\\n\\r\\n    function _calculateSwapInAmount(uint256 reserveIn, uint256 userIn) internal pure returns (uint256) {\\r\\n        return (Babylonian.sqrt(reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))) - (reserveIn * 1997)) / 1994;\\r\\n    }\\r\\n\\r\\n    function _getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) internal pure returns (uint256 amountOut) {\\r\\n        uint256 amountInWithFee = amountIn * 997;\\r\\n        uint256 numerator = amountInWithFee * reserveOut;\\r\\n        uint256 denominator = (reserveIn * 1000) + amountInWithFee;\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    function addLiquidityAndOneSideRemaining(AddLiquidityAndOneSideRemainingParams memory params)\\r\\n        internal\\r\\n        returns (\\r\\n            uint256 idealAmount0,\\r\\n            uint256 idealAmount1,\\r\\n            uint256 liquidity\\r\\n        )\\r\\n    {\\r\\n        (idealAmount0, idealAmount1, liquidity) = params.router.addLiquidity(\\r\\n            params.token0,\\r\\n            params.token1,\\r\\n            params.token0Amount,\\r\\n            params.token1Amount,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            type(uint256).max\\r\\n        );\\r\\n\\r\\n        params.token0Amount -= idealAmount0;\\r\\n        params.token1Amount -= idealAmount1;\\r\\n\\r\\n        address oneSideTokenIn;\\r\\n        uint256 oneSideTokenAmount;\\r\\n\\r\\n        if (idealAmount0 >= params.minOneSideableAmount0) {\\r\\n            oneSideTokenIn = params.token0;\\r\\n            oneSideTokenAmount = params.token0Amount;\\r\\n        } else if (idealAmount1 >= params.minOneSideableAmount1) {\\r\\n            oneSideTokenIn = params.token1;\\r\\n            oneSideTokenAmount = params.token1Amount;\\r\\n        }\\r\\n\\r\\n        if (oneSideTokenAmount > 0) {\\r\\n            AddLiquidityFromSingleTokenParams memory _addLiquidityFromSingleTokenParams = AddLiquidityFromSingleTokenParams(\\r\\n                params.router,\\r\\n                params.pair,\\r\\n                params.token0,\\r\\n                params.token1,\\r\\n                params.reserve0,\\r\\n                params.reserve1,\\r\\n                oneSideTokenIn,\\r\\n                oneSideTokenAmount,\\r\\n                params.recipient\\r\\n            );\\r\\n\\r\\n            (uint256 _idealAmount0, uint256 _idealAmount1, uint256 _liquidity) = addLiquidityFromSingleToken(\\r\\n                _addLiquidityFromSingleTokenParams\\r\\n            );\\r\\n\\r\\n            idealAmount0 += _idealAmount0;\\r\\n            idealAmount1 += _idealAmount1;\\r\\n            liquidity = _liquidity;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLiquidityFromSingleToken(AddLiquidityFromSingleTokenParams memory params)\\r\\n        internal\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        )\\r\\n    {\\r\\n        if (params.tokenIn == params.token0) {\\r\\n            uint256 tokenInSwapAmount = _calculateSwapInAmount(params.reserve0, params.tokenInAmount);\\r\\n            params.tokenInAmount -= tokenInSwapAmount;\\r\\n            uint256 sideTokenAmount = _getAmountOut(tokenInSwapAmount, params.reserve0, params.reserve1);\\r\\n            IERC20(params.tokenIn).transfer(address(params.pair), tokenInSwapAmount);\\r\\n            params.pair.swap(0, sideTokenAmount, address(this), \\\"\\\");\\r\\n            return\\r\\n                params.router.addLiquidity(\\r\\n                    params.token0,\\r\\n                    params.token1,\\r\\n                    sideTokenAmount,\\r\\n                    sideTokenAmount,\\r\\n                    0,\\r\\n                    0,\\r\\n                    params.recipient,\\r\\n                    type(uint256).max\\r\\n                );\\r\\n        } else {\\r\\n            uint256 tokenInSwapAmount = _calculateSwapInAmount(params.reserve1, params.tokenInAmount);\\r\\n            params.tokenInAmount -= tokenInSwapAmount;\\r\\n            uint256 sideTokenAmount = _getAmountOut(tokenInSwapAmount, params.reserve1, params.reserve0);\\r\\n            IERC20(params.tokenIn).transfer(address(params.pair), tokenInSwapAmount);\\r\\n            params.pair.swap(sideTokenAmount, 0, address(this), \\\"\\\");\\r\\n            return\\r\\n                params.router.addLiquidity(\\r\\n                    params.token0,\\r\\n                    params.token1,\\r\\n                    sideTokenAmount,\\r\\n                    sideTokenAmount,\\r\\n                    0,\\r\\n                    0,\\r\\n                    params.recipient,\\r\\n                    type(uint256).max\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x55fe2e1eb51fd61900b361501dcb041d480443710002b40beb2c941b49104abf\",\"license\":\"MIT\"},\"contracts/swappers/Leverage/0x/ZeroXUniswapLikeLPLevSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable avoid-low-level-calls\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\r\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\r\\n\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\\\";\\r\\n\\r\\nimport \\\"../../../interfaces/IBentoBoxV1Minimal.sol\\\";\\r\\nimport \\\"../../../interfaces/ILevSwapperV2.sol\\\";\\r\\nimport \\\"../../../libraries/UniswapV2OneSidedUsingUniV2.sol\\\";\\r\\n\\r\\n/// @notice Generic LP leverage swapper for Uniswap like compatible DEX using Matcha/0x aggregator\\r\\ncontract ZeroXUniswapLikeLPLevSwapper is ILevSwapperV2 {\\r\\n    using SafeTransferLib for ERC20;\\r\\n\\r\\n    error ErrToken0SwapFailed();\\r\\n    error ErrToken1SwapFailed();\\r\\n\\r\\n    IBentoBoxV1Minimal public immutable bentoBox;\\r\\n    IUniswapV2Pair public immutable pair;\\r\\n    IUniswapV2Router01 public immutable router;\\r\\n    ERC20 public immutable mim;\\r\\n    ERC20 public immutable token0;\\r\\n    ERC20 public immutable token1;\\r\\n\\r\\n    address public immutable zeroXExchangeProxy;\\r\\n\\r\\n    /// @dev The minimum amount of amount0 and amount1 amounts to trigger adding extra liquidity\\r\\n    // from it using one-sided\\r\\n    uint256 public immutable minOneSideableAmount0;\\r\\n    uint256 public immutable minOneSideableAmount1;\\r\\n\\r\\n    constructor(\\r\\n        IBentoBoxV1Minimal _bentoBox,\\r\\n        IUniswapV2Router01 _router,\\r\\n        IUniswapV2Pair _pair,\\r\\n        ERC20 _mim,\\r\\n        address _zeroXExchangeProxy,\\r\\n        uint256 _minOneSideableAmount0,\\r\\n        uint256 _minOneSideableAmount1\\r\\n    ) {\\r\\n        bentoBox = _bentoBox;\\r\\n        router = _router;\\r\\n        pair = _pair;\\r\\n        mim = _mim;\\r\\n        zeroXExchangeProxy = _zeroXExchangeProxy;\\r\\n        minOneSideableAmount0 = _minOneSideableAmount0;\\r\\n        minOneSideableAmount1 = _minOneSideableAmount1;\\r\\n\\r\\n        ERC20 _token0 = ERC20(_pair.token0());\\r\\n        ERC20 _token1 = ERC20(_pair.token1());\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n\\r\\n        _token0.safeApprove(address(_router), type(uint256).max);\\r\\n        _token1.safeApprove(address(_router), type(uint256).max);\\r\\n        _mim.approve(_zeroXExchangeProxy, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ILevSwapperV2\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom,\\r\\n        bytes calldata data\\r\\n    ) external override returns (uint256 extraShare, uint256 shareReturned) {\\r\\n        // 0: MIM -> token0\\r\\n        // 1: MIM -> token1\\r\\n        bytes[] memory swapData = abi.decode(data, (bytes[]));\\r\\n\\r\\n        bentoBox.withdraw(address(mim), address(this), address(this), 0, shareFrom);\\r\\n\\r\\n        // MIM -> token0\\r\\n        (bool success, ) = zeroXExchangeProxy.call(swapData[0]);\\r\\n        if (!success) {\\r\\n            revert ErrToken0SwapFailed();\\r\\n        }\\r\\n\\r\\n        // MIM -> token1\\r\\n        (success, ) = zeroXExchangeProxy.call(swapData[1]);\\r\\n        if (!success) {\\r\\n            revert ErrToken1SwapFailed();\\r\\n        }\\r\\n\\r\\n        uint256 liquidity;\\r\\n\\r\\n        {\\r\\n            uint256 token0Amount = token0.balanceOf(address(this));\\r\\n            uint256 token1Amount = token1.balanceOf(address(this));\\r\\n            (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\r\\n\\r\\n            UniswapV2OneSidedUsingUniV2.AddLiquidityAndOneSideRemainingParams memory params = UniswapV2OneSidedUsingUniV2\\r\\n                .AddLiquidityAndOneSideRemainingParams(\\r\\n                    router,\\r\\n                    pair,\\r\\n                    address(token0),\\r\\n                    address(token1),\\r\\n                    reserve0,\\r\\n                    reserve1,\\r\\n                    token0Amount,\\r\\n                    token1Amount,\\r\\n                    minOneSideableAmount0,\\r\\n                    minOneSideableAmount1,\\r\\n                    address(bentoBox)\\r\\n                );\\r\\n\\r\\n            (, , liquidity) = UniswapV2OneSidedUsingUniV2.addLiquidityAndOneSideRemaining(params);\\r\\n        }\\r\\n\\r\\n        (, shareReturned) = bentoBox.deposit(address(pair), address(bentoBox), recipient, liquidity, 0);\\r\\n        extraShare = shareReturned - shareToMin;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf893085090743d4c70e8d5cf6ff9d1f767e1202b1d944f3100bf096b347811a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b5060405162001a5338038062001a53833981016040819052620000359162000307565b6001600160a01b0380881660805286811660c05285811660a081905285821660e0529084166101405261016083905261018082905260408051630dfe168160e01b8152905160009291630dfe16819160048083019260209291908290030181865afa158015620000a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000cf91906200039a565b90506000866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013891906200039a565b6001600160a01b03838116610100819052908216610120529091506200016e90896000196200021c602090811b6200092017901c565b6200019588600019836001600160a01b03166200021c60201b62000920179092919060201c565b60405163095ea7b360e01b81526001600160a01b038681166004830152600019602483015287169063095ea7b3906044016020604051808303816000875af1158015620001e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020c9190620003c1565b50505050505050505050620003e5565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af191506200025a905081620002a2565b6200029c5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b50505050565b60003d82620002b557806000803e806000fd5b8060208114620002d0578015620002e25760009250620002e7565b816000803e60005115159250620002e7565b600192505b5050919050565b6001600160a01b03811681146200030457600080fd5b50565b600080600080600080600060e0888a0312156200032357600080fd5b87516200033081620002ee565b60208901519097506200034381620002ee565b60408901519096506200035681620002ee565b60608901519095506200036981620002ee565b60808901519094506200037c81620002ee565b8093505060a0880151915060c0880151905092959891949750929550565b600060208284031215620003ad57600080fd5b8151620003ba81620002ee565b9392505050565b600060208284031215620003d457600080fd5b81518015158114620003ba57600080fd5b60805160a05160c05160e0516101005161012051610140516101605161018051611587620004cc6000396000818161022c015261079301526000818160c8015261076d01526000818161016801528181610356015261040c015260008181610205015281816105720152610726015260008181610102015281816104e401526106f701526000818161018f015261029c01526000818161025301526106990152600081816101b6015281816105e4015281816106c8015261082e015260008181610141015281816102e2015281816107b9015281816107ff015261084f01526115876000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063a8aa1b3111610076578063d21220a71161005b578063d21220a714610200578063d24fc03f14610227578063f887ea401461024e57600080fd5b8063a8aa1b31146101b1578063b691d78c146101d857600080fd5b80636b2ace87116100a75780636b2ace871461013c5780639997c7f1146101635780639f67679e1461018a57600080fd5b806307991c3b146100c35780630dfe1681146100fd575b600080fd5b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100f4565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6101eb6101e6366004611178565b610275565b604080519283526020830191909152016100f4565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6000808061028584860186611261565b60405163097da6d360e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301819052604483015260006064830152608482018990529192507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a40160408051808303816000875af115801561032c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610350919061137a565b505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826000815181106103915761039161139e565b60200260200101516040516103a691906113b4565b6000604051808303816000865af19150503d80600081146103e3576040519150601f19603f3d011682016040523d82523d6000602084013e6103e8565b606091505b505090508061040a5760405163c4a632a560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001815181106104475761044761139e565b602002602001015160405161045c91906113b4565b6000604051808303816000865af19150503d8060008114610499576040519150601f19603f3d011682016040523d82523d6000602084013e61049e565b606091505b505080915050806104c2576040516326bfc13160e11b815260040160405180910390fd5b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f91906113ef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd91906113ef565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610640573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610664919061142b565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060006040518061016001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018481526020018381526020018681526020018581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681525090506107ef816109b1565b90915090508096505050505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008d8560006040518663ffffffff1660e01b81526004016108c19594939291906001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60408051808303816000875af11580156108df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610903919061137a565b945061091190508985611491565b94505050509550959350505050565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af191505061095b81610bb5565b6109ab5760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c4544000000000000000000000000000000000000604482015260640160405180910390fd5b50505050565b8051604080830151606084015160c085015160e0860151935162e8e33760e81b81526001600160a01b03938416600482015291831660248301526044820152606481019290925260006084830181905260a483018190523060c484015260001960e484015292839283929091169063e8e3370090610104016060604051808303816000875af1158015610a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6c91906114a8565b60c08701805193965091945092508491610a87908390611491565b90525060e084018051839190610a9e908390611491565b90525061010084015160009081908510610ac3575050604084015160c0850151610adc565b8561012001518410610adc575050606084015160e08501515b8015610bac57600060405180610120016040528088600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b0316815260200188606001516001600160a01b03168152602001886080015181526020018860a001518152602001846001600160a01b031681526020018381526020018861014001516001600160a01b031681525090506000806000610b8784610bfc565b91945092509050610b98838a6114d6565b9850610ba482896114d6565b975095505050505b50509193909250565b60003d82610bc757806000803e806000fd5b8060208114610bdf578015610bf05760009250610bf5565b816000803e60005115159250610bf5565b600192505b5050919050565b600080600083604001516001600160a01b03168460c001516001600160a01b03161415610e23576000610c3785608001518660e00151610f3c565b9050808560e001818151610c4b9190611491565b915081815250506000610c678287608001518860a00151610f9e565b60c0870151602088015160405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350169063a9059cbb906044016020604051808303816000875af1158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce691906114ee565b50602086015160405163022c0d9f60e01b8152600060048201819052602482018490523060448301526080606483015260848201526001600160a01b039091169063022c0d9f9060a4015b600060405180830381600087803b158015610d4b57600080fd5b505af1158015610d5f573d6000803e3d6000fd5b505087516040808a015160608b01516101008c0151925162e8e33760e81b81526001600160a01b0392831660048201529082166024820152604481018790526064810187905260006084820181905260a482015291811660c483015260001960e4830152909116925063e8e337009150610104016060604051808303816000875af1158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1691906114a8565b9450945094505050610f35565b6000610e378560a001518660e00151610f3c565b9050808560e001818151610e4b9190611491565b915081815250506000610e67828760a001518860800151610f9e565b60c0870151602088015160405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350169063a9059cbb906044016020604051808303816000875af1158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee691906114ee565b50602086015160405163022c0d9f60e01b8152600481018390526000602482018190523060448301526080606483015260848201526001600160a01b039091169063022c0d9f9060a401610d31565b9193909250565b60006107ca610f4d846107cd611510565b610f83610f5d86623cda29611510565b610f6a86623cda20611510565b610f7491906114d6565b610f7e9087611510565b610fed565b610f8d9190611491565b610f97919061152f565b9392505050565b600080610fad856103e5611510565b90506000610fbb8483611510565b9050600082610fcc876103e8611510565b610fd691906114d6565b9050610fe2818361152f565b979650505050505050565b600081610ffc57506000919050565b81600170010000000000000000000000000000000082106110225760809190911c9060401b5b68010000000000000000821061103d5760409190911c9060201b5b64010000000082106110545760209190911c9060101b5b6201000082106110695760109190911c9060081b5b610100821061107d5760089190911c9060041b5b601082106110905760049190911c9060021b5b6008821061109c5760011b5b60016110a8828661152f565b6110b290836114d6565b901c905060016110c2828661152f565b6110cc90836114d6565b901c905060016110dc828661152f565b6110e690836114d6565b901c905060016110f6828661152f565b61110090836114d6565b901c90506001611110828661152f565b61111a90836114d6565b901c9050600161112a828661152f565b61113490836114d6565b901c90506001611144828661152f565b61114e90836114d6565b901c9050600061115e828661152f565b905080821061116d578061116f565b815b95945050505050565b60008060008060006080868803121561119057600080fd5b85356001600160a01b03811681146111a757600080fd5b94506020860135935060408601359250606086013567ffffffffffffffff808211156111d257600080fd5b818801915088601f8301126111e657600080fd5b8135818111156111f557600080fd5b89602082850101111561120757600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112595761125961121a565b604052919050565b6000602080838503121561127457600080fd5b823567ffffffffffffffff8082111561128c57600080fd5b8185019150601f86818401126112a157600080fd5b8235828111156112b3576112b361121a565b8060051b6112c2868201611230565b918252848101860191868101908a8411156112dc57600080fd5b87870192505b8383101561136c578235868111156112fa5760008081fd5b8701603f81018c1361130c5760008081fd5b888101356040888211156113225761132261121a565b611333828901601f19168c01611230565b8281528e828486010111156113485760008081fd5b828285018d83013760009281018c01929092525083525091870191908701906112e2565b9a9950505050505050505050565b6000806040838503121561138d57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b6000825160005b818110156113d557602081860181015185830152016113bb565b818111156113e4576000828501525b509190910192915050565b60006020828403121561140157600080fd5b5051919050565b80516dffffffffffffffffffffffffffff8116811461142657600080fd5b919050565b60008060006060848603121561144057600080fd5b61144984611408565b925061145760208501611408565b9150604084015163ffffffff8116811461147057600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b6000828210156114a3576114a361147b565b500390565b6000806000606084860312156114bd57600080fd5b8351925060208401519150604084015190509250925092565b600082198211156114e9576114e961147b565b500190565b60006020828403121561150057600080fd5b81518015158114610f9757600080fd5b600081600019048311821515161561152a5761152a61147b565b500290565b60008261154c57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c756e25c1ac1429a25b4c3476f3df395145d3821b6feba066cb8a4c79fa44a3964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063a8aa1b3111610076578063d21220a71161005b578063d21220a714610200578063d24fc03f14610227578063f887ea401461024e57600080fd5b8063a8aa1b31146101b1578063b691d78c146101d857600080fd5b80636b2ace87116100a75780636b2ace871461013c5780639997c7f1146101635780639f67679e1461018a57600080fd5b806307991c3b146100c35780630dfe1681146100fd575b600080fd5b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100f4565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6101eb6101e6366004611178565b610275565b604080519283526020830191909152016100f4565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b6000808061028584860186611261565b60405163097da6d360e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301819052604483015260006064830152608482018990529192507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a40160408051808303816000875af115801561032c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610350919061137a565b505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826000815181106103915761039161139e565b60200260200101516040516103a691906113b4565b6000604051808303816000865af19150503d80600081146103e3576040519150601f19603f3d011682016040523d82523d6000602084013e6103e8565b606091505b505090508061040a5760405163c4a632a560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001815181106104475761044761139e565b602002602001015160405161045c91906113b4565b6000604051808303816000865af19150503d8060008114610499576040519150601f19603f3d011682016040523d82523d6000602084013e61049e565b606091505b505080915050806104c2576040516326bfc13160e11b815260040160405180910390fd5b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f91906113ef565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd91906113ef565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610640573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610664919061142b565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060006040518061016001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018481526020018381526020018681526020018581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681525090506107ef816109b1565b90915090508096505050505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008d8560006040518663ffffffff1660e01b81526004016108c19594939291906001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60408051808303816000875af11580156108df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610903919061137a565b945061091190508985611491565b94505050509550959350505050565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af191505061095b81610bb5565b6109ab5760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c4544000000000000000000000000000000000000604482015260640160405180910390fd5b50505050565b8051604080830151606084015160c085015160e0860151935162e8e33760e81b81526001600160a01b03938416600482015291831660248301526044820152606481019290925260006084830181905260a483018190523060c484015260001960e484015292839283929091169063e8e3370090610104016060604051808303816000875af1158015610a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6c91906114a8565b60c08701805193965091945092508491610a87908390611491565b90525060e084018051839190610a9e908390611491565b90525061010084015160009081908510610ac3575050604084015160c0850151610adc565b8561012001518410610adc575050606084015160e08501515b8015610bac57600060405180610120016040528088600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b0316815260200188606001516001600160a01b03168152602001886080015181526020018860a001518152602001846001600160a01b031681526020018381526020018861014001516001600160a01b031681525090506000806000610b8784610bfc565b91945092509050610b98838a6114d6565b9850610ba482896114d6565b975095505050505b50509193909250565b60003d82610bc757806000803e806000fd5b8060208114610bdf578015610bf05760009250610bf5565b816000803e60005115159250610bf5565b600192505b5050919050565b600080600083604001516001600160a01b03168460c001516001600160a01b03161415610e23576000610c3785608001518660e00151610f3c565b9050808560e001818151610c4b9190611491565b915081815250506000610c678287608001518860a00151610f9e565b60c0870151602088015160405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350169063a9059cbb906044016020604051808303816000875af1158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce691906114ee565b50602086015160405163022c0d9f60e01b8152600060048201819052602482018490523060448301526080606483015260848201526001600160a01b039091169063022c0d9f9060a4015b600060405180830381600087803b158015610d4b57600080fd5b505af1158015610d5f573d6000803e3d6000fd5b505087516040808a015160608b01516101008c0151925162e8e33760e81b81526001600160a01b0392831660048201529082166024820152604481018790526064810187905260006084820181905260a482015291811660c483015260001960e4830152909116925063e8e337009150610104016060604051808303816000875af1158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1691906114a8565b9450945094505050610f35565b6000610e378560a001518660e00151610f3c565b9050808560e001818151610e4b9190611491565b915081815250506000610e67828760a001518860800151610f9e565b60c0870151602088015160405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350169063a9059cbb906044016020604051808303816000875af1158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee691906114ee565b50602086015160405163022c0d9f60e01b8152600481018390526000602482018190523060448301526080606483015260848201526001600160a01b039091169063022c0d9f9060a401610d31565b9193909250565b60006107ca610f4d846107cd611510565b610f83610f5d86623cda29611510565b610f6a86623cda20611510565b610f7491906114d6565b610f7e9087611510565b610fed565b610f8d9190611491565b610f97919061152f565b9392505050565b600080610fad856103e5611510565b90506000610fbb8483611510565b9050600082610fcc876103e8611510565b610fd691906114d6565b9050610fe2818361152f565b979650505050505050565b600081610ffc57506000919050565b81600170010000000000000000000000000000000082106110225760809190911c9060401b5b68010000000000000000821061103d5760409190911c9060201b5b64010000000082106110545760209190911c9060101b5b6201000082106110695760109190911c9060081b5b610100821061107d5760089190911c9060041b5b601082106110905760049190911c9060021b5b6008821061109c5760011b5b60016110a8828661152f565b6110b290836114d6565b901c905060016110c2828661152f565b6110cc90836114d6565b901c905060016110dc828661152f565b6110e690836114d6565b901c905060016110f6828661152f565b61110090836114d6565b901c90506001611110828661152f565b61111a90836114d6565b901c9050600161112a828661152f565b61113490836114d6565b901c90506001611144828661152f565b61114e90836114d6565b901c9050600061115e828661152f565b905080821061116d578061116f565b815b95945050505050565b60008060008060006080868803121561119057600080fd5b85356001600160a01b03811681146111a757600080fd5b94506020860135935060408601359250606086013567ffffffffffffffff808211156111d257600080fd5b818801915088601f8301126111e657600080fd5b8135818111156111f557600080fd5b89602082850101111561120757600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156112595761125961121a565b604052919050565b6000602080838503121561127457600080fd5b823567ffffffffffffffff8082111561128c57600080fd5b8185019150601f86818401126112a157600080fd5b8235828111156112b3576112b361121a565b8060051b6112c2868201611230565b918252848101860191868101908a8411156112dc57600080fd5b87870192505b8383101561136c578235868111156112fa5760008081fd5b8701603f81018c1361130c5760008081fd5b888101356040888211156113225761132261121a565b611333828901601f19168c01611230565b8281528e828486010111156113485760008081fd5b828285018d83013760009281018c01929092525083525091870191908701906112e2565b9a9950505050505050505050565b6000806040838503121561138d57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b6000825160005b818110156113d557602081860181015185830152016113bb565b818111156113e4576000828501525b509190910192915050565b60006020828403121561140157600080fd5b5051919050565b80516dffffffffffffffffffffffffffff8116811461142657600080fd5b919050565b60008060006060848603121561144057600080fd5b61144984611408565b925061145760208501611408565b9150604084015163ffffffff8116811461147057600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b6000828210156114a3576114a361147b565b500390565b6000806000606084860312156114bd57600080fd5b8351925060208401519150604084015190509250925092565b600082198211156114e9576114e961147b565b500190565b60006020828403121561150057600080fd5b81518015158114610f9757600080fd5b600081600019048311821515161561152a5761152a61147b565b500290565b60008261154c57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c756e25c1ac1429a25b4c3476f3df395145d3821b6feba066cb8a4c79fa44a3964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "minOneSideableAmount0": {
        "details": "The minimum amount of amount0 and amount1 amounts to trigger adding extra liquidity"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Generic LP leverage swapper for Uniswap like compatible DEX using Matcha/0x aggregator",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}