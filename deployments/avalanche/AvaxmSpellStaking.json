{
  "address": "0xA3C8931Ec0fef9BF05386D154C4CD1e93AA92A12",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_mim",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_spell",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_REWARD_PER_SHARE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mim",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spell",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "toggleLockUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleLockup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardDebt",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "lastAdded",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbfff252982f96c35b83e371e7daa4fd72a62307f49fa5953471a160d15d77bb2",
  "receipt": {
    "to": null,
    "from": "0xb4EfdA6DAf5ef75D08869A0f9C0213278fb43b6C",
    "contractAddress": "0xA3C8931Ec0fef9BF05386D154C4CD1e93AA92A12",
    "transactionIndex": 19,
    "gasUsed": "1878015",
    "logsBloom": "0x
    "blockHash": "0x2a49ebcfec0c0dd084c41b79dde143ec371f4020228032d7817d2a3d0dffd67f",
    "transactionHash": "0xbfff252982f96c35b83e371e7daa4fd72a62307f49fa5953471a160d15d77bb2",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 12778206,
        "transactionHash": "0xbfff252982f96c35b83e371e7daa4fd72a62307f49fa5953471a160d15d77bb2",
        "address": "0xA3C8931Ec0fef9BF05386D154C4CD1e93AA92A12",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b4efda6daf5ef75d08869a0f9c0213278fb43b6c"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0x2a49ebcfec0c0dd084c41b79dde143ec371f4020228032d7817d2a3d0dffd67f"
      }
    ],
    "blockNumber": 12778206,
    "cumulativeGasUsed": "5153348",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x130966628846BFd36ff31a822705796e8cb8C18D",
    "0xCE1bFFBD5374Dac86a2893119683F4911a2F7814"
  ],
  "numDeployments": 2,
  "solcInputHash": "ff34bdb77f386f6a998d872fac49f834",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_mim\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_spell\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_REWARD_PER_SHARE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mim\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spell\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"toggleLockUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLockup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastAdded\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"0xMerlin\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"This contract needs to receive an ERC20 `_rewardToken` in order to distribute them (with MoneyMaker in our case)\",\"params\":{\"_mim\":\"The address of the MIM token\",\"_spell\":\"The address of the SPELL token\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"The amount of SPELL to deposit\"}},\"pendingReward(address)\":{\"params\":{\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"`_user`'s pending reward token\"}},\"toggleLockUp(bool)\":{\"params\":{\"status\":\"The new lockup status\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}},\"updateReward()\":{\"details\":\"Needs to be called before any deposit or withdrawal\"},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of SPELL to withdraw\"}}},\"stateVariables\":{\"userInfo\":{\"details\":\"Info of each user that stakes SPELL\"}},\"title\":\"Magic Spell Staking\",\"version\":1},\"userdoc\":{\"events\":{\"ClaimReward(address,uint256)\":{\"notice\":\"Emitted when a user claims reward\"},\"Deposit(address,uint256)\":{\"notice\":\"Emitted when a user deposits SPELL\"},\"EmergencyWithdraw(address,uint256)\":{\"notice\":\"Emitted when a user emergency withdraws its SPELL\"},\"Withdraw(address,uint256)\":{\"notice\":\"Emitted when a user withdraws SPELL\"}},\"kind\":\"user\",\"methods\":{\"ACC_REWARD_PER_SHARE_PRECISION()\":{\"notice\":\"The precision of `accRewardPerShare`\"},\"accRewardPerShare()\":{\"notice\":\"Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`\"},\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"constructor\":{\"notice\":\"Initialize a new mSpellStaking contract\"},\"deposit(uint256)\":{\"notice\":\"Deposit SPELL for reward token allocation\"},\"emergencyWithdraw()\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY\"},\"lastRewardBalance()\":{\"notice\":\"Last reward balance of `token`\"},\"mim()\":{\"notice\":\"Array of tokens that users can claim\"},\"pendingReward(address)\":{\"notice\":\"View function to see pending reward token on frontend\"},\"toggleLockUp(bool)\":{\"notice\":\"Allows to enable and disable the lockup\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"updateReward()\":{\"notice\":\"Update reward variables\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw SPELL and harvest the rewards\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mspell/mSpell.sol\":\"mSpellStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x058e0708ffdd2b04a17b96b5775d9fab8daa19d3cd37d26ce6c923679bf9cc9a\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50f187c86835070ec519acffcc259cd7900fdb85cb53333210fba9491eb65eca\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x2da850128806ffcf4a5910538f76e56d4f315b643af5ebeb6e4c8ca2a21c5408\",\"license\":\"MIT\"},\"contracts/mspell/mSpell.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Inspired by Stable Joe Staking which in turn is derived from the SushiSwap MasterChef contract\\n\\npragma solidity 0.8.10;\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport \\\"../libraries/BoringOwnable.sol\\\";\\n\\n/**\\n * @title Magic Spell Staking\\n * @author 0xMerlin\\n */\\ncontract mSpellStaking is BoringOwnable {\\n    using SafeTransferLib for ERC20;\\n\\n    /// @notice Info of each user\\n    struct UserInfo {\\n        uint128 amount;\\n\\n        uint128 rewardDebt;\\n        uint128 lastAdded;\\n        /**\\n         * @notice We do some fancy math here. Basically, any point in time, the amount of JOEs\\n         * entitled to a user but is pending to be distributed is:\\n         *\\n         *   pending reward = (user.amount * accRewardPerShare) - user.rewardDebt[token]\\n         *\\n         * Whenever a user deposits or withdraws SPELL. Here's what happens:\\n         *   1. accRewardPerShare (and `lastRewardBalance`) gets updated\\n         *   2. User receives the pending reward sent to his/her address\\n         *   3. User's `amount` gets updated\\n         *   4. User's `rewardDebt[token]` gets updated\\n         */\\n    }\\n\\n    ERC20 public immutable spell;\\n    /// @notice Array of tokens that users can claim\\n    ERC20 public immutable mim;\\n    /// @notice Last reward balance of `token`\\n    uint256 public lastRewardBalance;\\n\\n    /// @notice amount of time that the position is locked for.\\n    uint256 private constant LOCK_TIME = 24 hours;\\n    bool public toggleLockup;\\n\\n    /// @notice Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`\\n    uint256 public accRewardPerShare;\\n    /// @notice The precision of `accRewardPerShare`\\n    uint256 public constant ACC_REWARD_PER_SHARE_PRECISION = 1e24;\\n\\n    /// @dev Info of each user that stakes SPELL\\n    mapping(address => UserInfo) public userInfo;\\n\\n    /// @notice Emitted when a user deposits SPELL\\n    event Deposit(address indexed user, uint256 amount);\\n\\n    /// @notice Emitted when a user withdraws SPELL\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /// @notice Emitted when a user claims reward\\n    event ClaimReward(address indexed user, uint256 amount);\\n\\n    /// @notice Emitted when a user emergency withdraws its SPELL\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Initialize a new mSpellStaking contract\\n     * @dev This contract needs to receive an ERC20 `_rewardToken` in order to distribute them\\n     * (with MoneyMaker in our case)\\n     * @param _mim The address of the MIM token\\n     * @param _spell The address of the SPELL token\\n     */\\n    constructor(\\n        ERC20 _mim,\\n        ERC20 _spell\\n    ) {\\n        require(address(_mim) != address(0), \\\"mSpellStaking: reward token can't be address(0)\\\");\\n        require(address(_spell) != address(0), \\\"mSpellStaking: spell can't be address(0)\\\");\\n\\n        spell = _spell;\\n        toggleLockup = true;\\n\\n        mim = _mim;\\n    }\\n\\n    /**\\n     * @notice Deposit SPELL for reward token allocation\\n     * @param _amount The amount of SPELL to deposit\\n     */\\n    function deposit(uint256 _amount) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        uint256 _previousAmount = user.amount;\\n        uint256 _newAmount = user.amount + _amount;\\n        user.amount = uint128(_newAmount);\\n        user.lastAdded = uint128(block.timestamp);\\n\\n        updateReward();\\n\\n        uint256 _previousRewardDebt = user.rewardDebt;\\n        user.rewardDebt = uint128(_newAmount * accRewardPerShare / ACC_REWARD_PER_SHARE_PRECISION);\\n\\n        if (_previousAmount != 0) {\\n            uint256 _pending = _previousAmount * accRewardPerShare / ACC_REWARD_PER_SHARE_PRECISION - _previousRewardDebt;\\n            if (_pending != 0) {\\n                safeTokenTransfer(mim, msg.sender, _pending);\\n                emit ClaimReward(msg.sender, _pending);\\n            }\\n        }\\n\\n        spell.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice View function to see pending reward token on frontend\\n     * @param _user The address of the user\\n     * @return `_user`'s pending reward token\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 _totalSpell = spell.balanceOf(address(this));\\n        uint256 _accRewardTokenPerShare = accRewardPerShare;\\n\\n        uint256 _rewardBalance = mim.balanceOf(address(this));\\n\\n        if (_rewardBalance != lastRewardBalance && _totalSpell != 0) {\\n            uint256 _accruedReward = _rewardBalance - lastRewardBalance;\\n            _accRewardTokenPerShare = _accRewardTokenPerShare + _accruedReward * ACC_REWARD_PER_SHARE_PRECISION / _totalSpell;\\n        }\\n        return user.amount * _accRewardTokenPerShare / ACC_REWARD_PER_SHARE_PRECISION - user.rewardDebt;\\n    }\\n\\n    /**\\n     * @notice Withdraw SPELL and harvest the rewards\\n     * @param _amount The amount of SPELL to withdraw\\n     */\\n    function withdraw(uint256 _amount) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        require(!toggleLockup || user.lastAdded + LOCK_TIME < block.timestamp, \\\"mSpell: Wait for LockUp\\\");\\n\\n        uint256 _previousAmount = user.amount;\\n        uint256 _newAmount = user.amount - _amount;\\n        user.amount = uint128(_newAmount);\\n\\n        updateReward();\\n\\n        uint256 _pending = _previousAmount * accRewardPerShare / ACC_REWARD_PER_SHARE_PRECISION - user.rewardDebt;\\n        user.rewardDebt = uint128(_newAmount * accRewardPerShare / ACC_REWARD_PER_SHARE_PRECISION);\\n\\n        if (_pending != 0) {\\n            safeTokenTransfer(mim, msg.sender, _pending);\\n            emit ClaimReward(msg.sender, _pending);\\n        }\\n\\n        spell.safeTransfer(msg.sender, _amount);\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY\\n     */\\n    function emergencyWithdraw() external {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        require(!toggleLockup || user.lastAdded + LOCK_TIME < block.timestamp, \\\"mSpell: Wait for LockUp\\\");\\n\\n        uint256 _amount = user.amount;\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        spell.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Update reward variables\\n     * @dev Needs to be called before any deposit or withdrawal\\n     */\\n    function updateReward() public {\\n        uint256 _rewardBalance = mim.balanceOf(address(this));\\n        uint256 _totalSpell = spell.balanceOf(address(this));\\n\\n        // Did mSpellStaking receive any token\\n        if (_rewardBalance == lastRewardBalance || _totalSpell == 0) {\\n            return;\\n        }\\n\\n        uint256 _accruedReward = _rewardBalance - lastRewardBalance;\\n\\n        accRewardPerShare = accRewardPerShare + _accruedReward * ACC_REWARD_PER_SHARE_PRECISION / _totalSpell;\\n        lastRewardBalance = _rewardBalance;\\n    }\\n\\n    /**\\n     * @notice Safe token transfer function, just in case if rounding error\\n     * causes pool to not have enough reward tokens\\n     * @param _token The address of then token to transfer\\n     * @param _to The address that will receive `_amount` `rewardToken`\\n     * @param _amount The amount to send to `_to`\\n     */\\n    function safeTokenTransfer(\\n        ERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _rewardBalance = _token.balanceOf(address(this));\\n\\n        if (_amount > _rewardBalance) {\\n            lastRewardBalance = lastRewardBalance - _rewardBalance;\\n            _token.safeTransfer(_to, _rewardBalance);\\n        } else {\\n            lastRewardBalance = lastRewardBalance - _amount;\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows to enable and disable the lockup\\n     * @param status The new lockup status\\n     */\\n\\n     function toggleLockUp(bool status) external onlyOwner {\\n        toggleLockup = status;\\n     }\\n}\\n\",\"keccak256\":\"0xa74d438954260d73f9b9d6a3b7e5c00b3d030aea14df100b65d6a34cc8efb0b7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620024b3380380620024b38339818101604052810190620000379190620002c1565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000145576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200013c906200038f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620001b8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001af9062000427565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506001600360006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505062000449565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002758262000248565b9050919050565b6000620002898262000268565b9050919050565b6200029b816200027c565b8114620002a757600080fd5b50565b600081519050620002bb8162000290565b92915050565b60008060408385031215620002db57620002da62000243565b5b6000620002eb85828601620002aa565b9250506020620002fe85828601620002aa565b9150509250929050565b600082825260208201905092915050565b7f6d5370656c6c5374616b696e673a2072657761726420746f6b656e2063616e2760008201527f7420626520616464726573732830290000000000000000000000000000000000602082015250565b600062000377602f8362000308565b9150620003848262000319565b604082019050919050565b60006020820190508181036000830152620003aa8162000368565b9050919050565b7f6d5370656c6c5374616b696e673a207370656c6c2063616e277420626520616460008201527f6472657373283029000000000000000000000000000000000000000000000000602082015250565b60006200040f60288362000308565b91506200041c82620003b1565b604082019050919050565b60006020820190508181036000830152620004428162000400565b9050919050565b60805160a051612005620004ae600039600081816108d401528181610bca01528181610e0101528181611191015261142501526000818161095001528181610e80015281816110ad0152818161116b0152818161122f015261138001526120056000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063939d6237116100a2578063e30c397811610071578063e30c39781461025c578063ea762b791461027a578063f36c0a7214610298578063f40f0f52146102a2578063fa4caa74146102d25761010b565b8063939d6237146101fa5780639f67679e14610218578063b6b55f2514610236578063db2e21bc146102525761010b565b80633c97d5ae116100de5780633c97d5ae146101965780634e71e0c8146101b457806366309ce5146101be5780638da5cb5b146101dc5761010b565b8063078dfbe7146101105780630cd1c0841461012c5780631959a002146101485780632e1a7d4d1461017a575b600080fd5b61012a60048036038101906101259190611917565b6102f0565b005b6101466004803603810190610141919061196a565b610544565b005b610162600480360381019061015d9190611997565b6105ef565b604051610171939291906119ef565b60405180910390f35b610194600480360381019061018f9190611a5c565b61066d565b005b61019e6109e9565b6040516101ab9190611a98565b60405180910390f35b6101bc6109f7565b005b6101c6610b8b565b6040516101d39190611ac2565b60405180910390f35b6101e4610b9e565b6040516101f19190611aec565b60405180910390f35b610202610bc2565b60405161020f9190611a98565b60405180910390f35b610220610bc8565b60405161022d9190611b66565b60405180910390f35b610250600480360381019061024b9190611a5c565b610bec565b005b61025a610f1a565b005b610264611143565b6040516102719190611aec565b60405180910390f35b610282611169565b60405161028f9190611b66565b60405180910390f35b6102a061118d565b005b6102bc60048036038101906102b79190611997565b611338565b6040516102c99190611a98565b60405180910390f35b6102da6115b4565b6040516102e79190611a98565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037590611bde565b60405180910390fd5b81156104fd57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806103bd5750805b6103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390611c4a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061053f565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c990611bde565b60405180910390fd5b80600360006101000a81548160ff02191690831515021790555050565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16905083565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600360009054906101000a900460ff16158061070b575042620151808260010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166107099190611c99565b105b61074a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074190611d3b565b60405180910390fd5b60008160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506000838360000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166107c19190611d5b565b9050808360000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061080661118d565b60008360000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1669d3c21bcecceda1000000600454856108549190611d8f565b61085e9190611e18565b6108689190611d5b565b905069d3c21bcecceda1000000600454836108839190611d8f565b61088d9190611e18565b8460000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008114610949576108fa7f000000000000000000000000000000000000000000000000000000000000000033836115ba565b3373ffffffffffffffffffffffffffffffffffffffff167fba8de60c3403ec381d1d484652ea1980e3c3e56359195c92525bff4ce47ad98e826040516109409190611a98565b60405180910390a25b61099433867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166116ca9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364866040516109da9190611a98565b60405180910390a25050505050565b69d3c21bcecceda100000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8390611e95565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506000838360000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16610ca69190611c99565b9050808360000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550428360010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550610d2661118d565b60008360000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905069d3c21bcecceda100000060045483610d769190611d8f565b610d809190611e18565b8460000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008314610e785760008169d3c21bcecceda100000060045486610dde9190611d8f565b610de89190611e18565b610df29190611d5b565b905060008114610e7657610e277f000000000000000000000000000000000000000000000000000000000000000033836115ba565b3373ffffffffffffffffffffffffffffffffffffffff167fba8de60c3403ec381d1d484652ea1980e3c3e56359195c92525bff4ce47ad98e82604051610e6d9190611a98565b60405180910390a25b505b610ec53330877f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611770909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c86604051610f0b9190611a98565b60405180910390a25050505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600360009054906101000a900460ff161580610fb8575042620151808260010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16610fb69190611c99565b105b610ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fee90611d3b565b60405180910390fd5b60008160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060008260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506110f133827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166116ca9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695826040516111379190611a98565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111e89190611aec565b602060405180830381865afa158015611205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112299190611eca565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112869190611aec565b602060405180830381865afa1580156112a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c79190611eca565b90506002548214806112d95750600081145b156112e5575050611336565b6000600254836112f59190611d5b565b90508169d3c21bcecceda10000008261130e9190611d8f565b6113189190611e18565b6004546113259190611c99565b600481905550826002819055505050505b565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113d79190611aec565b602060405180830381865afa1580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114189190611eca565b90506000600454905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161147c9190611aec565b602060405180830381865afa158015611499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bd9190611eca565b905060025481141580156114d2575060008314155b15611519576000600254826114e79190611d5b565b90508369d3c21bcecceda1000000826115009190611d8f565b61150a9190611e18565b836115159190611c99565b9250505b8360000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1669d3c21bcecceda1000000838660000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166115959190611d8f565b61159f9190611e18565b6115a99190611d5b565b945050505050919050565b60025481565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115f59190611aec565b602060405180830381865afa158015611612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116369190611eca565b905080821115611684578060025461164e9190611d5b565b60028190555061167f83828673ffffffffffffffffffffffffffffffffffffffff166116ca9092919063ffffffff16565b6116c4565b816002546116929190611d5b565b6002819055506116c383838673ffffffffffffffffffffffffffffffffffffffff166116ca9092919063ffffffff16565b5b50505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af191505061172b81611833565b61176a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176190611f43565b60405180910390fd5b50505050565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260008060648360008a5af19150506117ed81611833565b61182c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182390611faf565b60405180910390fd5b5050505050565b60003d8261184557806000803e806000fd5b806020811461185f57600081146118705760009250611875565b816000803e60005115159250611875565b600192505b5050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118ac82611881565b9050919050565b6118bc816118a1565b81146118c757600080fd5b50565b6000813590506118d9816118b3565b92915050565b60008115159050919050565b6118f4816118df565b81146118ff57600080fd5b50565b600081359050611911816118eb565b92915050565b6000806000606084860312156119305761192f61187c565b5b600061193e868287016118ca565b935050602061194f86828701611902565b925050604061196086828701611902565b9150509250925092565b6000602082840312156119805761197f61187c565b5b600061198e84828501611902565b91505092915050565b6000602082840312156119ad576119ac61187c565b5b60006119bb848285016118ca565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6119e9816119c4565b82525050565b6000606082019050611a0460008301866119e0565b611a1160208301856119e0565b611a1e60408301846119e0565b949350505050565b6000819050919050565b611a3981611a26565b8114611a4457600080fd5b50565b600081359050611a5681611a30565b92915050565b600060208284031215611a7257611a7161187c565b5b6000611a8084828501611a47565b91505092915050565b611a9281611a26565b82525050565b6000602082019050611aad6000830184611a89565b92915050565b611abc816118df565b82525050565b6000602082019050611ad76000830184611ab3565b92915050565b611ae6816118a1565b82525050565b6000602082019050611b016000830184611add565b92915050565b6000819050919050565b6000611b2c611b27611b2284611881565b611b07565b611881565b9050919050565b6000611b3e82611b11565b9050919050565b6000611b5082611b33565b9050919050565b611b6081611b45565b82525050565b6000602082019050611b7b6000830184611b57565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611bc8602083611b81565b9150611bd382611b92565b602082019050919050565b60006020820190508181036000830152611bf781611bbb565b9050919050565b7f4f776e61626c653a207a65726f20616464726573730000000000000000000000600082015250565b6000611c34601583611b81565b9150611c3f82611bfe565b602082019050919050565b60006020820190508181036000830152611c6381611c27565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ca482611a26565b9150611caf83611a26565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ce457611ce3611c6a565b5b828201905092915050565b7f6d5370656c6c3a205761697420666f72204c6f636b5570000000000000000000600082015250565b6000611d25601783611b81565b9150611d3082611cef565b602082019050919050565b60006020820190508181036000830152611d5481611d18565b9050919050565b6000611d6682611a26565b9150611d7183611a26565b925082821015611d8457611d83611c6a565b5b828203905092915050565b6000611d9a82611a26565b9150611da583611a26565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611dde57611ddd611c6a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e2382611a26565b9150611e2e83611a26565b925082611e3e57611e3d611de9565b5b828204905092915050565b7f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572600082015250565b6000611e7f602083611b81565b9150611e8a82611e49565b602082019050919050565b60006020820190508181036000830152611eae81611e72565b9050919050565b600081519050611ec481611a30565b92915050565b600060208284031215611ee057611edf61187c565b5b6000611eee84828501611eb5565b91505092915050565b7f5452414e534645525f4641494c45440000000000000000000000000000000000600082015250565b6000611f2d600f83611b81565b9150611f3882611ef7565b602082019050919050565b60006020820190508181036000830152611f5c81611f20565b9050919050565b7f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000600082015250565b6000611f99601483611b81565b9150611fa482611f63565b602082019050919050565b60006020820190508181036000830152611fc881611f8c565b905091905056fea2646970667358221220321d93d125d8965c6ec5fda274471868ce4f21498e9c58df6c664cd22ce75e5564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063939d6237116100a2578063e30c397811610071578063e30c39781461025c578063ea762b791461027a578063f36c0a7214610298578063f40f0f52146102a2578063fa4caa74146102d25761010b565b8063939d6237146101fa5780639f67679e14610218578063b6b55f2514610236578063db2e21bc146102525761010b565b80633c97d5ae116100de5780633c97d5ae146101965780634e71e0c8146101b457806366309ce5146101be5780638da5cb5b146101dc5761010b565b8063078dfbe7146101105780630cd1c0841461012c5780631959a002146101485780632e1a7d4d1461017a575b600080fd5b61012a60048036038101906101259190611917565b6102f0565b005b6101466004803603810190610141919061196a565b610544565b005b610162600480360381019061015d9190611997565b6105ef565b604051610171939291906119ef565b60405180910390f35b610194600480360381019061018f9190611a5c565b61066d565b005b61019e6109e9565b6040516101ab9190611a98565b60405180910390f35b6101bc6109f7565b005b6101c6610b8b565b6040516101d39190611ac2565b60405180910390f35b6101e4610b9e565b6040516101f19190611aec565b60405180910390f35b610202610bc2565b60405161020f9190611a98565b60405180910390f35b610220610bc8565b60405161022d9190611b66565b60405180910390f35b610250600480360381019061024b9190611a5c565b610bec565b005b61025a610f1a565b005b610264611143565b6040516102719190611aec565b60405180910390f35b610282611169565b60405161028f9190611b66565b60405180910390f35b6102a061118d565b005b6102bc60048036038101906102b79190611997565b611338565b6040516102c99190611a98565b60405180910390f35b6102da6115b4565b6040516102e79190611a98565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037590611bde565b60405180910390fd5b81156104fd57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806103bd5750805b6103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390611c4a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061053f565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c990611bde565b60405180910390fd5b80600360006101000a81548160ff02191690831515021790555050565b60056020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16905083565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600360009054906101000a900460ff16158061070b575042620151808260010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166107099190611c99565b105b61074a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074190611d3b565b60405180910390fd5b60008160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506000838360000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166107c19190611d5b565b9050808360000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061080661118d565b60008360000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1669d3c21bcecceda1000000600454856108549190611d8f565b61085e9190611e18565b6108689190611d5b565b905069d3c21bcecceda1000000600454836108839190611d8f565b61088d9190611e18565b8460000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008114610949576108fa7f000000000000000000000000000000000000000000000000000000000000000033836115ba565b3373ffffffffffffffffffffffffffffffffffffffff167fba8de60c3403ec381d1d484652ea1980e3c3e56359195c92525bff4ce47ad98e826040516109409190611a98565b60405180910390a25b61099433867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166116ca9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364866040516109da9190611a98565b60405180910390a25050505050565b69d3c21bcecceda100000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8390611e95565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506000838360000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16610ca69190611c99565b9050808360000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550428360010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550610d2661118d565b60008360000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905069d3c21bcecceda100000060045483610d769190611d8f565b610d809190611e18565b8460000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008314610e785760008169d3c21bcecceda100000060045486610dde9190611d8f565b610de89190611e18565b610df29190611d5b565b905060008114610e7657610e277f000000000000000000000000000000000000000000000000000000000000000033836115ba565b3373ffffffffffffffffffffffffffffffffffffffff167fba8de60c3403ec381d1d484652ea1980e3c3e56359195c92525bff4ce47ad98e82604051610e6d9190611a98565b60405180910390a25b505b610ec53330877f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611770909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c86604051610f0b9190611a98565b60405180910390a25050505050565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600360009054906101000a900460ff161580610fb8575042620151808260010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16610fb69190611c99565b105b610ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fee90611d3b565b60405180910390fd5b60008160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060008260000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060008260000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506110f133827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166116ca9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695826040516111379190611a98565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111e89190611aec565b602060405180830381865afa158015611205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112299190611eca565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112869190611aec565b602060405180830381865afa1580156112a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c79190611eca565b90506002548214806112d95750600081145b156112e5575050611336565b6000600254836112f59190611d5b565b90508169d3c21bcecceda10000008261130e9190611d8f565b6113189190611e18565b6004546113259190611c99565b600481905550826002819055505050505b565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113d79190611aec565b602060405180830381865afa1580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114189190611eca565b90506000600454905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161147c9190611aec565b602060405180830381865afa158015611499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bd9190611eca565b905060025481141580156114d2575060008314155b15611519576000600254826114e79190611d5b565b90508369d3c21bcecceda1000000826115009190611d8f565b61150a9190611e18565b836115159190611c99565b9250505b8360000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1669d3c21bcecceda1000000838660000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166115959190611d8f565b61159f9190611e18565b6115a99190611d5b565b945050505050919050565b60025481565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115f59190611aec565b602060405180830381865afa158015611612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116369190611eca565b905080821115611684578060025461164e9190611d5b565b60028190555061167f83828673ffffffffffffffffffffffffffffffffffffffff166116ca9092919063ffffffff16565b6116c4565b816002546116929190611d5b565b6002819055506116c383838673ffffffffffffffffffffffffffffffffffffffff166116ca9092919063ffffffff16565b5b50505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af191505061172b81611833565b61176a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176190611f43565b60405180910390fd5b50505050565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff8416602482015282604482015260008060648360008a5af19150506117ed81611833565b61182c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182390611faf565b60405180910390fd5b5050505050565b60003d8261184557806000803e806000fd5b806020811461185f57600081146118705760009250611875565b816000803e60005115159250611875565b600192505b5050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118ac82611881565b9050919050565b6118bc816118a1565b81146118c757600080fd5b50565b6000813590506118d9816118b3565b92915050565b60008115159050919050565b6118f4816118df565b81146118ff57600080fd5b50565b600081359050611911816118eb565b92915050565b6000806000606084860312156119305761192f61187c565b5b600061193e868287016118ca565b935050602061194f86828701611902565b925050604061196086828701611902565b9150509250925092565b6000602082840312156119805761197f61187c565b5b600061198e84828501611902565b91505092915050565b6000602082840312156119ad576119ac61187c565b5b60006119bb848285016118ca565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6119e9816119c4565b82525050565b6000606082019050611a0460008301866119e0565b611a1160208301856119e0565b611a1e60408301846119e0565b949350505050565b6000819050919050565b611a3981611a26565b8114611a4457600080fd5b50565b600081359050611a5681611a30565b92915050565b600060208284031215611a7257611a7161187c565b5b6000611a8084828501611a47565b91505092915050565b611a9281611a26565b82525050565b6000602082019050611aad6000830184611a89565b92915050565b611abc816118df565b82525050565b6000602082019050611ad76000830184611ab3565b92915050565b611ae6816118a1565b82525050565b6000602082019050611b016000830184611add565b92915050565b6000819050919050565b6000611b2c611b27611b2284611881565b611b07565b611881565b9050919050565b6000611b3e82611b11565b9050919050565b6000611b5082611b33565b9050919050565b611b6081611b45565b82525050565b6000602082019050611b7b6000830184611b57565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611bc8602083611b81565b9150611bd382611b92565b602082019050919050565b60006020820190508181036000830152611bf781611bbb565b9050919050565b7f4f776e61626c653a207a65726f20616464726573730000000000000000000000600082015250565b6000611c34601583611b81565b9150611c3f82611bfe565b602082019050919050565b60006020820190508181036000830152611c6381611c27565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ca482611a26565b9150611caf83611a26565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ce457611ce3611c6a565b5b828201905092915050565b7f6d5370656c6c3a205761697420666f72204c6f636b5570000000000000000000600082015250565b6000611d25601783611b81565b9150611d3082611cef565b602082019050919050565b60006020820190508181036000830152611d5481611d18565b9050919050565b6000611d6682611a26565b9150611d7183611a26565b925082821015611d8457611d83611c6a565b5b828203905092915050565b6000611d9a82611a26565b9150611da583611a26565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611dde57611ddd611c6a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611e2382611a26565b9150611e2e83611a26565b925082611e3e57611e3d611de9565b5b828204905092915050565b7f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572600082015250565b6000611e7f602083611b81565b9150611e8a82611e49565b602082019050919050565b60006020820190508181036000830152611eae81611e72565b9050919050565b600081519050611ec481611a30565b92915050565b600060208284031215611ee057611edf61187c565b5b6000611eee84828501611eb5565b91505092915050565b7f5452414e534645525f4641494c45440000000000000000000000000000000000600082015250565b6000611f2d600f83611b81565b9150611f3882611ef7565b602082019050919050565b60006020820190508181036000830152611f5c81611f20565b9050919050565b7f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000600082015250565b6000611f99601483611b81565b9150611fa482611f63565b602082019050919050565b60006020820190508181036000830152611fc881611f8c565b905091905056fea2646970667358221220321d93d125d8965c6ec5fda274471868ce4f21498e9c58df6c664cd22ce75e5564736f6c634300080a0033",
  "devdoc": {
    "author": "0xMerlin",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "This contract needs to receive an ERC20 `_rewardToken` in order to distribute them (with MoneyMaker in our case)",
        "params": {
          "_mim": "The address of the MIM token",
          "_spell": "The address of the SPELL token"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "The amount of SPELL to deposit"
        }
      },
      "pendingReward(address)": {
        "params": {
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "`_user`'s pending reward token"
        }
      },
      "toggleLockUp(bool)": {
        "params": {
          "status": "The new lockup status"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      },
      "updateReward()": {
        "details": "Needs to be called before any deposit or withdrawal"
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of SPELL to withdraw"
        }
      }
    },
    "stateVariables": {
      "userInfo": {
        "details": "Info of each user that stakes SPELL"
      }
    },
    "title": "Magic Spell Staking",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClaimReward(address,uint256)": {
        "notice": "Emitted when a user claims reward"
      },
      "Deposit(address,uint256)": {
        "notice": "Emitted when a user deposits SPELL"
      },
      "EmergencyWithdraw(address,uint256)": {
        "notice": "Emitted when a user emergency withdraws its SPELL"
      },
      "Withdraw(address,uint256)": {
        "notice": "Emitted when a user withdraws SPELL"
      }
    },
    "kind": "user",
    "methods": {
      "ACC_REWARD_PER_SHARE_PRECISION()": {
        "notice": "The precision of `accRewardPerShare`"
      },
      "accRewardPerShare()": {
        "notice": "Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`"
      },
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "constructor": {
        "notice": "Initialize a new mSpellStaking contract"
      },
      "deposit(uint256)": {
        "notice": "Deposit SPELL for reward token allocation"
      },
      "emergencyWithdraw()": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY"
      },
      "lastRewardBalance()": {
        "notice": "Last reward balance of `token`"
      },
      "mim()": {
        "notice": "Array of tokens that users can claim"
      },
      "pendingReward(address)": {
        "notice": "View function to see pending reward token on frontend"
      },
      "toggleLockUp(bool)": {
        "notice": "Allows to enable and disable the lockup"
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      },
      "updateReward()": {
        "notice": "Update reward variables"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw SPELL and harvest the rewards"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 496,
        "contract": "contracts/mspell/mSpell.sol:mSpellStaking",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 498,
        "contract": "contracts/mspell/mSpell.sol:mSpellStaking",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 650,
        "contract": "contracts/mspell/mSpell.sol:mSpellStaking",
        "label": "lastRewardBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 656,
        "contract": "contracts/mspell/mSpell.sol:mSpellStaking",
        "label": "toggleLockup",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 659,
        "contract": "contracts/mspell/mSpell.sol:mSpellStaking",
        "label": "accRewardPerShare",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 669,
        "contract": "contracts/mspell/mSpell.sol:mSpellStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(UserInfo)640_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)640_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct mSpellStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)640_storage"
      },
      "t_struct(UserInfo)640_storage": {
        "encoding": "inplace",
        "label": "struct mSpellStaking.UserInfo",
        "members": [
          {
            "astId": 635,
            "contract": "contracts/mspell/mSpell.sol:mSpellStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 637,
            "contract": "contracts/mspell/mSpell.sol:mSpellStaking",
            "label": "rewardDebt",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 639,
            "contract": "contracts/mspell/mSpell.sol:mSpellStaking",
            "label": "lastAdded",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}