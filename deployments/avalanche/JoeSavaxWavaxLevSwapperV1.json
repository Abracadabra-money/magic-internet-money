{
  "address": "0x0d62F99AC1Fd8B9aA51762a207e9E92Fe353C4F7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxV1Minimal",
          "name": "_bentoBox",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_mim",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zeroXExchangeProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrToken0SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrToken1SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mim",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zeroXExchangeProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a9b91c1611b275c0eb67a6668db5c76e2dfec0515b8f911d758bc71f5d4eb95",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0x0d62F99AC1Fd8B9aA51762a207e9E92Fe353C4F7",
    "transactionIndex": 3,
    "gasUsed": "809905",
    "logsBloom": "0x
    "blockHash": "0xa597325bd5e134d113c228b1d94b20c40f0fbb9a46b1a07968b8de07f9473fa9",
    "transactionHash": "0x7a9b91c1611b275c0eb67a6668db5c76e2dfec0515b8f911d758bc71f5d4eb95",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 15506512,
        "transactionHash": "0x7a9b91c1611b275c0eb67a6668db5c76e2dfec0515b8f911d758bc71f5d4eb95",
        "address": "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000d62f99ac1fd8b9aa51762a207e9e92fe353c4f7",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0xa597325bd5e134d113c228b1d94b20c40f0fbb9a46b1a07968b8de07f9473fa9"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 15506512,
        "transactionHash": "0x7a9b91c1611b275c0eb67a6668db5c76e2dfec0515b8f911d758bc71f5d4eb95",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000d62f99ac1fd8b9aa51762a207e9e92fe353c4f7",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0xa597325bd5e134d113c228b1d94b20c40f0fbb9a46b1a07968b8de07f9473fa9"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 15506512,
        "transactionHash": "0x7a9b91c1611b275c0eb67a6668db5c76e2dfec0515b8f911d758bc71f5d4eb95",
        "address": "0x130966628846BFd36ff31a822705796e8cb8C18D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000000d62f99ac1fd8b9aa51762a207e9e92fe353c4f7",
          "0x000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0xa597325bd5e134d113c228b1d94b20c40f0fbb9a46b1a07968b8de07f9473fa9"
      }
    ],
    "blockNumber": 15506512,
    "cumulativeGasUsed": "1474733",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD825d06061fdc0585e4373F0A3F01a8C02b0e6A4",
    "0x60aE616a2155Ee3d9A68541Ba4544862310933d4",
    "0x4b946c91C2B1a7d7C40FB3C130CdfBaf8389094d",
    "0x130966628846BFd36ff31a822705796e8cb8C18D",
    "0xDef1C0ded9bec7F1a1670819833240f027b25EfF"
  ],
  "numDeployments": 1,
  "solcInputHash": "ebbf6ae0cc34b2bc86262ed4a86700b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1Minimal\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_mim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroXExchangeProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrToken0SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrToken1SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mim\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroXExchangeProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Generic LP leverage swapper for Uniswap like compatible DEX using Matcha/0x aggregator\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Leverage/0x/ZeroXUniswapLikeLPLevSwapper.sol\":\"ZeroXUniswapLikeLPLevSwapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":690},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc39d0f5693925ea1e8c517f7cc24211a9899c83a57e62d806180cdb056b6b75\",\"license\":\"AGPL-3.0-only\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x12091adc186fe351c639dc62aa0b691f78c7bea054c27bbb4b58acd02e1b2ce7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBentoBoxV1Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IBentoBoxV1Minimal {\\r\\n    function toAmount(\\r\\n        address _token,\\r\\n        uint256 _share,\\r\\n        bool _roundUp\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function withdraw(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deploy(\\r\\n        address masterContract,\\r\\n        bytes calldata data,\\r\\n        bool useCreate2\\r\\n    ) external payable returns (address cloneAddress);\\r\\n\\r\\n    function setMasterContractApproval(\\r\\n        address user,\\r\\n        address masterContract,\\r\\n        bool approved,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address, address) external view returns (uint256);\\r\\n\\r\\n    function totals(address) external view returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function flashLoan(\\r\\n        address borrower,\\r\\n        address receiver,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function toShare(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 share);\\r\\n}\",\"keccak256\":\"0x55a1fb58f49bbfd66add21b8796557d5c52bed842b778c3219ef503f51518c42\",\"license\":\"MIT\"},\"contracts/interfaces/ILevSwapperV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface ILevSwapperV2 {\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\r\\n}\\r\\n\",\"keccak256\":\"0x5c253e03dd1e8bdc6229c3f725ca9258b46c7dc55c04de29890bb2b7f41ac610\",\"license\":\"MIT\"},\"contracts/swappers/Leverage/0x/ZeroXUniswapLikeLPLevSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable avoid-low-level-calls\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\r\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\r\\n\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\\\";\\r\\n\\r\\nimport \\\"../../../interfaces/IBentoBoxV1Minimal.sol\\\";\\r\\nimport \\\"../../../interfaces/ILevSwapperV2.sol\\\";\\r\\n\\r\\n/// @notice Generic LP leverage swapper for Uniswap like compatible DEX using Matcha/0x aggregator\\r\\ncontract ZeroXUniswapLikeLPLevSwapper is ILevSwapperV2 {\\r\\n    using SafeTransferLib for ERC20;\\r\\n\\r\\n    error ErrToken0SwapFailed();\\r\\n    error ErrToken1SwapFailed();\\r\\n\\r\\n    IBentoBoxV1Minimal public immutable bentoBox;\\r\\n    IUniswapV2Pair public immutable pair;\\r\\n    IUniswapV2Router01 public immutable router;\\r\\n    ERC20 public immutable mim;\\r\\n    ERC20 public immutable token0;\\r\\n    ERC20 public immutable token1;\\r\\n\\r\\n    address public immutable zeroXExchangeProxy;\\r\\n\\r\\n    constructor(\\r\\n        IBentoBoxV1Minimal _bentoBox,\\r\\n        IUniswapV2Router01 _router,\\r\\n        IUniswapV2Pair _pair,\\r\\n        ERC20 _mim,\\r\\n        address _zeroXExchangeProxy\\r\\n    ) {\\r\\n        bentoBox = _bentoBox;\\r\\n        router = _router;\\r\\n        pair = _pair;\\r\\n        mim = _mim;\\r\\n        zeroXExchangeProxy = _zeroXExchangeProxy;\\r\\n\\r\\n        ERC20 _token0 = ERC20(_pair.token0());\\r\\n        ERC20 _token1 = ERC20(_pair.token1());\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n\\r\\n        _token0.safeApprove(address(_router), type(uint256).max);\\r\\n        _token1.safeApprove(address(_router), type(uint256).max);\\r\\n        _mim.approve(_zeroXExchangeProxy, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ILevSwapperV2\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom,\\r\\n        bytes calldata data\\r\\n    ) external override returns (uint256 extraShare, uint256 shareReturned) {\\r\\n        // 0: MIM -> token0\\r\\n        // 1: MIM -> token1\\r\\n        bytes[] memory swapData = abi.decode(data, (bytes[]));\\r\\n\\r\\n        bentoBox.withdraw(address(mim), address(this), address(this), 0, shareFrom);\\r\\n\\r\\n        // MIM -> token0\\r\\n        (bool success, ) = zeroXExchangeProxy.call(swapData[0]);\\r\\n        if (!success) {\\r\\n            revert ErrToken0SwapFailed();\\r\\n        }\\r\\n\\r\\n        // MIM -> token1\\r\\n        (success, ) = zeroXExchangeProxy.call(swapData[1]);\\r\\n        if (!success) {\\r\\n            revert ErrToken1SwapFailed();\\r\\n        }\\r\\n\\r\\n        router.addLiquidity(\\r\\n            address(token0),\\r\\n            address(token1),\\r\\n            token0.balanceOf(address(this)),\\r\\n            token1.balanceOf(address(this)),\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            type(uint256).max\\r\\n        );\\r\\n\\r\\n        (, shareReturned) = bentoBox.deposit(address(pair), address(this), recipient, pair.balanceOf(address(this)), 0);\\r\\n        extraShare = shareReturned - shareToMin;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x67b5e65420d21772e1ef9ffc55cf89fcbb0b33c0ec98bc2c3f3e235a82a13873\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200100b3803806200100b8339810160408190526200003591620002f9565b6001600160a01b0380861660805284811660c05283811660a081905283821660e0529082166101405260408051630dfe168160e01b8152905160009291630dfe16819160048083019260209291908290030181865afa1580156200009d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c3919062000379565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000106573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012c919062000379565b6001600160a01b03838116610100819052908216610120529091506200016290876000196200020e602090811b620007b817901c565b6200018986600019836001600160a01b03166200020e60201b620007b8179092919060201c565b60405163095ea7b360e01b81526001600160a01b038481166004830152600019602483015285169063095ea7b3906044016020604051808303816000875af1158015620001da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002009190620003a0565b5050505050505050620003c4565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af191506200024c90508162000294565b6200028e5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b50505050565b60003d82620002a757806000803e806000fd5b8060208114620002c2578015620002d45760009250620002d9565b816000803e60005115159250620002d9565b600192505b5050919050565b6001600160a01b0381168114620002f657600080fd5b50565b600080600080600060a086880312156200031257600080fd5b85516200031f81620002e0565b60208701519095506200033281620002e0565b60408701519094506200034581620002e0565b60608701519093506200035881620002e0565b60808701519092506200036b81620002e0565b809150509295509295909350565b6000602082840312156200038c57600080fd5b81516200039981620002e0565b9392505050565b600060208284031215620003b357600080fd5b815180151581146200039957600080fd5b60805160a05160c05160e051610100516101205161014051610ba9620004626000396000818160fd015281816102c4015261037a01526000818161019a01528181610499015261051b01526000818160920152610477015260008181610124015261020a0152600081816101c1015261044d01526000818161014b015261068c01526000818160d60152818161025001526106610152610ba96000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a8aa1b311161005b578063a8aa1b3114610146578063b691d78c1461016d578063d21220a714610195578063f887ea40146101bc57600080fd5b80630dfe16811461008d5780636b2ace87146100d15780639997c7f1146100f85780639f67679e1461011f575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b61018061017b366004610890565b6101e3565b604080519283526020830191909152016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b600080806101f384860186610979565b60405163097da6d360e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301819052604483015260006064830152608482018990529192507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a40160408051808303816000875af115801561029a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102be9190610a92565b505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826000815181106102ff576102ff610ab6565b60200260200101516040516103149190610acc565b6000604051808303816000865af19150503d8060008114610351576040519150601f19603f3d011682016040523d82523d6000602084013e610356565b606091505b50509050806103785760405163c4a632a560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001815181106103b5576103b5610ab6565b60200260200101516040516103ca9190610acc565b6000604051808303816000865af19150503d8060008114610407576040519150601f19603f3d011682016040523d82523d6000602084013e61040c565b606091505b50508091505080610430576040516326bfc13160e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163e8e33700917f0000000000000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000918316906370a0823190602401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190610b07565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610b07565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260006084820181905260a48201523060c482015260001960e4820152610104016060604051808303816000875af115801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190610b20565b50506040516370a0823160e01b815230600482018190526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693506302b9446c927f000000000000000000000000000000000000000000000000000000000000000092918e91908416906370a0823190602401602060405180830381865afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190610b07565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292841660248401529216604482015260648101919091526000608482015260a40160408051808303816000875af1158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190610a92565b93506107aa90508884610b4e565b935050509550959350505050565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af19150506107f381610849565b6108435760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c4544000000000000000000000000000000000000604482015260640160405180910390fd5b50505050565b60003d8261085b57806000803e806000fd5b80602081146108735780156108845760009250610889565b816000803e60005115159250610889565b600192505b5050919050565b6000806000806000608086880312156108a857600080fd5b85356001600160a01b03811681146108bf57600080fd5b94506020860135935060408601359250606086013567ffffffffffffffff808211156108ea57600080fd5b818801915088601f8301126108fe57600080fd5b81358181111561090d57600080fd5b89602082850101111561091f57600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561097157610971610932565b604052919050565b6000602080838503121561098c57600080fd5b823567ffffffffffffffff808211156109a457600080fd5b8185019150601f86818401126109b957600080fd5b8235828111156109cb576109cb610932565b8060051b6109da868201610948565b918252848101860191868101908a8411156109f457600080fd5b87870192505b83831015610a8457823586811115610a125760008081fd5b8701603f81018c13610a245760008081fd5b88810135604088821115610a3a57610a3a610932565b610a4b828901601f19168c01610948565b8281528e82848601011115610a605760008081fd5b828285018d83013760009281018c01929092525083525091870191908701906109fa565b9a9950505050505050505050565b60008060408385031215610aa557600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b6000825160005b81811015610aed5760208186018101518583015201610ad3565b81811115610afc576000828501525b509190910192915050565b600060208284031215610b1957600080fd5b5051919050565b600080600060608486031215610b3557600080fd5b8351925060208401519150604084015190509250925092565b600082821015610b6e57634e487b7160e01b600052601160045260246000fd5b50039056fea264697066735822122015e5a977b9fb5b83929092588f8d74e98e9c96188b4f607f32b571611253f04b64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a8aa1b311161005b578063a8aa1b3114610146578063b691d78c1461016d578063d21220a714610195578063f887ea40146101bc57600080fd5b80630dfe16811461008d5780636b2ace87146100d15780639997c7f1146100f85780639f67679e1461011f575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b61018061017b366004610890565b6101e3565b604080519283526020830191909152016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b600080806101f384860186610979565b60405163097da6d360e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301819052604483015260006064830152608482018990529192507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a40160408051808303816000875af115801561029a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102be9190610a92565b505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826000815181106102ff576102ff610ab6565b60200260200101516040516103149190610acc565b6000604051808303816000865af19150503d8060008114610351576040519150601f19603f3d011682016040523d82523d6000602084013e610356565b606091505b50509050806103785760405163c4a632a560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001815181106103b5576103b5610ab6565b60200260200101516040516103ca9190610acc565b6000604051808303816000865af19150503d8060008114610407576040519150601f19603f3d011682016040523d82523d6000602084013e61040c565b606091505b50508091505080610430576040516326bfc13160e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163e8e33700917f0000000000000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000918316906370a0823190602401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190610b07565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610b07565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260006084820181905260a48201523060c482015260001960e4820152610104016060604051808303816000875af115801561061c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106409190610b20565b50506040516370a0823160e01b815230600482018190526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693506302b9446c927f000000000000000000000000000000000000000000000000000000000000000092918e91908416906370a0823190602401602060405180830381865afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190610b07565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292841660248401529216604482015260648101919091526000608482015260a40160408051808303816000875af1158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190610a92565b93506107aa90508884610b4e565b935050509550959350505050565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af19150506107f381610849565b6108435760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c4544000000000000000000000000000000000000604482015260640160405180910390fd5b50505050565b60003d8261085b57806000803e806000fd5b80602081146108735780156108845760009250610889565b816000803e60005115159250610889565b600192505b5050919050565b6000806000806000608086880312156108a857600080fd5b85356001600160a01b03811681146108bf57600080fd5b94506020860135935060408601359250606086013567ffffffffffffffff808211156108ea57600080fd5b818801915088601f8301126108fe57600080fd5b81358181111561090d57600080fd5b89602082850101111561091f57600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561097157610971610932565b604052919050565b6000602080838503121561098c57600080fd5b823567ffffffffffffffff808211156109a457600080fd5b8185019150601f86818401126109b957600080fd5b8235828111156109cb576109cb610932565b8060051b6109da868201610948565b918252848101860191868101908a8411156109f457600080fd5b87870192505b83831015610a8457823586811115610a125760008081fd5b8701603f81018c13610a245760008081fd5b88810135604088821115610a3a57610a3a610932565b610a4b828901601f19168c01610948565b8281528e82848601011115610a605760008081fd5b828285018d83013760009281018c01929092525083525091870191908701906109fa565b9a9950505050505050505050565b60008060408385031215610aa557600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b6000825160005b81811015610aed5760208186018101518583015201610ad3565b81811115610afc576000828501525b509190910192915050565b600060208284031215610b1957600080fd5b5051919050565b600080600060608486031215610b3557600080fd5b8351925060208401519150604084015190509250925092565b600082821015610b6e57634e487b7160e01b600052601160045260246000fd5b50039056fea264697066735822122015e5a977b9fb5b83929092588f8d74e98e9c96188b4f607f32b571611253f04b64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Generic LP leverage swapper for Uniswap like compatible DEX using Matcha/0x aggregator",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}