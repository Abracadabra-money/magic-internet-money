{
  "address": "0xc845C5bAf57f61eB925D400AeBff0501C0e9d2Ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "_DEGENBOX",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DEGENBOX",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIMAVAX",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDCAVAX",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0229c21a417c6ada0f52ea269372384ce099d087c8a936b818b46e51e53d4096",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0xc845C5bAf57f61eB925D400AeBff0501C0e9d2Ba",
    "transactionIndex": 13,
    "gasUsed": "1419550",
    "logsBloom": "0x00000000000000000000000000000000000000000000000020000080000000000000000000000000004000000000000000000200000000000000000000210000000080000000000000000000800000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000004000020000000000000000000000000000000000000000000000000000000000000000000000000080000000000000010000000200000000000000000000804000420000000200000000000000000",
    "blockHash": "0x1839ce59b98b449072eda6ce8284f5e106bec6c3883fc48b037bdc5744d86241",
    "transactionHash": "0x0229c21a417c6ada0f52ea269372384ce099d087c8a936b818b46e51e53d4096",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 10790339,
        "transactionHash": "0x0229c21a417c6ada0f52ea269372384ce099d087c8a936b818b46e51e53d4096",
        "address": "0xA389f9430876455C36478DeEa9769B7Ca4E3DDB1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c845c5baf57f61eb925d400aebff0501c0e9d2ba",
          "0x000000000000000000000000d825d06061fdc0585e4373f0a3f01a8c02b0e6a4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 47,
        "blockHash": "0x1839ce59b98b449072eda6ce8284f5e106bec6c3883fc48b037bdc5744d86241"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 10790339,
        "transactionHash": "0x0229c21a417c6ada0f52ea269372384ce099d087c8a936b818b46e51e53d4096",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c845c5baf57f61eb925d400aebff0501c0e9d2ba",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 48,
        "blockHash": "0x1839ce59b98b449072eda6ce8284f5e106bec6c3883fc48b037bdc5744d86241"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 10790339,
        "transactionHash": "0x0229c21a417c6ada0f52ea269372384ce099d087c8a936b818b46e51e53d4096",
        "address": "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000c845c5baf57f61eb925d400aebff0501c0e9d2ba",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 49,
        "blockHash": "0x1839ce59b98b449072eda6ce8284f5e106bec6c3883fc48b037bdc5744d86241"
      }
    ],
    "blockNumber": 10790339,
    "cumulativeGasUsed": "3285537",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD825d06061fdc0585e4373F0A3F01a8C02b0e6A4"
  ],
  "numDeployments": 1,
  "solcInputHash": "cf81f0d3dbe2d2776872b136ac4fef2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"_DEGENBOX\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEGENBOX\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIMAVAX\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCAVAX\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Leverage/UsdcAvaxLevSwapper.sol\":\"UsdcAvaxLevSwapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x12091adc186fe351c639dc62aa0b691f78c7bea054c27bbb4b58acd02e1b2ce7\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @notice Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method).\\r\\nlibrary Babylonian {\\r\\n    // computes square roots using the babylonian method\\r\\n    // credit for this implementation goes to\\r\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\r\\n        // however that code costs significantly more gas\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) {\\r\\n            xx >>= 128;\\r\\n            r <<= 64;\\r\\n        }\\r\\n        if (xx >= 0x10000000000000000) {\\r\\n            xx >>= 64;\\r\\n            r <<= 32;\\r\\n        }\\r\\n        if (xx >= 0x100000000) {\\r\\n            xx >>= 32;\\r\\n            r <<= 16;\\r\\n        }\\r\\n        if (xx >= 0x10000) {\\r\\n            xx >>= 16;\\r\\n            r <<= 8;\\r\\n        }\\r\\n        if (xx >= 0x100) {\\r\\n            xx >>= 8;\\r\\n            r <<= 4;\\r\\n        }\\r\\n        if (xx >= 0x10) {\\r\\n            xx >>= 4;\\r\\n            r <<= 2;\\r\\n        }\\r\\n        if (xx >= 0x8) {\\r\\n            r <<= 1;\\r\\n        }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return (r < r1 ? r : r1);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfdbe64ff139295d3a3f80e8f10aa93c49b5f362d61423f0f5613c3f0a392e569\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swappers/Leverage/UsdcAvaxLevSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\\\";\\r\\nimport \\\"../../libraries/Babylonian.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IBentoBoxV1 {\\r\\n    function withdraw(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n}\\r\\n\\r\\ncontract UsdcAvaxLevSwapper {\\r\\n    IBentoBoxV1 public immutable DEGENBOX;\\r\\n    IUniswapV2Pair public constant USDCAVAX = IUniswapV2Pair(0xA389f9430876455C36478DeEa9769B7Ca4E3DDB1);\\r\\n    IUniswapV2Pair public constant MIMAVAX = IUniswapV2Pair(0x781655d802670bbA3c89aeBaaEa59D3182fD755D);\\r\\n    IUniswapV2Router01 public constant ROUTER = IUniswapV2Router01(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\\r\\n\\r\\n    uint256 private constant DEADLINE = 0xf000000000000000000000000000000000000000000000000000000000000000; // ~ placeholder for swap deadline\\r\\n\\r\\n    IERC20 public constant MIM = IERC20(0x130966628846BFd36ff31a822705796e8cb8C18D);\\r\\n    IERC20 public constant WAVAX = IERC20(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\r\\n    IERC20 public constant USDC = IERC20(0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664);\\r\\n\\r\\n    constructor(IBentoBoxV1 _DEGENBOX) {\\r\\n        DEGENBOX = _DEGENBOX;\\r\\n        USDCAVAX.approve(address(_DEGENBOX), type(uint256).max);\\r\\n        WAVAX.approve(address(ROUTER), type(uint256).max);\\r\\n        USDC.approve(address(ROUTER), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function _calculateSwapInAmount(uint256 reserveIn, uint256 userIn) internal pure returns (uint256) {\\r\\n        return (Babylonian.sqrt(reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))) - (reserveIn * 1997)) / 1994;\\r\\n    }\\r\\n\\r\\n    function _getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) internal pure returns (uint256 amountOut) {\\r\\n        uint256 amountInWithFee = amountIn * 997;\\r\\n        uint256 numerator = amountInWithFee * reserveOut;\\r\\n        uint256 denominator = (reserveIn * 1000) + amountInWithFee;\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // Swaps to a flexible amount, from an exact input amount\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom\\r\\n    ) public returns (uint256 extraShare, uint256 shareReturned) {\\r\\n        (uint256 amountFrom, ) = DEGENBOX.withdraw(MIM, address(this), address(this), 0, shareFrom);\\r\\n\\r\\n        // Swap MIM to AVAX\\r\\n        (uint256 reserve0, uint256 reserve1, ) = MIMAVAX.getReserves();\\r\\n        uint256 avaxFromMim = _getAmountOut(amountFrom, reserve0, reserve1);\\r\\n        MIM.transfer(address(MIMAVAX), amountFrom);\\r\\n        MIMAVAX.swap(0, avaxFromMim, address(this), new bytes(0));\\r\\n\\r\\n        // Determine optimal amount of AVAX to swap for liquidity providing\\r\\n        (reserve0, reserve1, ) = USDCAVAX.getReserves();\\r\\n        uint256 avaxSwapInAmount = _calculateSwapInAmount(reserve1, avaxFromMim);\\r\\n        uint256 usdcAmount = _getAmountOut(avaxSwapInAmount, reserve1, reserve0);\\r\\n        WAVAX.transfer(address(USDCAVAX), avaxSwapInAmount);\\r\\n        USDCAVAX.swap(usdcAmount, 0, address(this), \\\"\\\");\\r\\n\\r\\n        ROUTER.addLiquidity(\\r\\n            address(USDC),\\r\\n            address(WAVAX),\\r\\n            USDC.balanceOf(address(this)),\\r\\n            WAVAX.balanceOf(address(this)),\\r\\n            1,\\r\\n            1,\\r\\n            address(this),\\r\\n            DEADLINE\\r\\n        );\\r\\n\\r\\n        (, shareReturned) = DEGENBOX.deposit(IERC20(address(USDCAVAX)), address(this), recipient, USDCAVAX.balanceOf(address(this)), 0);\\r\\n        extraShare = shareReturned - shareToMin;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfbb6434a9bd72bbd8433b06d96cc95c2fbe95ffb8a7ab9d342b400dc84ed8d05\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001b7538038062001b7583398181016040528101906200003791906200034f565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505073a389f9430876455c36478deea9769b7ca4e3ddb173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620000df9291906200039d565b602060405180830381600087803b158015620000fa57600080fd5b505af11580156200010f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000135919062000323565b5073b31f66aa3c1e785363f0875a1b74e27b85fd66c773ffffffffffffffffffffffffffffffffffffffff1663095ea7b37360ae616a2155ee3d9a68541ba4544862310933d47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620001bb9291906200039d565b602060405180830381600087803b158015620001d657600080fd5b505af1158015620001eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000211919062000323565b5073a7d7079b0fead91f3e65f86e8915cb59c1a4c66473ffffffffffffffffffffffffffffffffffffffff1663095ea7b37360ae616a2155ee3d9a68541ba4544862310933d47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620002979291906200039d565b602060405180830381600087803b158015620002b257600080fd5b505af1158015620002c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ed919062000323565b50506200045c565b600081519050620003068162000428565b92915050565b6000815190506200031d8162000442565b92915050565b6000602082840312156200033657600080fd5b60006200034684828501620002f5565b91505092915050565b6000602082840312156200036257600080fd5b600062000372848285016200030c565b91505092915050565b6200038681620003ca565b82525050565b62000397816200041e565b82525050565b6000604082019050620003b460008301856200037b565b620003c360208301846200038c565b9392505050565b6000620003d782620003fe565b9050919050565b60008115159050919050565b6000620003f782620003ca565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200043381620003de565b81146200043f57600080fd5b50565b6200044d81620003ea565b81146200045957600080fd5b50565b60805160601c6116ec62000489600039600081816101df0152818161096a0152610b1f01526116ec6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063d01ecb2d1161005b578063d01ecb2d14610118578063daec383d14610136578063e0bc66b814610154578063f0f98f741461017257610088565b806332fe7b261461008d57806373b295c2146100ab57806389a30271146100c95780639f1d0f59146100e7575b600080fd5b610095610190565b6040516100a2919061126d565b60405180910390f35b6100b36101a8565b6040516100c09190611191565b60405180910390f35b6100d16101c0565b6040516100de9190611191565b60405180910390f35b61010160048036038101906100fc9190610e65565b6101d8565b60405161010f92919061131e565b60405180910390f35b610120610aed565b60405161012d9190611252565b60405180910390f35b61013e610b05565b60405161014b9190611191565b60405180910390f35b61015c610b1d565b6040516101699190611176565b60405180910390f35b61017a610b41565b6040516101879190611252565b60405180910390f35b7360ae616a2155ee3d9a68541ba4544862310933d481565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c781565b73a7d7079b0fead91f3e65f86e8915cb59c1a4c66481565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166397da6d3073130966628846bfd36ff31a822705796e8cb8c18d30306000896040518663ffffffff1660e01b81526004016102539594939291906111ac565b6040805180830381600087803b15801561026c57600080fd5b505af1158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a49190610f55565b50905060008073781655d802670bba3c89aebaaea59d3182fd755d73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561030457600080fd5b505afa158015610318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033c9190610edd565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600061036e848484610b59565b905073130966628846bfd36ff31a822705796e8cb8c18d73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73781655d802670bba3c89aebaaea59d3182fd755d866040518363ffffffff1660e01b81526004016103d392919061114d565b602060405180830381600087803b1580156103ed57600080fd5b505af1158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610eb4565b5073781655d802670bba3c89aebaaea59d3182fd755d73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f60008330600067ffffffffffffffff81111561049b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104cd5781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016104ed9493929190611288565b600060405180830381600087803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b5050505073a389f9430876455c36478deea9769b7ca4e3ddb173ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561057957600080fd5b505afa15801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190610edd565b826dffffffffffffffffffffffffffff169250816dffffffffffffffffffffffffffff16915050809350819450505060006105ec8383610bb1565b905060006105fb828587610b59565b905073b31f66aa3c1e785363f0875a1b74e27b85fd66c773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73a389f9430876455c36478deea9769b7ca4e3ddb1846040518363ffffffff1660e01b815260040161066092919061114d565b602060405180830381600087803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b29190610eb4565b5073a389f9430876455c36478deea9769b7ca4e3ddb173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f826000306040518463ffffffff1660e01b8152600401610705939291906112d4565b600060405180830381600087803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b505050507360ae616a2155ee3d9a68541ba4544862310933d473ffffffffffffffffffffffffffffffffffffffff1663e8e3370073a7d7079b0fead91f3e65f86e8915cb59c1a4c66473b31f66aa3c1e785363f0875a1b74e27b85fd66c773a7d7079b0fead91f3e65f86e8915cb59c1a4c66473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107de91906110b4565b60206040518083038186803b1580156107f657600080fd5b505afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190610f2c565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161087b91906110b4565b60206040518083038186803b15801561089357600080fd5b505afa1580156108a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cb9190610f2c565b600180307ff0000000000000000000000000000000000000000000000000000000000000006040518963ffffffff1660e01b81526004016109139897969594939291906110cf565b606060405180830381600087803b15801561092d57600080fd5b505af1158015610941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109659190610f91565b5050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302b9446c73a389f9430876455c36478deea9769b7ca4e3ddb1308e73a389f9430876455c36478deea9769b7ca4e3ddb173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a0891906110b4565b60206040518083038186803b158015610a2057600080fd5b505afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a589190610f2c565b60006040518663ffffffff1660e01b8152600401610a7a9594939291906111ff565b6040805180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acb9190610f55565b9050809750508987610add9190611444565b9750505050505050935093915050565b73a389f9430876455c36478deea9769b7ca4e3ddb181565b73130966628846bfd36ff31a822705796e8cb8c18d81565b7f000000000000000000000000000000000000000000000000000000000000000081565b73781655d802670bba3c89aebaaea59d3182fd755d81565b6000806103e585610b6a91906113ea565b905060008382610b7a91906113ea565b90506000826103e887610b8d91906113ea565b610b979190611363565b90508082610ba591906113b9565b93505050509392505050565b60006107ca6107cd84610bc491906113ea565b610bff623cda2986610bd691906113ea565b623cda2086610be591906113ea565b610bef9190611363565b86610bfa91906113ea565b610c1b565b610c099190611444565b610c1391906113b9565b905092915050565b600080821415610c2e5760009050610de2565b60008290506000600190507001000000000000000000000000000000008210610c6057608082901c9150604081901b90505b680100000000000000008210610c7f57604082901c9150602081901b90505b6401000000008210610c9a57602082901c9150601081901b90505b620100008210610cb357601082901c9150600881901b90505b6101008210610ccb57600882901c9150600481901b90505b60108210610ce257600482901c9150600281901b90505b60088210610cf257600181901b90505b60018185610d0091906113b9565b82610d0b9190611363565b901c905060018185610d1d91906113b9565b82610d289190611363565b901c905060018185610d3a91906113b9565b82610d459190611363565b901c905060018185610d5791906113b9565b82610d629190611363565b901c905060018185610d7491906113b9565b82610d7f9190611363565b901c905060018185610d9191906113b9565b82610d9c9190611363565b901c905060018185610dae91906113b9565b82610db99190611363565b901c905060008185610dcb91906113b9565b9050808210610dda5780610ddc565b815b93505050505b919050565b600081359050610df681611643565b92915050565b600081519050610e0b8161165a565b92915050565b600081519050610e2081611671565b92915050565b600081359050610e3581611688565b92915050565b600081519050610e4a81611688565b92915050565b600081519050610e5f8161169f565b92915050565b600080600060608486031215610e7a57600080fd5b6000610e8886828701610de7565b9350506020610e9986828701610e26565b9250506040610eaa86828701610e26565b9150509250925092565b600060208284031215610ec657600080fd5b6000610ed484828501610dfc565b91505092915050565b600080600060608486031215610ef257600080fd5b6000610f0086828701610e11565b9350506020610f1186828701610e11565b9250506040610f2286828701610e50565b9150509250925092565b600060208284031215610f3e57600080fd5b6000610f4c84828501610e3b565b91505092915050565b60008060408385031215610f6857600080fd5b6000610f7685828601610e3b565b9250506020610f8785828601610e3b565b9150509250929050565b600080600060608486031215610fa657600080fd5b6000610fb486828701610e3b565b9350506020610fc586828701610e3b565b9250506040610fd686828701610e3b565b9150509250925092565b610fe981611478565b82525050565b6000610ffa82611347565b6110048185611352565b935061101481856020860161159e565b61101d8161162f565b840191505092915050565b611031816114ea565b82525050565b6110408161150e565b82525050565b61104f81611532565b82525050565b61105e81611556565b82525050565b61106d8161157a565b82525050565b61107c8161158c565b82525050565b600061108f600083611352565b915061109a82611640565b600082019050919050565b6110ae816114d0565b82525050565b60006020820190506110c96000830184610fe0565b92915050565b6000610100820190506110e5600083018b610fe0565b6110f2602083018a610fe0565b6110ff60408301896110a5565b61110c60608301886110a5565b6111196080830187611073565b61112660a0830186611073565b61113360c0830185610fe0565b61114060e08301846110a5565b9998505050505050505050565b60006040820190506111626000830185610fe0565b61116f60208301846110a5565b9392505050565b600060208201905061118b6000830184611028565b92915050565b60006020820190506111a66000830184611037565b92915050565b600060a0820190506111c16000830188611037565b6111ce6020830187610fe0565b6111db6040830186610fe0565b6111e86060830185611064565b6111f560808301846110a5565b9695505050505050565b600060a0820190506112146000830188611037565b6112216020830187610fe0565b61122e6040830186610fe0565b61123b60608301856110a5565b6112486080830184611064565b9695505050505050565b60006020820190506112676000830184611046565b92915050565b60006020820190506112826000830184611055565b92915050565b600060808201905061129d6000830187611064565b6112aa60208301866110a5565b6112b76040830185610fe0565b81810360608301526112c98184610fef565b905095945050505050565b60006080820190506112e960008301866110a5565b6112f66020830185611064565b6113036040830184610fe0565b818103606083015261131481611082565b9050949350505050565b600060408201905061133360008301856110a5565b61134060208301846110a5565b9392505050565b600081519050919050565b600082825260208201905092915050565b600061136e826114d0565b9150611379836114d0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113ae576113ad6115d1565b5b828201905092915050565b60006113c4826114d0565b91506113cf836114d0565b9250826113df576113de611600565b5b828204905092915050565b60006113f5826114d0565b9150611400836114d0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611439576114386115d1565b5b828202905092915050565b600061144f826114d0565b915061145a836114d0565b92508282101561146d5761146c6115d1565b5b828203905092915050565b6000611483826114b0565b9050919050565b60008115159050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006114f5826114fc565b9050919050565b6000611507826114b0565b9050919050565b600061151982611520565b9050919050565b600061152b826114b0565b9050919050565b600061153d82611544565b9050919050565b600061154f826114b0565b9050919050565b600061156182611568565b9050919050565b6000611573826114b0565b9050919050565b6000611585826114d0565b9050919050565b6000611597826114d0565b9050919050565b60005b838110156115bc5780820151818401526020810190506115a1565b838111156115cb576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b50565b61164c81611478565b811461165757600080fd5b50565b6116638161148a565b811461166e57600080fd5b50565b61167a81611496565b811461168557600080fd5b50565b611691816114d0565b811461169c57600080fd5b50565b6116a8816114da565b81146116b357600080fd5b5056fea2646970667358221220a6952dbebaac5da80a48ef1e942f8d5331231473b562df0d7e31ad1093f5ca7a64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}