{
  "address": "0x8CEe5B335f450933b4720B5b84e6125d4225FB62",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AVAXUSDT",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEGENBOX",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIMAVAX",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x51f0db6028a018b260a157e6f55431456da7b4172af28eed9df25f65ecd99c1e",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0x8CEe5B335f450933b4720B5b84e6125d4225FB62",
    "transactionIndex": 13,
    "gasUsed": "1408825",
    "logsBloom": "0x
    "blockHash": "0xbd9f7c3a00a246f2454770b90c32e5f4520fa5e7f58d365a8c1cd33316d29f1b",
    "transactionHash": "0x51f0db6028a018b260a157e6f55431456da7b4172af28eed9df25f65ecd99c1e",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 6877733,
        "transactionHash": "0x51f0db6028a018b260a157e6f55431456da7b4172af28eed9df25f65ecd99c1e",
        "address": "0xeD8CBD9F0cE3C6986b22002F03c6475CEb7a6256",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008cee5b335f450933b4720b5b84e6125d4225fb62",
          "0x0000000000000000000000001fc83f75499b7620d53757f0b01e2ae626aae530"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 38,
        "blockHash": "0xbd9f7c3a00a246f2454770b90c32e5f4520fa5e7f58d365a8c1cd33316d29f1b"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 6877733,
        "transactionHash": "0x51f0db6028a018b260a157e6f55431456da7b4172af28eed9df25f65ecd99c1e",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008cee5b335f450933b4720b5b84e6125d4225fb62",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 39,
        "blockHash": "0xbd9f7c3a00a246f2454770b90c32e5f4520fa5e7f58d365a8c1cd33316d29f1b"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 6877733,
        "transactionHash": "0x51f0db6028a018b260a157e6f55431456da7b4172af28eed9df25f65ecd99c1e",
        "address": "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000008cee5b335f450933b4720b5b84e6125d4225fb62",
          "0x00000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d4"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 40,
        "blockHash": "0xbd9f7c3a00a246f2454770b90c32e5f4520fa5e7f58d365a8c1cd33316d29f1b"
      }
    ],
    "blockNumber": 6877733,
    "cumulativeGasUsed": "2686503",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "612c58fb4ac13012c7b63c725f478080",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AVAXUSDT\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEGENBOX\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIMAVAX\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Leverage/AvaxUsdtLevSwapper.sol\":\"AvaxUsdtLevSwapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x12091adc186fe351c639dc62aa0b691f78c7bea054c27bbb4b58acd02e1b2ce7\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @notice Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method).\\r\\nlibrary Babylonian {\\r\\n    // computes square roots using the babylonian method\\r\\n    // credit for this implementation goes to\\r\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\r\\n        // however that code costs significantly more gas\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) {\\r\\n            xx >>= 128;\\r\\n            r <<= 64;\\r\\n        }\\r\\n        if (xx >= 0x10000000000000000) {\\r\\n            xx >>= 64;\\r\\n            r <<= 32;\\r\\n        }\\r\\n        if (xx >= 0x100000000) {\\r\\n            xx >>= 32;\\r\\n            r <<= 16;\\r\\n        }\\r\\n        if (xx >= 0x10000) {\\r\\n            xx >>= 16;\\r\\n            r <<= 8;\\r\\n        }\\r\\n        if (xx >= 0x100) {\\r\\n            xx >>= 8;\\r\\n            r <<= 4;\\r\\n        }\\r\\n        if (xx >= 0x10) {\\r\\n            xx >>= 4;\\r\\n            r <<= 2;\\r\\n        }\\r\\n        if (xx >= 0x8) {\\r\\n            r <<= 1;\\r\\n        }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return (r < r1 ? r : r1);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb8d0fd1043dd1708eab9ef86d7e7bb3fb4605d24683a812900e2bd87c46170a1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swappers/Leverage/AvaxUsdtLevSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\\\";\\r\\nimport \\\"../../libraries/Babylonian.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IBentoBoxV1 {\\r\\n    function withdraw(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n}\\r\\n\\r\\ncontract AvaxUsdtLevSwapper {\\r\\n    IBentoBoxV1 public constant DEGENBOX = IBentoBoxV1(0x1fC83f75499b7620d53757f0b01E2ae626aAE530);\\r\\n    IUniswapV2Pair public constant AVAXUSDT = IUniswapV2Pair(0xeD8CBD9F0cE3C6986b22002F03c6475CEb7a6256);\\r\\n    IUniswapV2Pair public constant MIMAVAX = IUniswapV2Pair(0x781655d802670bbA3c89aeBaaEa59D3182fD755D);\\r\\n    IUniswapV2Router01 public constant ROUTER = IUniswapV2Router01(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\\r\\n\\r\\n    uint256 private constant DEADLINE = 0xf000000000000000000000000000000000000000000000000000000000000000; // ~ placeholder for swap deadline\\r\\n\\r\\n    IERC20 public constant MIM = IERC20(0x130966628846BFd36ff31a822705796e8cb8C18D);\\r\\n    IERC20 public constant WAVAX = IERC20(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\r\\n    IERC20 public constant USDT = IERC20(0xc7198437980c041c805A1EDcbA50c1Ce5db95118);\\r\\n\\r\\n    constructor() {\\r\\n        AVAXUSDT.approve(address(DEGENBOX), type(uint256).max);\\r\\n        WAVAX.approve(address(ROUTER), type(uint256).max);\\r\\n        USDT.approve(address(ROUTER), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function _calculateSwapInAmount(uint256 reserveIn, uint256 userIn) internal pure returns (uint256) {\\r\\n        return (Babylonian.sqrt(reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))) - (reserveIn * 1997)) / 1994;\\r\\n    }\\r\\n\\r\\n    function _getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) internal pure returns (uint256 amountOut) {\\r\\n        uint256 amountInWithFee = amountIn * 997;\\r\\n        uint256 numerator = amountInWithFee * reserveOut;\\r\\n        uint256 denominator = (reserveIn * 1000) + amountInWithFee;\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // Swaps to a flexible amount, from an exact input amount\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom\\r\\n    ) public returns (uint256 extraShare, uint256 shareReturned) {\\r\\n        (uint256 amountFrom, ) = DEGENBOX.withdraw(MIM, address(this), address(this), 0, shareFrom);\\r\\n\\r\\n        // Swap MIM to AVAX\\r\\n        (uint256 reserve0, uint256 reserve1, ) = MIMAVAX.getReserves();\\r\\n        uint256 avaxFromMim = _getAmountOut(amountFrom, reserve0, reserve1);\\r\\n        MIM.transfer(address(MIMAVAX), amountFrom);\\r\\n        MIMAVAX.swap(0, avaxFromMim, address(this), new bytes(0));\\r\\n\\r\\n        // Determine optimal amount of AVAX to swap for liquidity providing\\r\\n        (reserve0, reserve1, ) = AVAXUSDT.getReserves();\\r\\n        uint256 avaxSwapInAmount = _calculateSwapInAmount(reserve0, avaxFromMim);\\r\\n        uint256 usdtAmount = _getAmountOut(avaxSwapInAmount, reserve0, reserve1);\\r\\n        WAVAX.transfer(address(AVAXUSDT), avaxSwapInAmount);\\r\\n        AVAXUSDT.swap(0, usdtAmount, address(this), \\\"\\\");\\r\\n\\r\\n        ROUTER.addLiquidity(\\r\\n            address(WAVAX),\\r\\n            address(USDT),\\r\\n            WAVAX.balanceOf(address(this)),\\r\\n            USDT.balanceOf(address(this)),\\r\\n            1,\\r\\n            1,\\r\\n            address(this),\\r\\n            DEADLINE\\r\\n        );\\r\\n\\r\\n        (, shareReturned) = DEGENBOX.deposit(IERC20(address(AVAXUSDT)), address(this), recipient, AVAXUSDT.balanceOf(address(this)), 0);\\r\\n        extraShare = shareReturned - shareToMin;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x84e2918ffbb86eac314628f233d8eae437c085f123fa97b5b26f0b7437bfa11e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063c54e44eb1161005b578063c54e44eb14610118578063daec383d14610136578063e0bc66b814610154578063f0f98f741461017257610088565b8063077467941461008d57806332fe7b26146100ab57806373b295c2146100c95780639f1d0f59146100e7575b600080fd5b610095610190565b6040516100a2919061122e565b60405180910390f35b6100b36101a8565b6040516100c09190611249565b60405180910390f35b6100d16101c0565b6040516100de919061116d565b60405180910390f35b61010160048036038101906100fc9190610e41565b6101d8565b60405161010f9291906112fa565b60405180910390f35b610120610ad5565b60405161012d919061116d565b60405180910390f35b61013e610aed565b60405161014b919061116d565b60405180910390f35b61015c610b05565b6040516101699190611152565b60405180910390f35b61017a610b1d565b604051610187919061122e565b60405180910390f35b73ed8cbd9f0ce3c6986b22002f03c6475ceb7a625681565b7360ae616a2155ee3d9a68541ba4544862310933d481565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c781565b6000806000731fc83f75499b7620d53757f0b01e2ae626aae53073ffffffffffffffffffffffffffffffffffffffff166397da6d3073130966628846bfd36ff31a822705796e8cb8c18d30306000896040518663ffffffff1660e01b8152600401610247959493929190611188565b6040805180830381600087803b15801561026057600080fd5b505af1158015610274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102989190610f31565b50905060008073781655d802670bba3c89aebaaea59d3182fd755d73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156102f857600080fd5b505afa15801561030c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103309190610eb9565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000610362848484610b35565b905073130966628846bfd36ff31a822705796e8cb8c18d73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73781655d802670bba3c89aebaaea59d3182fd755d866040518363ffffffff1660e01b81526004016103c7929190611129565b602060405180830381600087803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190610e90565b5073781655d802670bba3c89aebaaea59d3182fd755d73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f60008330600067ffffffffffffffff81111561048f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104c15781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016104e19493929190611264565b600060405180830381600087803b1580156104fb57600080fd5b505af115801561050f573d6000803e3d6000fd5b5050505073ed8cbd9f0ce3c6986b22002f03c6475ceb7a625673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561056d57600080fd5b505afa158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190610eb9565b826dffffffffffffffffffffffffffff169250816dffffffffffffffffffffffffffff16915050809350819450505060006105e08483610b8d565b905060006105ef828686610b35565b905073b31f66aa3c1e785363f0875a1b74e27b85fd66c773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73ed8cbd9f0ce3c6986b22002f03c6475ceb7a6256846040518363ffffffff1660e01b8152600401610654929190611129565b602060405180830381600087803b15801561066e57600080fd5b505af1158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190610e90565b5073ed8cbd9f0ce3c6986b22002f03c6475ceb7a625673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f600083306040518463ffffffff1660e01b81526004016106f9939291906112b0565b600060405180830381600087803b15801561071357600080fd5b505af1158015610727573d6000803e3d6000fd5b505050507360ae616a2155ee3d9a68541ba4544862310933d473ffffffffffffffffffffffffffffffffffffffff1663e8e3370073b31f66aa3c1e785363f0875a1b74e27b85fd66c773c7198437980c041c805a1edcba50c1ce5db9511873b31f66aa3c1e785363f0875a1b74e27b85fd66c773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107d29190611090565b60206040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190610f08565b73c7198437980c041c805a1edcba50c1ce5db9511873ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161086f9190611090565b60206040518083038186803b15801561088757600080fd5b505afa15801561089b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bf9190610f08565b600180307ff0000000000000000000000000000000000000000000000000000000000000006040518963ffffffff1660e01b81526004016109079897969594939291906110ab565b606060405180830381600087803b15801561092157600080fd5b505af1158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190610f6d565b505050731fc83f75499b7620d53757f0b01e2ae626aae53073ffffffffffffffffffffffffffffffffffffffff166302b9446c73ed8cbd9f0ce3c6986b22002f03c6475ceb7a6256308e73ed8cbd9f0ce3c6986b22002f03c6475ceb7a625673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109f09190611090565b60206040518083038186803b158015610a0857600080fd5b505afa158015610a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a409190610f08565b60006040518663ffffffff1660e01b8152600401610a629594939291906111db565b6040805180830381600087803b158015610a7b57600080fd5b505af1158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190610f31565b9050809750508987610ac59190611420565b9750505050505050935093915050565b73c7198437980c041c805a1edcba50c1ce5db9511881565b73130966628846bfd36ff31a822705796e8cb8c18d81565b731fc83f75499b7620d53757f0b01e2ae626aae53081565b73781655d802670bba3c89aebaaea59d3182fd755d81565b6000806103e585610b4691906113c6565b905060008382610b5691906113c6565b90506000826103e887610b6991906113c6565b610b73919061133f565b90508082610b819190611395565b93505050509392505050565b60006107ca6107cd84610ba091906113c6565b610bdb623cda2986610bb291906113c6565b623cda2086610bc191906113c6565b610bcb919061133f565b86610bd691906113c6565b610bf7565b610be59190611420565b610bef9190611395565b905092915050565b600080821415610c0a5760009050610dbe565b60008290506000600190507001000000000000000000000000000000008210610c3c57608082901c9150604081901b90505b680100000000000000008210610c5b57604082901c9150602081901b90505b6401000000008210610c7657602082901c9150601081901b90505b620100008210610c8f57601082901c9150600881901b90505b6101008210610ca757600882901c9150600481901b90505b60108210610cbe57600482901c9150600281901b90505b60088210610cce57600181901b90505b60018185610cdc9190611395565b82610ce7919061133f565b901c905060018185610cf99190611395565b82610d04919061133f565b901c905060018185610d169190611395565b82610d21919061133f565b901c905060018185610d339190611395565b82610d3e919061133f565b901c905060018185610d509190611395565b82610d5b919061133f565b901c905060018185610d6d9190611395565b82610d78919061133f565b901c905060018185610d8a9190611395565b82610d95919061133f565b901c905060008185610da79190611395565b9050808210610db65780610db8565b815b93505050505b919050565b600081359050610dd28161161f565b92915050565b600081519050610de781611636565b92915050565b600081519050610dfc8161164d565b92915050565b600081359050610e1181611664565b92915050565b600081519050610e2681611664565b92915050565b600081519050610e3b8161167b565b92915050565b600080600060608486031215610e5657600080fd5b6000610e6486828701610dc3565b9350506020610e7586828701610e02565b9250506040610e8686828701610e02565b9150509250925092565b600060208284031215610ea257600080fd5b6000610eb084828501610dd8565b91505092915050565b600080600060608486031215610ece57600080fd5b6000610edc86828701610ded565b9350506020610eed86828701610ded565b9250506040610efe86828701610e2c565b9150509250925092565b600060208284031215610f1a57600080fd5b6000610f2884828501610e17565b91505092915050565b60008060408385031215610f4457600080fd5b6000610f5285828601610e17565b9250506020610f6385828601610e17565b9150509250929050565b600080600060608486031215610f8257600080fd5b6000610f9086828701610e17565b9350506020610fa186828701610e17565b9250506040610fb286828701610e17565b9150509250925092565b610fc581611454565b82525050565b6000610fd682611323565b610fe0818561132e565b9350610ff081856020860161157a565b610ff98161160b565b840191505092915050565b61100d816114c6565b82525050565b61101c816114ea565b82525050565b61102b8161150e565b82525050565b61103a81611532565b82525050565b61104981611556565b82525050565b61105881611568565b82525050565b600061106b60008361132e565b91506110768261161c565b600082019050919050565b61108a816114ac565b82525050565b60006020820190506110a56000830184610fbc565b92915050565b6000610100820190506110c1600083018b610fbc565b6110ce602083018a610fbc565b6110db6040830189611081565b6110e86060830188611081565b6110f5608083018761104f565b61110260a083018661104f565b61110f60c0830185610fbc565b61111c60e0830184611081565b9998505050505050505050565b600060408201905061113e6000830185610fbc565b61114b6020830184611081565b9392505050565b60006020820190506111676000830184611004565b92915050565b60006020820190506111826000830184611013565b92915050565b600060a08201905061119d6000830188611013565b6111aa6020830187610fbc565b6111b76040830186610fbc565b6111c46060830185611040565b6111d16080830184611081565b9695505050505050565b600060a0820190506111f06000830188611013565b6111fd6020830187610fbc565b61120a6040830186610fbc565b6112176060830185611081565b6112246080830184611040565b9695505050505050565b60006020820190506112436000830184611022565b92915050565b600060208201905061125e6000830184611031565b92915050565b60006080820190506112796000830187611040565b6112866020830186611081565b6112936040830185610fbc565b81810360608301526112a58184610fcb565b905095945050505050565b60006080820190506112c56000830186611040565b6112d26020830185611081565b6112df6040830184610fbc565b81810360608301526112f08161105e565b9050949350505050565b600060408201905061130f6000830185611081565b61131c6020830184611081565b9392505050565b600081519050919050565b600082825260208201905092915050565b600061134a826114ac565b9150611355836114ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561138a576113896115ad565b5b828201905092915050565b60006113a0826114ac565b91506113ab836114ac565b9250826113bb576113ba6115dc565b5b828204905092915050565b60006113d1826114ac565b91506113dc836114ac565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611415576114146115ad565b5b828202905092915050565b600061142b826114ac565b9150611436836114ac565b925082821015611449576114486115ad565b5b828203905092915050565b600061145f8261148c565b9050919050565b60008115159050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006114d1826114d8565b9050919050565b60006114e38261148c565b9050919050565b60006114f5826114fc565b9050919050565b60006115078261148c565b9050919050565b600061151982611520565b9050919050565b600061152b8261148c565b9050919050565b600061153d82611544565b9050919050565b600061154f8261148c565b9050919050565b6000611561826114ac565b9050919050565b6000611573826114ac565b9050919050565b60005b8381101561159857808201518184015260208101905061157d565b838111156115a7576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b50565b61162881611454565b811461163357600080fd5b50565b61163f81611466565b811461164a57600080fd5b50565b61165681611472565b811461166157600080fd5b50565b61166d816114ac565b811461167857600080fd5b50565b611684816114b6565b811461168f57600080fd5b5056fea2646970667358221220a69c43d9b8fbf50940596acda288d2f238981b494159f087262ac6f87b90b6c064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}