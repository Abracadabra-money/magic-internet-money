{
  "address": "0xFDF2C2689c130B0686331C9ADa0E40Ec1A1A58d7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DEGENBOX",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIMAVAX",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d9aa288f9765036827c671755ffd128c3b7cd5c3622b7c9f6fd01526a404cc3",
  "receipt": {
    "to": null,
    "from": "0xb4EfdA6DAf5ef75D08869A0f9C0213278fb43b6C",
    "contractAddress": "0xFDF2C2689c130B0686331C9ADa0E40Ec1A1A58d7",
    "transactionIndex": 15,
    "gasUsed": "1193106",
    "logsBloom": "0x
    "blockHash": "0x8963abb6803cf2919abe2956520e0aa20b194a89ec7d3d740667390de7b41790",
    "transactionHash": "0x1d9aa288f9765036827c671755ffd128c3b7cd5c3622b7c9f6fd01526a404cc3",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 9512710,
        "transactionHash": "0x1d9aa288f9765036827c671755ffd128c3b7cd5c3622b7c9f6fd01526a404cc3",
        "address": "0xcBb424fd93cDeC0EF330d8A8C985E8b147F62339",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000fdf2c2689c130b0686331c9ada0e40ec1a1a58d7",
          "0x0000000000000000000000001fc83f75499b7620d53757f0b01e2ae626aae530"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 44,
        "blockHash": "0x8963abb6803cf2919abe2956520e0aa20b194a89ec7d3d740667390de7b41790"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 9512710,
        "transactionHash": "0x1d9aa288f9765036827c671755ffd128c3b7cd5c3622b7c9f6fd01526a404cc3",
        "address": "0x130966628846BFd36ff31a822705796e8cb8C18D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000fdf2c2689c130b0686331c9ada0e40ec1a1a58d7",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 45,
        "blockHash": "0x8963abb6803cf2919abe2956520e0aa20b194a89ec7d3d740667390de7b41790"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 9512710,
        "transactionHash": "0x1d9aa288f9765036827c671755ffd128c3b7cd5c3622b7c9f6fd01526a404cc3",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000fdf2c2689c130b0686331c9ada0e40ec1a1a58d7",
          "0x0000000000000000000000001b02da8cb0d097eb8d57a175b88c7d8b47997506"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 46,
        "blockHash": "0x8963abb6803cf2919abe2956520e0aa20b194a89ec7d3d740667390de7b41790"
      }
    ],
    "blockNumber": 9512710,
    "cumulativeGasUsed": "3176456",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "807c6c4c9fc90b0c2e0ffb80dcd59dc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEGENBOX\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIMAVAX\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Leverage/MimAvaxLevSwapper.sol\":\"MimAvaxLevSwapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0x12091adc186fe351c639dc62aa0b691f78c7bea054c27bbb4b58acd02e1b2ce7\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.4;\\n\\n/// @notice Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method).\\nlibrary Babylonian {\\n    // computes square roots using the babylonian method\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\",\"keccak256\":\"0xa98dc6da967dcb959148d13d5cac4d3c6938562be7a27cdd52f394a2495a9c97\",\"license\":\"GPL-3.0-or-later\"},\"contracts/swappers/Leverage/MimAvaxLevSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Router01.sol\\\";\\nimport \\\"../../libraries/Babylonian.sol\\\";\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface IBentoBoxV1 {\\n    function withdraw(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256, uint256);\\n\\n    function deposit(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256, uint256);\\n}\\n\\ncontract MimAvaxLevSwapper {\\n    IBentoBoxV1 public constant DEGENBOX = IBentoBoxV1(0x1fC83f75499b7620d53757f0b01E2ae626aAE530);\\n    IUniswapV2Pair public constant MIMAVAX = IUniswapV2Pair(0xcBb424fd93cDeC0EF330d8A8C985E8b147F62339);\\n    IUniswapV2Router01 public constant ROUTER = IUniswapV2Router01(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506);\\n\\n    uint256 private constant DEADLINE = 0xf000000000000000000000000000000000000000000000000000000000000000; // ~ placeholder for swap deadline\\n\\n    IERC20 public constant MIM = IERC20(0x130966628846BFd36ff31a822705796e8cb8C18D);\\n    IERC20 public constant WAVAX = IERC20(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    constructor() {\\n        MIMAVAX.approve(address(DEGENBOX), type(uint256).max);\\n        MIM.approve(address(ROUTER), type(uint256).max);\\n        WAVAX.approve(address(ROUTER), type(uint256).max);\\n    }\\n\\n    function _calculateSwapInAmount(uint256 reserveIn, uint256 userIn) internal pure returns (uint256) {\\n        return (Babylonian.sqrt(reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))) - (reserveIn * 1997)) / 1994;\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = (reserveIn * 1000) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // Swaps to a flexible amount, from an exact input amount\\n    function swap(\\n        address recipient,\\n        uint256 shareToMin,\\n        uint256 shareFrom\\n    ) public returns (uint256 extraShare, uint256 shareReturned) {\\n        (uint256 amountFrom, ) = DEGENBOX.withdraw(MIM, address(this), address(this), 0, shareFrom);\\n\\n        // Determine optimal amount of AVAX to swap for liquidity providing\\n        (uint256 reserve0, uint256 reserve1, ) = MIMAVAX.getReserves();\\n        uint256 mimSwapInAmount = _calculateSwapInAmount(reserve0, amountFrom);\\n        uint256 avaxAmount = _getAmountOut(mimSwapInAmount, reserve0, reserve1);\\n        MIM.transfer(address(MIMAVAX), mimSwapInAmount);\\n        MIMAVAX.swap(0, avaxAmount, address(this), \\\"\\\");\\n\\n        ROUTER.addLiquidity(\\n            address(MIM),\\n            address(WAVAX),\\n            MIM.balanceOf(address(this)),\\n            WAVAX.balanceOf(address(this)),\\n            1,\\n            1,\\n            address(this),\\n            DEADLINE\\n        );\\n\\n        (, shareReturned) = DEGENBOX.deposit(IERC20(address(MIMAVAX)), address(this), recipient, MIMAVAX.balanceOf(address(this)), 0);\\n        extraShare = shareReturned - shareToMin;\\n    }\\n}\\n\",\"keccak256\":\"0x7426cdb0b88636c38313f706a76b9639ba1d87d03584d05621b69d752adc3ec5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5073cbb424fd93cdec0ef330d8a8c985e8b147f6233973ffffffffffffffffffffffffffffffffffffffff1663095ea7b3731fc83f75499b7620d53757f0b01e2ae626aae5307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200009792919062000311565b602060405180830381600087803b158015620000b257600080fd5b505af1158015620000c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ed9190620002c3565b5073130966628846bfd36ff31a822705796e8cb8c18d73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3731b02da8cb0d097eb8d57a175b88c7d8b479975067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200017392919062000311565b602060405180830381600087803b1580156200018e57600080fd5b505af1158015620001a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c99190620002c3565b5073b31f66aa3c1e785363f0875a1b74e27b85fd66c773ffffffffffffffffffffffffffffffffffffffff1663095ea7b3731b02da8cb0d097eb8d57a175b88c7d8b479975067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200024f92919062000311565b602060405180830381600087803b1580156200026a57600080fd5b505af11580156200027f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a59190620002c3565b50620003a2565b600081519050620002bd8162000388565b92915050565b600060208284031215620002d657600080fd5b6000620002e684828501620002ac565b91505092915050565b620002fa816200033e565b82525050565b6200030b816200037e565b82525050565b6000604082019050620003286000830185620002ef565b62000337602083018462000300565b9392505050565b60006200034b826200035e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620003938162000352565b81146200039f57600080fd5b50565b6112e280620003b26000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806332fe7b261461006757806373b295c2146100855780639f1d0f59146100a3578063daec383d146100d4578063e0bc66b8146100f2578063f0f98f7414610110575b600080fd5b61006f61012e565b60405161007c9190610efe565b60405180910390f35b61008d610146565b60405161009a9190610e22565b60405180910390f35b6100bd60048036038101906100b89190610b2f565b61015e565b6040516100cb929190610f63565b60405180910390f35b6100dc6107db565b6040516100e99190610e22565b60405180910390f35b6100fa6107f3565b6040516101079190610e07565b60405180910390f35b61011861080b565b6040516101259190610ee3565b60405180910390f35b731b02da8cb0d097eb8d57a175b88c7d8b4799750681565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c781565b6000806000731fc83f75499b7620d53757f0b01e2ae626aae53073ffffffffffffffffffffffffffffffffffffffff166397da6d3073130966628846bfd36ff31a822705796e8cb8c18d30306000896040518663ffffffff1660e01b81526004016101cd959493929190610e3d565b6040805180830381600087803b1580156101e657600080fd5b505af11580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190610c1f565b50905060008073cbb424fd93cdec0ef330d8a8c985e8b147f6233973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561027e57600080fd5b505afa158015610292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b69190610ba7565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060006102e78385610823565b905060006102f682858561088d565b905073130966628846bfd36ff31a822705796e8cb8c18d73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb73cbb424fd93cdec0ef330d8a8c985e8b147f62339846040518363ffffffff1660e01b815260040161035b929190610dde565b602060405180830381600087803b15801561037557600080fd5b505af1158015610389573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ad9190610b7e565b5073cbb424fd93cdec0ef330d8a8c985e8b147f6233973ffffffffffffffffffffffffffffffffffffffff1663022c0d9f600083306040518463ffffffff1660e01b815260040161040093929190610f19565b600060405180830381600087803b15801561041a57600080fd5b505af115801561042e573d6000803e3d6000fd5b50505050731b02da8cb0d097eb8d57a175b88c7d8b4799750673ffffffffffffffffffffffffffffffffffffffff1663e8e3370073130966628846bfd36ff31a822705796e8cb8c18d73b31f66aa3c1e785363f0875a1b74e27b85fd66c773130966628846bfd36ff31a822705796e8cb8c18d73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104d99190610d45565b60206040518083038186803b1580156104f157600080fd5b505afa158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190610bf6565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105769190610d45565b60206040518083038186803b15801561058e57600080fd5b505afa1580156105a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c69190610bf6565b600180307ff0000000000000000000000000000000000000000000000000000000000000006040518963ffffffff1660e01b815260040161060e989796959493929190610d60565b606060405180830381600087803b15801561062857600080fd5b505af115801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106609190610c5b565b505050731fc83f75499b7620d53757f0b01e2ae626aae53073ffffffffffffffffffffffffffffffffffffffff166302b9446c73cbb424fd93cdec0ef330d8a8c985e8b147f62339308d73cbb424fd93cdec0ef330d8a8c985e8b147f6233973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106f79190610d45565b60206040518083038186803b15801561070f57600080fd5b505afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107479190610bf6565b60006040518663ffffffff1660e01b8152600401610769959493929190610e90565b6040805180830381600087803b15801561078257600080fd5b505af1158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba9190610c1f565b90508096505088866107cc919061107e565b96505050505050935093915050565b73130966628846bfd36ff31a822705796e8cb8c18d81565b731fc83f75499b7620d53757f0b01e2ae626aae53081565b73cbb424fd93cdec0ef330d8a8c985e8b147f6233981565b60006107ca6107cd846108369190611024565b610871623cda29866108489190611024565b623cda20866108579190611024565b6108619190610f9d565b8661086c9190611024565b6108e5565b61087b919061107e565b6108859190610ff3565b905092915050565b6000806103e58561089e9190611024565b9050600083826108ae9190611024565b90506000826103e8876108c19190611024565b6108cb9190610f9d565b905080826108d99190610ff3565b93505050509392505050565b6000808214156108f85760009050610aac565b6000829050600060019050700100000000000000000000000000000000821061092a57608082901c9150604081901b90505b68010000000000000000821061094957604082901c9150602081901b90505b640100000000821061096457602082901c9150601081901b90505b62010000821061097d57601082901c9150600881901b90505b610100821061099557600882901c9150600481901b90505b601082106109ac57600482901c9150600281901b90505b600882106109bc57600181901b90505b600181856109ca9190610ff3565b826109d59190610f9d565b901c9050600181856109e79190610ff3565b826109f29190610f9d565b901c905060018185610a049190610ff3565b82610a0f9190610f9d565b901c905060018185610a219190610ff3565b82610a2c9190610f9d565b901c905060018185610a3e9190610ff3565b82610a499190610f9d565b901c905060018185610a5b9190610ff3565b82610a669190610f9d565b901c905060018185610a789190610ff3565b82610a839190610f9d565b901c905060008185610a959190610ff3565b9050808210610aa45780610aa6565b815b93505050505b919050565b600081359050610ac081611239565b92915050565b600081519050610ad581611250565b92915050565b600081519050610aea81611267565b92915050565b600081359050610aff8161127e565b92915050565b600081519050610b148161127e565b92915050565b600081519050610b2981611295565b92915050565b600080600060608486031215610b4457600080fd5b6000610b5286828701610ab1565b9350506020610b6386828701610af0565b9250506040610b7486828701610af0565b9150509250925092565b600060208284031215610b9057600080fd5b6000610b9e84828501610ac6565b91505092915050565b600080600060608486031215610bbc57600080fd5b6000610bca86828701610adb565b9350506020610bdb86828701610adb565b9250506040610bec86828701610b1a565b9150509250925092565b600060208284031215610c0857600080fd5b6000610c1684828501610b05565b91505092915050565b60008060408385031215610c3257600080fd5b6000610c4085828601610b05565b9250506020610c5185828601610b05565b9150509250929050565b600080600060608486031215610c7057600080fd5b6000610c7e86828701610b05565b9350506020610c8f86828701610b05565b9250506040610ca086828701610b05565b9150509250925092565b610cb3816110b2565b82525050565b610cc281611124565b82525050565b610cd181611148565b82525050565b610ce08161116c565b82525050565b610cef81611190565b82525050565b610cfe816111b4565b82525050565b610d0d816111c6565b82525050565b6000610d20600083610f8c565b9150610d2b82611236565b600082019050919050565b610d3f8161110a565b82525050565b6000602082019050610d5a6000830184610caa565b92915050565b600061010082019050610d76600083018b610caa565b610d83602083018a610caa565b610d906040830189610d36565b610d9d6060830188610d36565b610daa6080830187610d04565b610db760a0830186610d04565b610dc460c0830185610caa565b610dd160e0830184610d36565b9998505050505050505050565b6000604082019050610df36000830185610caa565b610e006020830184610d36565b9392505050565b6000602082019050610e1c6000830184610cb9565b92915050565b6000602082019050610e376000830184610cc8565b92915050565b600060a082019050610e526000830188610cc8565b610e5f6020830187610caa565b610e6c6040830186610caa565b610e796060830185610cf5565b610e866080830184610d36565b9695505050505050565b600060a082019050610ea56000830188610cc8565b610eb26020830187610caa565b610ebf6040830186610caa565b610ecc6060830185610d36565b610ed96080830184610cf5565b9695505050505050565b6000602082019050610ef86000830184610cd7565b92915050565b6000602082019050610f136000830184610ce6565b92915050565b6000608082019050610f2e6000830186610cf5565b610f3b6020830185610d36565b610f486040830184610caa565b8181036060830152610f5981610d13565b9050949350505050565b6000604082019050610f786000830185610d36565b610f856020830184610d36565b9392505050565b600082825260208201905092915050565b6000610fa88261110a565b9150610fb38361110a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fe857610fe76111d8565b5b828201905092915050565b6000610ffe8261110a565b91506110098361110a565b92508261101957611018611207565b5b828204905092915050565b600061102f8261110a565b915061103a8361110a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611073576110726111d8565b5b828202905092915050565b60006110898261110a565b91506110948361110a565b9250828210156110a7576110a66111d8565b5b828203905092915050565b60006110bd826110ea565b9050919050565b60008115159050919050565b60006dffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600061112f82611136565b9050919050565b6000611141826110ea565b9050919050565b60006111538261115a565b9050919050565b6000611165826110ea565b9050919050565b60006111778261117e565b9050919050565b6000611189826110ea565b9050919050565b600061119b826111a2565b9050919050565b60006111ad826110ea565b9050919050565b60006111bf8261110a565b9050919050565b60006111d18261110a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50565b611242816110b2565b811461124d57600080fd5b50565b611259816110c4565b811461126457600080fd5b50565b611270816110d0565b811461127b57600080fd5b50565b6112878161110a565b811461129257600080fd5b50565b61129e81611114565b81146112a957600080fd5b5056fea2646970667358221220e07058147fca4bd65a6d76d36733de1f2025ae1b827c6c7c3cf6c846c60ae29864736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}