{
  "language": "Solidity",
  "sources": {
    "contracts/convex/ConvexStakingWrapperAbra.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// File: contracts\\interfaces\\ICauldron.sol\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ICauldron {\r\n    function userCollateralShare(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IBentoBox {\r\n    function toAmount(\r\n        address _token,\r\n        uint256 _share,\r\n        bool _roundUp\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface IRewardStaking {\r\n    function stakeFor(address, uint256) external;\r\n\r\n    function stake(uint256) external;\r\n\r\n    function withdraw(uint256 amount, bool claim) external;\r\n\r\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\r\n\r\n    function earned(address account) external view returns (uint256);\r\n\r\n    function getReward() external;\r\n\r\n    function getReward(address _account, bool _claimExtras) external;\r\n\r\n    function extraRewardsLength() external view returns (uint256);\r\n\r\n    function extraRewards(uint256 _pid) external view returns (address);\r\n\r\n    function rewardToken() external view returns (address);\r\n\r\n    function balanceOf(address _account) external view returns (uint256);\r\n}\r\n\r\ninterface IConvexDeposits {\r\n    function deposit(\r\n        uint256 _pid,\r\n        uint256 _amount,\r\n        bool _stake\r\n    ) external returns (bool);\r\n\r\n    function deposit(\r\n        uint256 _amount,\r\n        bool _lock,\r\n        address _stakeAddress\r\n    ) external;\r\n}\r\n\r\ninterface ICvx {\r\n    function reductionPerCliff() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function totalCliffs() external view returns (uint256);\r\n\r\n    function maxSupply() external view returns (uint256);\r\n}\r\n\r\nlibrary CvxMining {\r\n    ICvx public constant cvx = ICvx(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\r\n\r\n    function ConvertCrvToCvx(uint256 _amount) internal view returns (uint256) {\r\n        uint256 supply = cvx.totalSupply();\r\n        uint256 reductionPerCliff = cvx.reductionPerCliff();\r\n        uint256 totalCliffs = cvx.totalCliffs();\r\n        uint256 maxSupply = cvx.maxSupply();\r\n\r\n        uint256 cliff = supply / reductionPerCliff;\r\n        //mint if below total cliffs\r\n        if (cliff < totalCliffs) {\r\n            //for reduction% take inverse of current cliff\r\n            uint256 reduction = totalCliffs - cliff;\r\n            //reduce\r\n            _amount = (_amount * reduction) / totalCliffs;\r\n\r\n            //supply cap check\r\n            uint256 amtTillMax = maxSupply - supply;\r\n            if (_amount > amtTillMax) {\r\n                _amount = amtTillMax;\r\n            }\r\n\r\n            //mint\r\n            return _amount;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n//Example of a tokenize a convex staked position.\r\n//if used as collateral some modifications will be needed to fit the specific platform\r\n\r\n//Based on Curve.fi's gauge wrapper implementations at https://github.com/curvefi/curve-dao-contracts/tree/master/contracts/gauges/wrappers\r\ncontract ConvexStakingWrapper is ERC20, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    struct EarnedData {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct RewardType {\r\n        address reward_token;\r\n        address reward_pool;\r\n        uint128 reward_integral;\r\n        uint128 reward_remaining;\r\n        mapping(address => uint256) reward_integral_for;\r\n        mapping(address => uint256) claimable_reward;\r\n    }\r\n\r\n    uint256 public cvx_reward_integral;\r\n    uint256 public cvx_reward_remaining;\r\n    mapping(address => uint256) public cvx_reward_integral_for;\r\n    mapping(address => uint256) public cvx_claimable_reward;\r\n\r\n    //constants/immutables\r\n    address public constant convexBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\r\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\r\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\r\n    address public curveToken;\r\n    address public convexToken;\r\n    address public convexPool;\r\n    uint256 public convexPoolId;\r\n    address public collateralVault;\r\n\r\n    //rewards\r\n    RewardType[] public rewards;\r\n\r\n    //management\r\n    bool public isShutdown;\r\n    bool public isInit;\r\n    address public owner;\r\n\r\n    string internal _tokenname;\r\n    string internal _tokensymbol;\r\n\r\n    event Deposited(address indexed _user, address indexed _account, uint256 _amount, bool _wrapped);\r\n    event Withdrawn(address indexed _user, uint256 _amount, bool _unwrapped);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public ERC20(\"StakedConvexToken\", \"stkCvx\") {}\r\n\r\n    function initialize(\r\n        address _curveToken,\r\n        address _convexToken,\r\n        address _convexPool,\r\n        uint256 _poolId,\r\n        address _vault\r\n    ) external virtual {\r\n        require(!isInit, \"already init\");\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n\r\n        _tokenname = string(abi.encodePacked(\"Staked \", ERC20(_convexToken).name()));\r\n        _tokensymbol = string(abi.encodePacked(\"stk\", ERC20(_convexToken).symbol()));\r\n        isShutdown = false;\r\n        isInit = true;\r\n        curveToken = _curveToken;\r\n        convexToken = _convexToken;\r\n        convexPool = _convexPool;\r\n        convexPoolId = _poolId;\r\n        collateralVault = _vault;\r\n\r\n        //add rewards\r\n        addRewards();\r\n        setApprovals();\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _tokenname;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _tokensymbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    function shutdown() external onlyOwner {\r\n        isShutdown = true;\r\n    }\r\n\r\n    function setApprovals() public {\r\n        IERC20(curveToken).safeApprove(convexBooster, 0);\r\n        IERC20(curveToken).safeApprove(convexBooster, uint256(-1));\r\n        IERC20(convexToken).safeApprove(convexPool, 0);\r\n        IERC20(convexToken).safeApprove(convexPool, uint256(-1));\r\n    }\r\n\r\n    function addRewards() public {\r\n        address mainPool = convexPool;\r\n\r\n        if (rewards.length == 0) {\r\n            rewards.push(RewardType({reward_token: crv, reward_pool: mainPool, reward_integral: 0, reward_remaining: 0}));\r\n        }\r\n\r\n        uint256 extraCount = IRewardStaking(mainPool).extraRewardsLength();\r\n        uint256 startIndex = rewards.length - 1;\r\n        for (uint256 i = startIndex; i < extraCount; i++) {\r\n            address extraPool = IRewardStaking(mainPool).extraRewards(i);\r\n            rewards.push(\r\n                RewardType({\r\n                    reward_token: IRewardStaking(extraPool).rewardToken(),\r\n                    reward_pool: extraPool,\r\n                    reward_integral: 0,\r\n                    reward_remaining: 0\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    function rewardLength() external view returns (uint256) {\r\n        return rewards.length;\r\n    }\r\n\r\n    function _getDepositedBalance(address _account) internal view virtual returns (uint256) {\r\n        if (_account == address(0) || _account == collateralVault) {\r\n            return 0;\r\n        }\r\n        //get balance from collateralVault\r\n\r\n        return balanceOf(_account);\r\n    }\r\n\r\n    function _getTotalSupply() internal view virtual returns (uint256) {\r\n        //override and add any supply needed (interest based growth)\r\n\r\n        return totalSupply();\r\n    }\r\n\r\n    function _calcCvxIntegral(\r\n        address[2] memory _accounts,\r\n        uint256[2] memory _balances,\r\n        uint256 _supply,\r\n        bool _isClaim\r\n    ) internal {\r\n        uint256 bal = IERC20(cvx).balanceOf(address(this));\r\n        uint256 d_cvxreward = bal.sub(cvx_reward_remaining);\r\n\r\n        if (_supply > 0 && d_cvxreward > 0) {\r\n            cvx_reward_integral = cvx_reward_integral + d_cvxreward.mul(1e20).div(_supply);\r\n        }\r\n\r\n        //update user integrals for cvx\r\n        for (uint256 u = 0; u < _accounts.length; u++) {\r\n            //do not give rewards to address 0\r\n            if (_accounts[u] == address(0)) continue;\r\n            if (_accounts[u] == collateralVault) continue;\r\n\r\n            uint256 userI = cvx_reward_integral_for[_accounts[u]];\r\n            if (_isClaim || userI < cvx_reward_integral) {\r\n                uint256 receiveable = cvx_claimable_reward[_accounts[u]].add(_balances[u].mul(cvx_reward_integral.sub(userI)).div(1e20));\r\n                if (_isClaim) {\r\n                    if (receiveable > 0) {\r\n                        cvx_claimable_reward[_accounts[u]] = 0;\r\n                        IERC20(cvx).safeTransfer(_accounts[u], receiveable);\r\n                        bal = bal.sub(receiveable);\r\n                    }\r\n                } else {\r\n                    cvx_claimable_reward[_accounts[u]] = receiveable;\r\n                }\r\n                cvx_reward_integral_for[_accounts[u]] = cvx_reward_integral;\r\n            }\r\n        }\r\n\r\n        //update reward total\r\n        if (bal != cvx_reward_remaining) {\r\n            cvx_reward_remaining = bal;\r\n        }\r\n    }\r\n\r\n    function _calcRewardIntegral(\r\n        uint256 _index,\r\n        address[2] memory _accounts,\r\n        uint256[2] memory _balances,\r\n        uint256 _supply,\r\n        bool _isClaim\r\n    ) internal {\r\n        RewardType storage reward = rewards[_index];\r\n\r\n        //get difference in balance and remaining rewards\r\n        //getReward is unguarded so we use reward_remaining to keep track of how much was actually claimed\r\n        uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\r\n        // uint256 d_reward = bal.sub(reward.reward_remaining);\r\n\r\n        if (_supply > 0 && bal.sub(reward.reward_remaining) > 0) {\r\n            reward.reward_integral = reward.reward_integral + uint128(bal.sub(reward.reward_remaining).mul(1e20).div(_supply));\r\n        }\r\n\r\n        //update user integrals\r\n        for (uint256 u = 0; u < _accounts.length; u++) {\r\n            //do not give rewards to address 0\r\n            if (_accounts[u] == address(0)) continue;\r\n            if (_accounts[u] == collateralVault) continue;\r\n\r\n            uint256 userI = reward.reward_integral_for[_accounts[u]];\r\n            if (_isClaim || userI < reward.reward_integral) {\r\n                if (_isClaim) {\r\n                    uint256 receiveable = reward.claimable_reward[_accounts[u]].add(\r\n                        _balances[u].mul(uint256(reward.reward_integral).sub(userI)).div(1e20)\r\n                    );\r\n                    if (receiveable > 0) {\r\n                        reward.claimable_reward[_accounts[u]] = 0;\r\n                        IERC20(reward.reward_token).safeTransfer(_accounts[u], receiveable);\r\n                        bal = bal.sub(receiveable);\r\n                    }\r\n                } else {\r\n                    reward.claimable_reward[_accounts[u]] = reward.claimable_reward[_accounts[u]].add(\r\n                        _balances[u].mul(uint256(reward.reward_integral).sub(userI)).div(1e20)\r\n                    );\r\n                }\r\n                reward.reward_integral_for[_accounts[u]] = reward.reward_integral;\r\n            }\r\n        }\r\n\r\n        //update remaining reward here since balance could have changed if claiming\r\n        if (bal != reward.reward_remaining) {\r\n            reward.reward_remaining = uint128(bal);\r\n        }\r\n    }\r\n\r\n    function _checkpoint(address[2] memory _accounts) internal {\r\n        //if shutdown, no longer checkpoint in case there are problems\r\n        if (isShutdown) return;\r\n\r\n        uint256 supply = _getTotalSupply();\r\n        uint256[2] memory depositedBalance;\r\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]);\r\n        depositedBalance[1] = _getDepositedBalance(_accounts[1]);\r\n\r\n        IRewardStaking(convexPool).getReward(address(this), true);\r\n\r\n        uint256 rewardCount = rewards.length;\r\n        for (uint256 i = 0; i < rewardCount; i++) {\r\n            _calcRewardIntegral(i, _accounts, depositedBalance, supply, false);\r\n        }\r\n        _calcCvxIntegral(_accounts, depositedBalance, supply, false);\r\n    }\r\n\r\n    function _checkpointAndClaim(address[2] memory _accounts) internal {\r\n        uint256 supply = _getTotalSupply();\r\n        uint256[2] memory depositedBalance;\r\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]); //only do first slot\r\n\r\n        IRewardStaking(convexPool).getReward(address(this), true);\r\n\r\n        uint256 rewardCount = rewards.length;\r\n        for (uint256 i = 0; i < rewardCount; i++) {\r\n            _calcRewardIntegral(i, _accounts, depositedBalance, supply, true);\r\n        }\r\n        _calcCvxIntegral(_accounts, depositedBalance, supply, true);\r\n    }\r\n\r\n    function user_checkpoint(address[2] calldata _accounts) external returns (bool) {\r\n        _checkpoint([_accounts[0], _accounts[1]]);\r\n        return true;\r\n    }\r\n\r\n    function totalBalanceOf(address _account) external view returns (uint256) {\r\n        return _getDepositedBalance(_account);\r\n    }\r\n\r\n    function earned(address _account) external view returns (EarnedData[] memory claimable) {\r\n        uint256 supply = _getTotalSupply();\r\n        // uint256 depositedBalance = _getDepositedBalance(_account);\r\n        uint256 rewardCount = rewards.length;\r\n        claimable = new EarnedData[](rewardCount + 1);\r\n\r\n        for (uint256 i = 0; i < rewardCount; i++) {\r\n            RewardType storage reward = rewards[i];\r\n\r\n            //change in reward is current balance - remaining reward + earned\r\n            uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\r\n            uint256 d_reward = bal.sub(reward.reward_remaining);\r\n            d_reward = d_reward.add(IRewardStaking(reward.reward_pool).earned(address(this)));\r\n\r\n            uint256 I = reward.reward_integral;\r\n            if (supply > 0) {\r\n                I = I + d_reward.mul(1e20).div(supply);\r\n            }\r\n\r\n            uint256 newlyClaimable = _getDepositedBalance(_account).mul(I.sub(reward.reward_integral_for[_account])).div(1e20);\r\n            claimable[i].amount = reward.claimable_reward[_account].add(newlyClaimable);\r\n            claimable[i].token = reward.reward_token;\r\n\r\n            //calc cvx here\r\n            if (reward.reward_token == crv) {\r\n                claimable[rewardCount].amount = cvx_claimable_reward[_account].add(CvxMining.ConvertCrvToCvx(newlyClaimable));\r\n                claimable[rewardCount].token = cvx;\r\n            }\r\n        }\r\n        return claimable;\r\n    }\r\n\r\n    function getReward(address _account) external {\r\n        //claim directly in checkpoint logic to save a bit of gas\r\n        _checkpointAndClaim([_account, address(0)]);\r\n    }\r\n\r\n    //deposit a curve token\r\n    function deposit(uint256 _amount, address _to) external nonReentrant {\r\n        require(!isShutdown, \"shutdown\");\r\n\r\n        //dont need to call checkpoint since _mint() will\r\n\r\n        if (_amount > 0) {\r\n            _mint(_to, _amount);\r\n            IERC20(curveToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n            IConvexDeposits(convexBooster).deposit(convexPoolId, _amount, true);\r\n        }\r\n\r\n        emit Deposited(msg.sender, _to, _amount, true);\r\n    }\r\n\r\n    //stake a convex token\r\n    function stake(uint256 _amount, address _to) external nonReentrant {\r\n        require(!isShutdown, \"shutdown\");\r\n\r\n        //dont need to call checkpoint since _mint() will\r\n\r\n        if (_amount > 0) {\r\n            _mint(_to, _amount);\r\n            IERC20(convexToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n            IRewardStaking(convexPool).stake(_amount);\r\n        }\r\n\r\n        emit Deposited(msg.sender, _to, _amount, false);\r\n    }\r\n\r\n    //withdraw to convex deposit token\r\n    function withdraw(uint256 _amount) external nonReentrant {\r\n        //dont need to call checkpoint since _burn() will\r\n\r\n        if (_amount > 0) {\r\n            _burn(msg.sender, _amount);\r\n            IRewardStaking(convexPool).withdraw(_amount, false);\r\n            IERC20(convexToken).safeTransfer(msg.sender, _amount);\r\n        }\r\n\r\n        emit Withdrawn(msg.sender, _amount, false);\r\n    }\r\n\r\n    //withdraw to underlying curve lp token\r\n    function withdrawAndUnwrap(uint256 _amount) external nonReentrant {\r\n        //dont need to call checkpoint since _burn() will\r\n\r\n        if (_amount > 0) {\r\n            _burn(msg.sender, _amount);\r\n            IRewardStaking(convexPool).withdrawAndUnwrap(_amount, false);\r\n            IERC20(curveToken).safeTransfer(msg.sender, _amount);\r\n        }\r\n\r\n        //events\r\n        emit Withdrawn(msg.sender, _amount, true);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256\r\n    ) internal override {\r\n        _checkpoint([_from, _to]);\r\n    }\r\n}\r\n\r\n//Staking wrapper for Abracadabra platform\r\n//use convex LP positions as collateral while still receiving rewards\r\ncontract ConvexStakingWrapperAbra is ConvexStakingWrapper {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    address[] public cauldrons;\r\n\r\n    constructor() public {}\r\n\r\n    function initialize(\r\n        address _curveToken,\r\n        address _convexToken,\r\n        address _convexPool,\r\n        uint256 _poolId,\r\n        address _vault\r\n    ) external override {\r\n        require(!isInit, \"already init\");\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n        _tokenname = string(abi.encodePacked(\"Staked \", ERC20(_convexToken).name(), \" Abra\"));\r\n        _tokensymbol = string(abi.encodePacked(\"stk\", ERC20(_convexToken).symbol(), \"-abra\"));\r\n        isShutdown = false;\r\n        isInit = true;\r\n        curveToken = _curveToken;\r\n        convexToken = _convexToken;\r\n        convexPool = _convexPool;\r\n        convexPoolId = _poolId;\r\n        collateralVault = address(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\r\n\r\n        if (_vault != address(0)) {\r\n            cauldrons.push(_vault);\r\n        }\r\n\r\n        //add rewards\r\n        addRewards();\r\n        setApprovals();\r\n    }\r\n\r\n    function cauldronsLength() external view returns (uint256) {\r\n        return cauldrons.length;\r\n    }\r\n\r\n    function setCauldron(address _cauldron) external onlyOwner {\r\n        //allow settings and changing cauldrons that receive staking rewards.\r\n        require(_cauldron != address(0), \"invalid cauldron\");\r\n\r\n        //do not allow doubles\r\n        for (uint256 i = 0; i < cauldrons.length; i++) {\r\n            require(cauldrons[i] != _cauldron, \"already added\");\r\n        }\r\n\r\n        //IMPORTANT: when adding a cauldron,\r\n        // it should be added to this list BEFORE anyone starts using it\r\n        // or else a user may receive more than what they should\r\n        cauldrons.push(_cauldron);\r\n    }\r\n\r\n    function _getDepositedBalance(address _account) internal view override returns (uint256) {\r\n        if (_account == address(0) || _account == collateralVault) {\r\n            return 0;\r\n        }\r\n\r\n        if (cauldrons.length == 0) {\r\n            return balanceOf(_account);\r\n        }\r\n\r\n        //add up all shares of all cauldrons\r\n        uint256 share;\r\n        for (uint256 i = 0; i < cauldrons.length; i++) {\r\n            try ICauldron(cauldrons[i]).userCollateralShare(_account) returns (uint256 _share) {\r\n                share = share.add(_share);\r\n            } catch {}\r\n        }\r\n\r\n        //convert shares to balance amount via bento box\r\n        uint256 collateral = IBentoBox(collateralVault).toAmount(address(this), share, false);\r\n\r\n        //add to balance of this token\r\n        return balanceOf(_account).add(collateral);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}