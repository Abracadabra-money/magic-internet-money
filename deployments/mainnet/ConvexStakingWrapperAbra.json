{
  "address": "0x2F1Ba281cA9c32BCe9C6E8792Ba6448434178f89",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_wrapped",
          "type": "bool"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_unwrapped",
          "type": "bool"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cauldrons",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cauldronsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexBooster",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crv",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cvx_claimable_reward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvx_reward_integral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cvx_reward_integral_for",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvx_reward_remaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ConvexStakingWrapper.EarnedData[]",
          "name": "claimable",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_curveToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_convexToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_convexPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isShutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "reward_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward_pool",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "reward_integral",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "reward_remaining",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setApprovals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cauldron",
          "type": "address"
        }
      ],
      "name": "setCauldron",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "totalBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[2]",
          "name": "_accounts",
          "type": "address[2]"
        }
      ],
      "name": "user_checkpoint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndUnwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f90bfb5a44f944a4a496ec23c23f78b62a1f29732d12cc6354280471522843c",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0x2F1Ba281cA9c32BCe9C6E8792Ba6448434178f89",
    "transactionIndex": 122,
    "gasUsed": "3366219",
    "logsBloom": "0x
    "blockHash": "0xf3fd157b2a74dc761c683fde541fea6341efccf9a1a8698f06129aec733e8057",
    "transactionHash": "0x8f90bfb5a44f944a4a496ec23c23f78b62a1f29732d12cc6354280471522843c",
    "logs": [],
    "blockNumber": 14057324,
    "cumulativeGasUsed": "17849935",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bc7b52d53514a6c97a36d4d2f9797fa3",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_wrapped\",\"type\":\"bool\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_unwrapped\",\"type\":\"bool\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cauldrons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cauldronsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cvx_claimable_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx_reward_integral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cvx_reward_integral_for\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx_reward_remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ConvexStakingWrapper.EarnedData[]\",\"name\":\"claimable\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convexPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"reward_integral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reward_remaining\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cauldron\",\"type\":\"address\"}],\"name\":\"setCauldron\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"_accounts\",\"type\":\"address[2]\"}],\"name\":\"user_checkpoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/convex/ConvexStakingWrapperAbra.sol\":\"ConvexStakingWrapperAbra\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/convex/ConvexStakingWrapperAbra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// File: contracts\\\\interfaces\\\\ICauldron.sol\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ICauldron {\\r\\n    function userCollateralShare(address account) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IBentoBox {\\r\\n    function toAmount(\\r\\n        address _token,\\r\\n        uint256 _share,\\r\\n        bool _roundUp\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IRewardStaking {\\r\\n    function stakeFor(address, uint256) external;\\r\\n\\r\\n    function stake(uint256) external;\\r\\n\\r\\n    function withdraw(uint256 amount, bool claim) external;\\r\\n\\r\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function getReward(address _account, bool _claimExtras) external;\\r\\n\\r\\n    function extraRewardsLength() external view returns (uint256);\\r\\n\\r\\n    function extraRewards(uint256 _pid) external view returns (address);\\r\\n\\r\\n    function rewardToken() external view returns (address);\\r\\n\\r\\n    function balanceOf(address _account) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IConvexDeposits {\\r\\n    function deposit(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        bool _stake\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 _amount,\\r\\n        bool _lock,\\r\\n        address _stakeAddress\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface ICvx {\\r\\n    function reductionPerCliff() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function totalCliffs() external view returns (uint256);\\r\\n\\r\\n    function maxSupply() external view returns (uint256);\\r\\n}\\r\\n\\r\\nlibrary CvxMining {\\r\\n    ICvx public constant cvx = ICvx(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\r\\n\\r\\n    function ConvertCrvToCvx(uint256 _amount) internal view returns (uint256) {\\r\\n        uint256 supply = cvx.totalSupply();\\r\\n        uint256 reductionPerCliff = cvx.reductionPerCliff();\\r\\n        uint256 totalCliffs = cvx.totalCliffs();\\r\\n        uint256 maxSupply = cvx.maxSupply();\\r\\n\\r\\n        uint256 cliff = supply / reductionPerCliff;\\r\\n        //mint if below total cliffs\\r\\n        if (cliff < totalCliffs) {\\r\\n            //for reduction% take inverse of current cliff\\r\\n            uint256 reduction = totalCliffs - cliff;\\r\\n            //reduce\\r\\n            _amount = (_amount * reduction) / totalCliffs;\\r\\n\\r\\n            //supply cap check\\r\\n            uint256 amtTillMax = maxSupply - supply;\\r\\n            if (_amount > amtTillMax) {\\r\\n                _amount = amtTillMax;\\r\\n            }\\r\\n\\r\\n            //mint\\r\\n            return _amount;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        uint256 c = a + b;\\r\\n        if (c < a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b > a) return (false, 0);\\r\\n        return (true, a - b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) return (true, 0);\\r\\n        uint256 c = a * b;\\r\\n        if (c / a != b) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a / b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        if (b == 0) return (false, 0);\\r\\n        return (true, a % b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) return 0;\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) private pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) public {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() internal {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\n//Example of a tokenize a convex staked position.\\r\\n//if used as collateral some modifications will be needed to fit the specific platform\\r\\n\\r\\n//Based on Curve.fi's gauge wrapper implementations at https://github.com/curvefi/curve-dao-contracts/tree/master/contracts/gauges/wrappers\\r\\ncontract ConvexStakingWrapper is ERC20, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct EarnedData {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    struct RewardType {\\r\\n        address reward_token;\\r\\n        address reward_pool;\\r\\n        uint128 reward_integral;\\r\\n        uint128 reward_remaining;\\r\\n        mapping(address => uint256) reward_integral_for;\\r\\n        mapping(address => uint256) claimable_reward;\\r\\n    }\\r\\n\\r\\n    uint256 public cvx_reward_integral;\\r\\n    uint256 public cvx_reward_remaining;\\r\\n    mapping(address => uint256) public cvx_reward_integral_for;\\r\\n    mapping(address => uint256) public cvx_claimable_reward;\\r\\n\\r\\n    //constants/immutables\\r\\n    address public constant convexBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\r\\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\r\\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\r\\n    address public curveToken;\\r\\n    address public convexToken;\\r\\n    address public convexPool;\\r\\n    uint256 public convexPoolId;\\r\\n    address public collateralVault;\\r\\n\\r\\n    //rewards\\r\\n    RewardType[] public rewards;\\r\\n\\r\\n    //management\\r\\n    bool public isShutdown;\\r\\n    bool public isInit;\\r\\n    address public owner;\\r\\n\\r\\n    string internal _tokenname;\\r\\n    string internal _tokensymbol;\\r\\n\\r\\n    event Deposited(address indexed _user, address indexed _account, uint256 _amount, bool _wrapped);\\r\\n    event Withdrawn(address indexed _user, uint256 _amount, bool _unwrapped);\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() public ERC20(\\\"StakedConvexToken\\\", \\\"stkCvx\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        address _curveToken,\\r\\n        address _convexToken,\\r\\n        address _convexPool,\\r\\n        uint256 _poolId,\\r\\n        address _vault\\r\\n    ) external virtual {\\r\\n        require(!isInit, \\\"already init\\\");\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), owner);\\r\\n\\r\\n        _tokenname = string(abi.encodePacked(\\\"Staked \\\", ERC20(_convexToken).name()));\\r\\n        _tokensymbol = string(abi.encodePacked(\\\"stk\\\", ERC20(_convexToken).symbol()));\\r\\n        isShutdown = false;\\r\\n        isInit = true;\\r\\n        curveToken = _curveToken;\\r\\n        convexToken = _convexToken;\\r\\n        convexPool = _convexPool;\\r\\n        convexPoolId = _poolId;\\r\\n        collateralVault = _vault;\\r\\n\\r\\n        //add rewards\\r\\n        addRewards();\\r\\n        setApprovals();\\r\\n    }\\r\\n\\r\\n    function name() public view override returns (string memory) {\\r\\n        return _tokenname;\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _tokensymbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(owner, address(0));\\r\\n        owner = address(0);\\r\\n    }\\r\\n\\r\\n    function shutdown() external onlyOwner {\\r\\n        isShutdown = true;\\r\\n    }\\r\\n\\r\\n    function setApprovals() public {\\r\\n        IERC20(curveToken).safeApprove(convexBooster, 0);\\r\\n        IERC20(curveToken).safeApprove(convexBooster, uint256(-1));\\r\\n        IERC20(convexToken).safeApprove(convexPool, 0);\\r\\n        IERC20(convexToken).safeApprove(convexPool, uint256(-1));\\r\\n    }\\r\\n\\r\\n    function addRewards() public {\\r\\n        address mainPool = convexPool;\\r\\n\\r\\n        if (rewards.length == 0) {\\r\\n            rewards.push(RewardType({reward_token: crv, reward_pool: mainPool, reward_integral: 0, reward_remaining: 0}));\\r\\n        }\\r\\n\\r\\n        uint256 extraCount = IRewardStaking(mainPool).extraRewardsLength();\\r\\n        uint256 startIndex = rewards.length - 1;\\r\\n        for (uint256 i = startIndex; i < extraCount; i++) {\\r\\n            address extraPool = IRewardStaking(mainPool).extraRewards(i);\\r\\n            rewards.push(\\r\\n                RewardType({\\r\\n                    reward_token: IRewardStaking(extraPool).rewardToken(),\\r\\n                    reward_pool: extraPool,\\r\\n                    reward_integral: 0,\\r\\n                    reward_remaining: 0\\r\\n                })\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function rewardLength() external view returns (uint256) {\\r\\n        return rewards.length;\\r\\n    }\\r\\n\\r\\n    function _getDepositedBalance(address _account) internal view virtual returns (uint256) {\\r\\n        if (_account == address(0) || _account == collateralVault) {\\r\\n            return 0;\\r\\n        }\\r\\n        //get balance from collateralVault\\r\\n\\r\\n        return balanceOf(_account);\\r\\n    }\\r\\n\\r\\n    function _getTotalSupply() internal view virtual returns (uint256) {\\r\\n        //override and add any supply needed (interest based growth)\\r\\n\\r\\n        return totalSupply();\\r\\n    }\\r\\n\\r\\n    function _calcCvxIntegral(\\r\\n        address[2] memory _accounts,\\r\\n        uint256[2] memory _balances,\\r\\n        uint256 _supply,\\r\\n        bool _isClaim\\r\\n    ) internal {\\r\\n        uint256 bal = IERC20(cvx).balanceOf(address(this));\\r\\n        uint256 d_cvxreward = bal.sub(cvx_reward_remaining);\\r\\n\\r\\n        if (_supply > 0 && d_cvxreward > 0) {\\r\\n            cvx_reward_integral = cvx_reward_integral + d_cvxreward.mul(1e20).div(_supply);\\r\\n        }\\r\\n\\r\\n        //update user integrals for cvx\\r\\n        for (uint256 u = 0; u < _accounts.length; u++) {\\r\\n            //do not give rewards to address 0\\r\\n            if (_accounts[u] == address(0)) continue;\\r\\n            if (_accounts[u] == collateralVault) continue;\\r\\n\\r\\n            uint256 userI = cvx_reward_integral_for[_accounts[u]];\\r\\n            if (_isClaim || userI < cvx_reward_integral) {\\r\\n                uint256 receiveable = cvx_claimable_reward[_accounts[u]].add(_balances[u].mul(cvx_reward_integral.sub(userI)).div(1e20));\\r\\n                if (_isClaim) {\\r\\n                    if (receiveable > 0) {\\r\\n                        cvx_claimable_reward[_accounts[u]] = 0;\\r\\n                        IERC20(cvx).safeTransfer(_accounts[u], receiveable);\\r\\n                        bal = bal.sub(receiveable);\\r\\n                    }\\r\\n                } else {\\r\\n                    cvx_claimable_reward[_accounts[u]] = receiveable;\\r\\n                }\\r\\n                cvx_reward_integral_for[_accounts[u]] = cvx_reward_integral;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //update reward total\\r\\n        if (bal != cvx_reward_remaining) {\\r\\n            cvx_reward_remaining = bal;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calcRewardIntegral(\\r\\n        uint256 _index,\\r\\n        address[2] memory _accounts,\\r\\n        uint256[2] memory _balances,\\r\\n        uint256 _supply,\\r\\n        bool _isClaim\\r\\n    ) internal {\\r\\n        RewardType storage reward = rewards[_index];\\r\\n\\r\\n        //get difference in balance and remaining rewards\\r\\n        //getReward is unguarded so we use reward_remaining to keep track of how much was actually claimed\\r\\n        uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\\r\\n        // uint256 d_reward = bal.sub(reward.reward_remaining);\\r\\n\\r\\n        if (_supply > 0 && bal.sub(reward.reward_remaining) > 0) {\\r\\n            reward.reward_integral = reward.reward_integral + uint128(bal.sub(reward.reward_remaining).mul(1e20).div(_supply));\\r\\n        }\\r\\n\\r\\n        //update user integrals\\r\\n        for (uint256 u = 0; u < _accounts.length; u++) {\\r\\n            //do not give rewards to address 0\\r\\n            if (_accounts[u] == address(0)) continue;\\r\\n            if (_accounts[u] == collateralVault) continue;\\r\\n\\r\\n            uint256 userI = reward.reward_integral_for[_accounts[u]];\\r\\n            if (_isClaim || userI < reward.reward_integral) {\\r\\n                if (_isClaim) {\\r\\n                    uint256 receiveable = reward.claimable_reward[_accounts[u]].add(\\r\\n                        _balances[u].mul(uint256(reward.reward_integral).sub(userI)).div(1e20)\\r\\n                    );\\r\\n                    if (receiveable > 0) {\\r\\n                        reward.claimable_reward[_accounts[u]] = 0;\\r\\n                        IERC20(reward.reward_token).safeTransfer(_accounts[u], receiveable);\\r\\n                        bal = bal.sub(receiveable);\\r\\n                    }\\r\\n                } else {\\r\\n                    reward.claimable_reward[_accounts[u]] = reward.claimable_reward[_accounts[u]].add(\\r\\n                        _balances[u].mul(uint256(reward.reward_integral).sub(userI)).div(1e20)\\r\\n                    );\\r\\n                }\\r\\n                reward.reward_integral_for[_accounts[u]] = reward.reward_integral;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //update remaining reward here since balance could have changed if claiming\\r\\n        if (bal != reward.reward_remaining) {\\r\\n            reward.reward_remaining = uint128(bal);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkpoint(address[2] memory _accounts) internal {\\r\\n        //if shutdown, no longer checkpoint in case there are problems\\r\\n        if (isShutdown) return;\\r\\n\\r\\n        uint256 supply = _getTotalSupply();\\r\\n        uint256[2] memory depositedBalance;\\r\\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]);\\r\\n        depositedBalance[1] = _getDepositedBalance(_accounts[1]);\\r\\n\\r\\n        IRewardStaking(convexPool).getReward(address(this), true);\\r\\n\\r\\n        uint256 rewardCount = rewards.length;\\r\\n        for (uint256 i = 0; i < rewardCount; i++) {\\r\\n            _calcRewardIntegral(i, _accounts, depositedBalance, supply, false);\\r\\n        }\\r\\n        _calcCvxIntegral(_accounts, depositedBalance, supply, false);\\r\\n    }\\r\\n\\r\\n    function _checkpointAndClaim(address[2] memory _accounts) internal {\\r\\n        uint256 supply = _getTotalSupply();\\r\\n        uint256[2] memory depositedBalance;\\r\\n        depositedBalance[0] = _getDepositedBalance(_accounts[0]); //only do first slot\\r\\n\\r\\n        IRewardStaking(convexPool).getReward(address(this), true);\\r\\n\\r\\n        uint256 rewardCount = rewards.length;\\r\\n        for (uint256 i = 0; i < rewardCount; i++) {\\r\\n            _calcRewardIntegral(i, _accounts, depositedBalance, supply, true);\\r\\n        }\\r\\n        _calcCvxIntegral(_accounts, depositedBalance, supply, true);\\r\\n    }\\r\\n\\r\\n    function user_checkpoint(address[2] calldata _accounts) external returns (bool) {\\r\\n        _checkpoint([_accounts[0], _accounts[1]]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function totalBalanceOf(address _account) external view returns (uint256) {\\r\\n        return _getDepositedBalance(_account);\\r\\n    }\\r\\n\\r\\n    function earned(address _account) external view returns (EarnedData[] memory claimable) {\\r\\n        uint256 supply = _getTotalSupply();\\r\\n        // uint256 depositedBalance = _getDepositedBalance(_account);\\r\\n        uint256 rewardCount = rewards.length;\\r\\n        claimable = new EarnedData[](rewardCount + 1);\\r\\n\\r\\n        for (uint256 i = 0; i < rewardCount; i++) {\\r\\n            RewardType storage reward = rewards[i];\\r\\n\\r\\n            //change in reward is current balance - remaining reward + earned\\r\\n            uint256 bal = IERC20(reward.reward_token).balanceOf(address(this));\\r\\n            uint256 d_reward = bal.sub(reward.reward_remaining);\\r\\n            d_reward = d_reward.add(IRewardStaking(reward.reward_pool).earned(address(this)));\\r\\n\\r\\n            uint256 I = reward.reward_integral;\\r\\n            if (supply > 0) {\\r\\n                I = I + d_reward.mul(1e20).div(supply);\\r\\n            }\\r\\n\\r\\n            uint256 newlyClaimable = _getDepositedBalance(_account).mul(I.sub(reward.reward_integral_for[_account])).div(1e20);\\r\\n            claimable[i].amount = reward.claimable_reward[_account].add(newlyClaimable);\\r\\n            claimable[i].token = reward.reward_token;\\r\\n\\r\\n            //calc cvx here\\r\\n            if (reward.reward_token == crv) {\\r\\n                claimable[rewardCount].amount = cvx_claimable_reward[_account].add(CvxMining.ConvertCrvToCvx(newlyClaimable));\\r\\n                claimable[rewardCount].token = cvx;\\r\\n            }\\r\\n        }\\r\\n        return claimable;\\r\\n    }\\r\\n\\r\\n    function getReward(address _account) external {\\r\\n        //claim directly in checkpoint logic to save a bit of gas\\r\\n        _checkpointAndClaim([_account, address(0)]);\\r\\n    }\\r\\n\\r\\n    //deposit a curve token\\r\\n    function deposit(uint256 _amount, address _to) external nonReentrant {\\r\\n        require(!isShutdown, \\\"shutdown\\\");\\r\\n\\r\\n        //dont need to call checkpoint since _mint() will\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            _mint(_to, _amount);\\r\\n            IERC20(curveToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            IConvexDeposits(convexBooster).deposit(convexPoolId, _amount, true);\\r\\n        }\\r\\n\\r\\n        emit Deposited(msg.sender, _to, _amount, true);\\r\\n    }\\r\\n\\r\\n    //stake a convex token\\r\\n    function stake(uint256 _amount, address _to) external nonReentrant {\\r\\n        require(!isShutdown, \\\"shutdown\\\");\\r\\n\\r\\n        //dont need to call checkpoint since _mint() will\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            _mint(_to, _amount);\\r\\n            IERC20(convexToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            IRewardStaking(convexPool).stake(_amount);\\r\\n        }\\r\\n\\r\\n        emit Deposited(msg.sender, _to, _amount, false);\\r\\n    }\\r\\n\\r\\n    //withdraw to convex deposit token\\r\\n    function withdraw(uint256 _amount) external nonReentrant {\\r\\n        //dont need to call checkpoint since _burn() will\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            _burn(msg.sender, _amount);\\r\\n            IRewardStaking(convexPool).withdraw(_amount, false);\\r\\n            IERC20(convexToken).safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n\\r\\n        emit Withdrawn(msg.sender, _amount, false);\\r\\n    }\\r\\n\\r\\n    //withdraw to underlying curve lp token\\r\\n    function withdrawAndUnwrap(uint256 _amount) external nonReentrant {\\r\\n        //dont need to call checkpoint since _burn() will\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            _burn(msg.sender, _amount);\\r\\n            IRewardStaking(convexPool).withdrawAndUnwrap(_amount, false);\\r\\n            IERC20(curveToken).safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n\\r\\n        //events\\r\\n        emit Withdrawn(msg.sender, _amount, true);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256\\r\\n    ) internal override {\\r\\n        _checkpoint([_from, _to]);\\r\\n    }\\r\\n}\\r\\n\\r\\n//Staking wrapper for Abracadabra platform\\r\\n//use convex LP positions as collateral while still receiving rewards\\r\\ncontract ConvexStakingWrapperAbra is ConvexStakingWrapper {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address[] public cauldrons;\\r\\n\\r\\n    constructor() public {}\\r\\n\\r\\n    function initialize(\\r\\n        address _curveToken,\\r\\n        address _convexToken,\\r\\n        address _convexPool,\\r\\n        uint256 _poolId,\\r\\n        address _vault\\r\\n    ) external override {\\r\\n        require(!isInit, \\\"already init\\\");\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), owner);\\r\\n        _tokenname = string(abi.encodePacked(\\\"Staked \\\", ERC20(_convexToken).name(), \\\" Abra\\\"));\\r\\n        _tokensymbol = string(abi.encodePacked(\\\"stk\\\", ERC20(_convexToken).symbol(), \\\"-abra\\\"));\\r\\n        isShutdown = false;\\r\\n        isInit = true;\\r\\n        curveToken = _curveToken;\\r\\n        convexToken = _convexToken;\\r\\n        convexPool = _convexPool;\\r\\n        convexPoolId = _poolId;\\r\\n        collateralVault = address(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\\r\\n\\r\\n        if (_vault != address(0)) {\\r\\n            cauldrons.push(_vault);\\r\\n        }\\r\\n\\r\\n        //add rewards\\r\\n        addRewards();\\r\\n        setApprovals();\\r\\n    }\\r\\n\\r\\n    function cauldronsLength() external view returns (uint256) {\\r\\n        return cauldrons.length;\\r\\n    }\\r\\n\\r\\n    function setCauldron(address _cauldron) external onlyOwner {\\r\\n        //allow settings and changing cauldrons that receive staking rewards.\\r\\n        require(_cauldron != address(0), \\\"invalid cauldron\\\");\\r\\n\\r\\n        //do not allow doubles\\r\\n        for (uint256 i = 0; i < cauldrons.length; i++) {\\r\\n            require(cauldrons[i] != _cauldron, \\\"already added\\\");\\r\\n        }\\r\\n\\r\\n        //IMPORTANT: when adding a cauldron,\\r\\n        // it should be added to this list BEFORE anyone starts using it\\r\\n        // or else a user may receive more than what they should\\r\\n        cauldrons.push(_cauldron);\\r\\n    }\\r\\n\\r\\n    function _getDepositedBalance(address _account) internal view override returns (uint256) {\\r\\n        if (_account == address(0) || _account == collateralVault) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (cauldrons.length == 0) {\\r\\n            return balanceOf(_account);\\r\\n        }\\r\\n\\r\\n        //add up all shares of all cauldrons\\r\\n        uint256 share;\\r\\n        for (uint256 i = 0; i < cauldrons.length; i++) {\\r\\n            try ICauldron(cauldrons[i]).userCollateralShare(_account) returns (uint256 _share) {\\r\\n                share = share.add(_share);\\r\\n            } catch {}\\r\\n        }\\r\\n\\r\\n        //convert shares to balance amount via bento box\\r\\n        uint256 collateral = IBentoBox(collateralVault).toAmount(address(this), share, false);\\r\\n\\r\\n        //add to balance of this token\\r\\n        return balanceOf(_account).add(collateral);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6d6be3f4f212de7b943e310b556bf931755406da0e6a8822a4d5bd235e1b84c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252601181527029ba30b5b2b221b7b73b32bc2a37b5b2b760791b6020808301918252835180850190945260068452650e6e8d686ecf60d31b90840152815191929162000069916003916200009a565b5080516200007f9060049060208401906200009a565b50506005805460ff1916601217905550600160065562000136565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000dd57805160ff19168380011785556200010d565b828001600101855582156200010d579182015b828111156200010d578251825591602001919060010190620000f0565b506200011b9291506200011f565b5090565b5b808211156200011b576000815560010162000120565b613a3a80620001466000396000f3fe608060405234801561001057600080fd5b506004361061027e5760003560e01c80637c93fa621161015c578063bf86d690116100ce578063e529ee9511610087578063e529ee95146104e5578063e6d223b1146104ed578063e89133b214610500578063f2fde38b14610508578063f301af421461051b578063fc0e74d11461053e5761027e565b8063bf86d69014610489578063c00007b014610491578063c3ff0a5b146104a4578063cc7d510e146104b7578063dd62ed3e146104bf578063e2aecded146104d25761027e565b80639a04dbc7116101205780639a04dbc714610438578063a457c2d71461044b578063a52e19a51461045e578063a9059cbb14610466578063b145a5b814610479578063b95c5746146104815761027e565b80637c93fa62146104105780638757b15b146104185780638da5cb5b14610420578063923c1d611461042857806395d89b41146104305761027e565b80633969dfb4116101f55780636a4874a1116101b95780636a4874a1146103bf5780636e553f65146103c757806370a08231146103da578063715018a6146103ed57806376addb19146103f55780637acb7757146103fd5761027e565b80633969dfb41461036b5780634b0ee02a1461037e5780634f39059c14610391578063530b97a4146103995780635626265c146103ac5761027e565b806318160ddd1161024757806318160ddd1461030057806323b872dd146103155780632cdacb50146103285780632e1a7d4d14610330578063313ce5671461034357806339509351146103585761027e565b80628cc2621461028357806306fdde03146102ac578063095ea7b3146102c15780630bece79c146102e157806314d6aed0146102f6575b600080fd5b610296610291366004612fe3565b610546565b6040516102a391906133cb565b60405180910390f35b6102b46108b9565b6040516102a3919061342e565b6102d46102cf3660046130fa565b61094f565b6040516102a39190613423565b6102e961096d565b6040516102a391906132ee565b6102fe61097c565b005b610308610ce3565b6040516102a391906138ef565b6102d46103233660046130ba565b610ce9565b6102e9610d71565b6102fe61033e366004613206565b610d89565b61034b610e93565b6040516102a39190613920565b6102d46103663660046130fa565b610e98565b6102fe610379366004613206565b610ee6565b61030861038c366004612fe3565b610fd7565b6102e9610fe2565b6102fe6103a7366004613053565b610ff1565b6102e96103ba366004613206565b61129b565b6102e96112c2565b6102fe6103d5366004613236565b6112da565b6103086103e8366004612fe3565b611436565b6102fe611451565b6103086114d3565b6102fe61040b366004613236565b6114d9565b6103086115f5565b6102fe6115fb565b6102e9611693565b6102e96116a8565b6102b46116c0565b610308610446366004612fe3565b611721565b6102d46104593660046130fa565b611733565b61030861179b565b6102d46104743660046130fa565b6117a1565b6102d46117b5565b6103086117c3565b6102d46117c9565b6102fe61049f366004612fe3565b6117d2565b6102fe6104b2366004612fe3565b6117fb565b6102e9611903565b6103086104cd36600461301b565b611912565b6102d46104e0366004613125565b61193d565b6103086119a6565b6103086104fb366004612fe3565b6119ac565b6102e96119be565b6102fe610516366004612fe3565b6119cd565b61052e610529366004613206565b611a8d565b6040516102a3949392919061331c565b6102fe611ade565b60606000610552611b1d565b6010549091506001810167ffffffffffffffff8111801561057257600080fd5b506040519080825280602002602001820160405280156105ac57816020015b610599612f1b565b8152602001906001900390816105915790505b50925060005b818110156108b0576000601082815481106105c957fe5b60009182526020822060059091020180546040516370a0823160e01b81529193506001600160a01b0316906370a08231906106089030906004016132ee565b60206040518083038186803b15801561062057600080fd5b505afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610658919061321e565b600283015490915060009061067e908390600160801b90046001600160801b0316611b2c565b60018401546040516246613160e11b815291925061070c916001600160a01b0390911690628cc262906106b59030906004016132ee565b60206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610705919061321e565b8290611b54565b60028401549091506001600160801b03168615610742576107408761073a8468056bc75e2d63100000611b79565b90611bb3565b015b6001600160a01b038916600090815260038501602052604081205461078a9068056bc75e2d631000009061073a9061077b908690611b2c565b6107848e611be5565b90611b79565b6001600160a01b038b1660009081526004870160205260409020549091506107b29082611b54565b8987815181106107be57fe5b6020908102919091018101510152845489516001600160a01b03909116908a90889081106107e857fe5b60209081029190910101516001600160a01b03918216905285541673d533a949740bb3306d119cc777fa900ba034cd52141561089f5761084961082a82611d8c565b6001600160a01b038c166000908152600a602052604090205490611b54565b89888151811061085557fe5b60200260200101516020018181525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b89888151811061088657fe5b60209081029190910101516001600160a01b0390911690525b5050600190930192506105b2915050565b5050505b919050565b60128054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109455780601f1061091a57610100808354040283529160200191610945565b820191906000526020600020905b81548152906001019060200180831161092857829003601f168201915b5050505050905090565b600061096361095c612003565b8484612007565b5060015b92915050565b600f546001600160a01b031681565b600d546010546001600160a01b0390911690610aa8576040805160808101825273d533a949740bb3306d119cc777fa900ba034cd5281526001600160a01b038381166020830190815260009383018481526060840185815260108054600181018255965293517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672600590960295860180546001600160a01b031990811692861692909217905591517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae673860180549093169316929092179055517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae674909201805491516001600160801b03199092166001600160801b03938416178316600160801b93909216929092021790555b6000816001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae357600080fd5b505afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b919061321e565b60105490915060001901805b82811015610cdd57604051632061aa2360e11b81526000906001600160a01b038616906340c3544690610b5e9085906004016138ef565b60206040518083038186803b158015610b7657600080fd5b505afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190612fff565b905060106040518060800160405280836001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf657600080fd5b505afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e9190612fff565b6001600160a01b03908116825293841660208083019190915260006040808401829052606093840182905285546001808201885596835291839020855160059093020180546001600160a01b03199081169389169390931781559285015183870180549093169716969096179055938201516002909401805492909101516001600160801b03199092166001600160801b03948516178416600160801b94909216939093021790915501610b27565b50505050565b60025490565b6000610cf68484846120bb565b610d6684610d02612003565b610d61856040518060600160405280602881526020016139b8602891396001600160a01b038a16600090815260016020526040812090610d40612003565b6001600160a01b0316815260208101919091526040016000205491906121d0565b612007565b5060015b9392505050565b73f403c135812408bfbe8713b5a23a04b3d48aae3181565b60026006541415610db55760405162461bcd60e51b8152600401610dac9061382b565b60405180910390fd5b60026006558015610e4757610dca33826121fc565b600d54604051631c683a1b60e11b81526001600160a01b03909116906338d0743690610dfd9084906000906004016138f8565b600060405180830381600087803b158015610e1757600080fd5b505af1158015610e2b573d6000803e3d6000fd5b5050600c54610e4792506001600160a01b0316905033836122de565b336001600160a01b03167f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5826000604051610e839291906138f8565b60405180910390a2506001600655565b601290565b6000610963610ea5612003565b84610d618560016000610eb6612003565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611b54565b60026006541415610f095760405162461bcd60e51b8152600401610dac9061382b565b60026006558015610f9b57610f1e33826121fc565b600d54604051636197390160e11b81526001600160a01b039091169063c32e720290610f519084906000906004016138f8565b600060405180830381600087803b158015610f6b57600080fd5b505af1158015610f7f573d6000803e3d6000fd5b5050600b54610f9b92506001600160a01b0316905033836122de565b336001600160a01b03167f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5826001604051610e839291906138f8565b600061096782611be5565b600b546001600160a01b031681565b601154610100900460ff16156110195760405162461bcd60e51b8152600401610dac90613622565b601180546201000033810262010000600160b01b0319909216919091179182905560405191046001600160a01b0316906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156110aa57600080fd5b505afa1580156110be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110e6919081019061316b565b6040516020016110f69190613276565b6040516020818303038152906040526012908051906020019061111a929190612f32565b50836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611190919081019061316b565b6040516020016111a091906132b4565b604051602081830303815290604052601390805190602001906111c4929190612f32565b506011805461ffff1916610100179055600b80546001600160a01b038088166001600160a01b031992831617909255600c8054878416908316179055600d8054868416908316179055600e849055600f805490911673f5bce5077908a1b7370b9ae04adc565ebd64396617905581161561128457601480546001810182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319166001600160a01b0383161790555b61128c61097c565b6112946115fb565b5050505050565b601481815481106112a857fe5b6000918252602090912001546001600160a01b0316905081565b73d533a949740bb3306d119cc777fa900ba034cd5281565b600260065414156112fd5760405162461bcd60e51b8152600401610dac9061382b565b600260065560115460ff16156113255760405162461bcd60e51b8152600401610dac90613744565b81156113df576113358183612339565b600b5461134d906001600160a01b03163330856123ed565b600e546040516321d0683360e11b815273f403c135812408bfbe8713b5a23a04b3d48aae31916343a0d0669161138b91908690600190600401613908565b602060405180830381600087803b1580156113a557600080fd5b505af11580156113b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dd919061314b565b505b806001600160a01b0316336001600160a01b03167fb32af138549e2a71563d1f2b1f7f0a139b3cdbc83d877d13603de1c3c5fd487a8460016040516114259291906138f8565b60405180910390a350506001600655565b6001600160a01b031660009081526020819052604090205490565b6011546201000090046001600160a01b031633146114815760405162461bcd60e51b8152600401610dac90613689565b6011546040516000916201000090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36011805462010000600160b01b0319169055565b60075481565b600260065414156114fc5760405162461bcd60e51b8152600401610dac9061382b565b600260065560115460ff16156115245760405162461bcd60e51b8152600401610dac90613744565b81156115af576115348183612339565b600c5461154c906001600160a01b03163330856123ed565b600d5460405163534a7e1d60e11b81526001600160a01b039091169063a694fc3a9061157c9085906004016138ef565b600060405180830381600087803b15801561159657600080fd5b505af11580156115aa573d6000803e3d6000fd5b505050505b806001600160a01b0316336001600160a01b03167fb32af138549e2a71563d1f2b1f7f0a139b3cdbc83d877d13603de1c3c5fd487a8460006040516114259291906138f8565b60085481565b600b54611627906001600160a01b031673f403c135812408bfbe8713b5a23a04b3d48aae31600061240e565b600b54611654906001600160a01b031673f403c135812408bfbe8713b5a23a04b3d48aae3160001961240e565b600d54600c54611672916001600160a01b039182169116600061240e565b600d54600c54611691916001600160a01b03918216911660001961240e565b565b6011546201000090046001600160a01b031681565b734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b60138054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109455780601f1061091a57610100808354040283529160200191610945565b60096020526000908152604090205481565b6000610963611740612003565b84610d61856040518060600160405280602581526020016139e0602591396001600061176a612003565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906121d0565b60145490565b60006109636117ae612003565b84846120bb565b601154610100900460ff1681565b60105490565b60115460ff1681565b604080518082019091526001600160a01b0382168152600060208201526117f8906124d1565b50565b6011546201000090046001600160a01b0316331461182b5760405162461bcd60e51b8152600401610dac90613689565b6001600160a01b0381166118515760405162461bcd60e51b8152600401610dac9061352c565b60005b6014548110156118b057816001600160a01b03166014828154811061187557fe5b6000918252602090912001546001600160a01b031614156118a85760405162461bcd60e51b8152600401610dac906135fb565b600101611854565b50601480546001810182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b031681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600061199e60405180604001604052808460006002811061195a57fe5b60200201602081019061196d9190612fe3565b6001600160a01b0316815260209081019061198e9060408701908701612fe3565b6001600160a01b03169052612591565b506001919050565b600e5481565b600a6020526000908152604090205481565b600c546001600160a01b031681565b6011546201000090046001600160a01b031633146119fd5760405162461bcd60e51b8152600401610dac90613689565b6001600160a01b038116611a235760405162461bcd60e51b8152600401610dac906134a4565b6011546040516001600160a01b038084169262010000900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3601180546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60108181548110611a9a57fe5b60009182526020909120600590910201805460018201546002909201546001600160a01b0391821693509116906001600160801b0380821691600160801b90041684565b6011546201000090046001600160a01b03163314611b0e5760405162461bcd60e51b8152600401610dac90613689565b6011805460ff19166001179055565b6000611b27610ce3565b905090565b600082821115611b4e5760405162461bcd60e51b8152600401610dac9061358d565b50900390565b600082820183811015610d6a5760405162461bcd60e51b8152600401610dac90613556565b600082611b8857506000610967565b82820282848281611b9557fe5b0414610d6a5760405162461bcd60e51b8152600401610dac90613648565b6000808211611bd45760405162461bcd60e51b8152600401610dac906135c4565b818381611bdd57fe5b049392505050565b60006001600160a01b0382161580611c0a5750600f546001600160a01b038381169116145b15611c17575060006108b4565b601454611c2e57611c2782611436565b90506108b4565b6000805b601454811015611ce95760148181548110611c4957fe5b600091825260209091200154604051631c9e379b60e01b81526001600160a01b0390911690631c9e379b90611c829087906004016132ee565b60206040518083038186803b158015611c9a57600080fd5b505afa925050508015611cca575060408051601f3d908101601f19168201909252611cc79181019061321e565b60015b611cd357611ce1565b611cdd8382611b54565b9250505b600101611c32565b50600f54604051630acc462360e31b81526000916001600160a01b031690635662311890611d1f903090869086906004016133a8565b60206040518083038186803b158015611d3757600080fd5b505afa158015611d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6f919061321e565b9050611d8481611d7e86611436565b90611b54565b949350505050565b600080734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ddc57600080fd5b505afa158015611df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e14919061321e565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b031663aa74e6226040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6557600080fd5b505afa158015611e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9d919061321e565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b0316631f96e76f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611eee57600080fd5b505afa158015611f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f26919061321e565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b031663d5abeb016040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7757600080fd5b505afa158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf919061321e565b90506000838581611fbc57fe5b04905082811015611ff6578083038388820281611fd557fe5b04975085830380891115611fe7578098505b889750505050505050506108b4565b5060009695505050505050565b3390565b6001600160a01b03831661202d5760405162461bcd60e51b8152600401610dac90613766565b6001600160a01b0382166120535760405162461bcd60e51b8152600401610dac906134ea565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906120ae9085906138ef565b60405180910390a3505050565b6001600160a01b0383166120e15760405162461bcd60e51b8152600401610dac906136ff565b6001600160a01b0382166121075760405162461bcd60e51b8152600401610dac90613461565b61211283838361266b565b61214f81604051806060016040528060268152602001613992602691396001600160a01b03861660009081526020819052604090205491906121d0565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461217e9082611b54565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120ae9085906138ef565b600081848411156121f45760405162461bcd60e51b8152600401610dac919061342e565b505050900390565b6001600160a01b0382166122225760405162461bcd60e51b8152600401610dac906136be565b61222e8260008361266b565b61226b81604051806060016040528060228152602001613970602291396001600160a01b03851660009081526020819052604090205491906121d0565b6001600160a01b0383166000908152602081905260409020556002546122919082611b2c565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906122d29085906138ef565b60405180910390a35050565b6123348363a9059cbb60e01b84846040516024016122fd92919061338f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612692565b505050565b6001600160a01b03821661235f5760405162461bcd60e51b8152600401610dac906138b8565b61236b6000838361266b565b6002546123789082611b54565b6002556001600160a01b03821660009081526020819052604090205461239e9082611b54565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906122d29085906138ef565b610cdd846323b872dd60e01b8585856040516024016122fd93929190613350565b8015806124965750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906124449030908690600401613302565b60206040518083038186803b15801561245c57600080fd5b505afa158015612470573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612494919061321e565b155b6124b25760405162461bcd60e51b8152600401610dac90613862565b6123348363095ea7b360e01b84846040516024016122fd92919061338f565b60006124db611b1d565b90506124e5612fb0565b6124f68360005b6020020151611be5565b8152600d54604051637050ccd960e01b81526001600160a01b0390911690637050ccd99061252b903090600190600401613374565b600060405180830381600087803b15801561254557600080fd5b505af1158015612559573d6000803e3d6000fd5b50506010549150600090505b818110156125835761257b818685876001612721565b600101612565565b50610cdd8483856001612b46565b60115460ff16156125a1576117f8565b60006125ab611b1d565b90506125b5612fb0565b6125c08360006124ec565b81526125cd8360016124ec565b6020820152600d54604051637050ccd960e01b81526001600160a01b0390911690637050ccd990612605903090600190600401613374565b600060405180830381600087803b15801561261f57600080fd5b505af1158015612633573d6000803e3d6000fd5b50506010549150600090505b8181101561265d57612655818685876000612721565b60010161263f565b50610cdd8483856000612b46565b604080518082019091526001600160a01b0380851682528316602082015261233490612591565b60606126e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e329092919063ffffffff16565b8051909150156123345780806020019051810190612705919061314b565b6123345760405162461bcd60e51b8152600401610dac906137e1565b60006010868154811061273057fe5b60009182526020822060059091020180546040516370a0823160e01b81529193506001600160a01b0316906370a082319061276f9030906004016132ee565b60206040518083038186803b15801561278757600080fd5b505afa15801561279b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bf919061321e565b90506000841180156127f1575060028201546000906127ef908390600160801b90046001600160801b0316611b2c565b115b1561285357600282015461282b90859061073a9068056bc75e2d6310000090610784908690600160801b90046001600160801b0316611b2c565b6002830180546001600160801b031981166001600160801b0391821693909301169190911790555b60005b6002811015612b0457600087826002811061286d57fe5b60200201516001600160a01b0316141561288657612afc565b600f546001600160a01b031687826002811061289e57fe5b60200201516001600160a01b031614156128b757612afc565b60008360030160008984600281106128cb57fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020549050848061290b575060028401546001600160801b031681105b15612afa578415612a235760028401546000906129a59061295f9068056bc75e2d631000009061073a90612948906001600160801b031687611b2c565b8c886002811061295457fe5b602002015190611b79565b8660040160008c876002811061297157fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002054611b5490919063ffffffff16565b90508015612a1d5760008560040160008b86600281106129c157fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002081905550612a108984600281106129f957fe5b602002015186546001600160a01b031690836122de565b612a1a8482611b2c565b93505b50612aac565b6002840154612a7090612a5e9068056bc75e2d631000009061073a90612a52906001600160801b031686611b2c565b8b876002811061295457fe5b8560040160008b866002811061297157fe5b8460040160008a8560028110612a8257fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b6002808501546001600160801b03169060038601906000908b9086908110612ad057fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b505b600101612856565b506002820154600160801b90046001600160801b03168114612b3d576002820180546001600160801b03808416600160801b0291161790555b50505050505050565b6040516370a0823160e01b8152600090734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b906370a0823190612b809030906004016132ee565b60206040518083038186803b158015612b9857600080fd5b505afa158015612bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd0919061321e565b90506000612be960085483611b2c90919063ffffffff16565b9050600084118015612bfb5750600081115b15612c2257612c178461073a8368056bc75e2d63100000611b79565b600754016007819055505b60005b6002811015612e1a576000878260028110612c3c57fe5b60200201516001600160a01b03161415612c5557612e12565b600f546001600160a01b0316878260028110612c6d57fe5b60200201516001600160a01b03161415612c8657612e12565b600060096000898460028110612c9857fe5b60200201516001600160a01b03166001600160a01b031681526020019081526020016000205490508480612ccd575060075481105b15612e10576000612d0c612cfc68056bc75e2d6310000061073a61294886600754611b2c90919063ffffffff16565b600a60008c876002811061297157fe5b90508515612d97578015612d92576000600a60008b8660028110612d2c57fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002081905550612d85898460028110612d6457fe5b6020020151734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b90836122de565b612d8f8582611b2c565b94505b612dd2565b80600a60008b8660028110612da857fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b600754600960008b8660028110612de557fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002081905550505b505b600101612c25565b506008548214612e2a5760088290555b505050505050565b6060611d84848460008585612e4685612edc565b612e625760405162461bcd60e51b8152600401610dac906137aa565b60006060866001600160a01b03168587604051612e7f919061325a565b60006040518083038185875af1925050503d8060008114612ebc576040519150601f19603f3d011682016040523d82523d6000602084013e612ec1565b606091505b5091509150612ed1828286612ee2565b979650505050505050565b3b151590565b60608315612ef1575081610d6a565b825115612f015782518084602001fd5b8160405162461bcd60e51b8152600401610dac919061342e565b604080518082019091526000808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f7357805160ff1916838001178555612fa0565b82800160010185558215612fa0579182015b82811115612fa0578251825591602001919060010190612f85565b50612fac929150612fce565b5090565b60405180604001604052806002906020820280368337509192915050565b5b80821115612fac5760008155600101612fcf565b600060208284031215612ff4578081fd5b8135610d6a8161395a565b600060208284031215613010578081fd5b8151610d6a8161395a565b6000806040838503121561302d578081fd5b82356130388161395a565b915060208301356130488161395a565b809150509250929050565b600080600080600060a0868803121561306a578081fd5b85356130758161395a565b945060208601356130858161395a565b935060408601356130958161395a565b92506060860135915060808601356130ac8161395a565b809150509295509295909350565b6000806000606084860312156130ce578283fd5b83356130d98161395a565b925060208401356130e98161395a565b929592945050506040919091013590565b6000806040838503121561310c578182fd5b82356131178161395a565b946020939093013593505050565b600060408284031215613136578081fd5b82604083011115613145578081fd5b50919050565b60006020828403121561315c578081fd5b81518015158114610d6a578182fd5b60006020828403121561317c578081fd5b815167ffffffffffffffff80821115613193578283fd5b818401915084601f8301126131a6578283fd5b8151818111156131b4578384fd5b604051601f8201601f1916810160200183811182821017156131d4578586fd5b6040528181528382016020018710156131eb578485fd5b6131fc82602083016020870161392e565b9695505050505050565b600060208284031215613217578081fd5b5035919050565b60006020828403121561322f578081fd5b5051919050565b60008060408385031215613248578182fd5b8235915060208301356130488161395a565b6000825161326c81846020870161392e565b9190910192915050565b600066029ba30b5b2b2160cd1b8252825161329881600785016020870161392e565b64204162726160d81b6007939091019283015250600c01919050565b60006273746b60e81b825282516132d281600385016020870161392e565b642d6162726160d81b6003939091019283015250600801919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526001600160801b039081166040830152909116606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b602080825282518282018190526000919060409081850190868401855b8281101561341657815180516001600160a01b031685528601518685015292840192908501906001016133e8565b5091979650505050505050565b901515815260200190565b600060208252825180602084015261344d81604085016020870161392e565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526010908201526f34b73b30b634b21031b0bab6323937b760811b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600d908201526c185b1c9958591e481859191959609a1b604082015260600190565b6020808252600c908201526b185b1c9958591e481a5b9a5d60a21b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526008908201526739b43aba3237bbb760c11b604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b9182521515602082015260400190565b92835260208301919091521515604082015260600190565b60ff91909116815260200190565b60005b83811015613949578181015183820152602001613931565b83811115610cdd5750506000910152565b6001600160a01b03811681146117f857600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212204408f893dbd56388a73acc33f1792238c0cab5860d2d67c6a73317858360645a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027e5760003560e01c80637c93fa621161015c578063bf86d690116100ce578063e529ee9511610087578063e529ee95146104e5578063e6d223b1146104ed578063e89133b214610500578063f2fde38b14610508578063f301af421461051b578063fc0e74d11461053e5761027e565b8063bf86d69014610489578063c00007b014610491578063c3ff0a5b146104a4578063cc7d510e146104b7578063dd62ed3e146104bf578063e2aecded146104d25761027e565b80639a04dbc7116101205780639a04dbc714610438578063a457c2d71461044b578063a52e19a51461045e578063a9059cbb14610466578063b145a5b814610479578063b95c5746146104815761027e565b80637c93fa62146104105780638757b15b146104185780638da5cb5b14610420578063923c1d611461042857806395d89b41146104305761027e565b80633969dfb4116101f55780636a4874a1116101b95780636a4874a1146103bf5780636e553f65146103c757806370a08231146103da578063715018a6146103ed57806376addb19146103f55780637acb7757146103fd5761027e565b80633969dfb41461036b5780634b0ee02a1461037e5780634f39059c14610391578063530b97a4146103995780635626265c146103ac5761027e565b806318160ddd1161024757806318160ddd1461030057806323b872dd146103155780632cdacb50146103285780632e1a7d4d14610330578063313ce5671461034357806339509351146103585761027e565b80628cc2621461028357806306fdde03146102ac578063095ea7b3146102c15780630bece79c146102e157806314d6aed0146102f6575b600080fd5b610296610291366004612fe3565b610546565b6040516102a391906133cb565b60405180910390f35b6102b46108b9565b6040516102a3919061342e565b6102d46102cf3660046130fa565b61094f565b6040516102a39190613423565b6102e961096d565b6040516102a391906132ee565b6102fe61097c565b005b610308610ce3565b6040516102a391906138ef565b6102d46103233660046130ba565b610ce9565b6102e9610d71565b6102fe61033e366004613206565b610d89565b61034b610e93565b6040516102a39190613920565b6102d46103663660046130fa565b610e98565b6102fe610379366004613206565b610ee6565b61030861038c366004612fe3565b610fd7565b6102e9610fe2565b6102fe6103a7366004613053565b610ff1565b6102e96103ba366004613206565b61129b565b6102e96112c2565b6102fe6103d5366004613236565b6112da565b6103086103e8366004612fe3565b611436565b6102fe611451565b6103086114d3565b6102fe61040b366004613236565b6114d9565b6103086115f5565b6102fe6115fb565b6102e9611693565b6102e96116a8565b6102b46116c0565b610308610446366004612fe3565b611721565b6102d46104593660046130fa565b611733565b61030861179b565b6102d46104743660046130fa565b6117a1565b6102d46117b5565b6103086117c3565b6102d46117c9565b6102fe61049f366004612fe3565b6117d2565b6102fe6104b2366004612fe3565b6117fb565b6102e9611903565b6103086104cd36600461301b565b611912565b6102d46104e0366004613125565b61193d565b6103086119a6565b6103086104fb366004612fe3565b6119ac565b6102e96119be565b6102fe610516366004612fe3565b6119cd565b61052e610529366004613206565b611a8d565b6040516102a3949392919061331c565b6102fe611ade565b60606000610552611b1d565b6010549091506001810167ffffffffffffffff8111801561057257600080fd5b506040519080825280602002602001820160405280156105ac57816020015b610599612f1b565b8152602001906001900390816105915790505b50925060005b818110156108b0576000601082815481106105c957fe5b60009182526020822060059091020180546040516370a0823160e01b81529193506001600160a01b0316906370a08231906106089030906004016132ee565b60206040518083038186803b15801561062057600080fd5b505afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610658919061321e565b600283015490915060009061067e908390600160801b90046001600160801b0316611b2c565b60018401546040516246613160e11b815291925061070c916001600160a01b0390911690628cc262906106b59030906004016132ee565b60206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610705919061321e565b8290611b54565b60028401549091506001600160801b03168615610742576107408761073a8468056bc75e2d63100000611b79565b90611bb3565b015b6001600160a01b038916600090815260038501602052604081205461078a9068056bc75e2d631000009061073a9061077b908690611b2c565b6107848e611be5565b90611b79565b6001600160a01b038b1660009081526004870160205260409020549091506107b29082611b54565b8987815181106107be57fe5b6020908102919091018101510152845489516001600160a01b03909116908a90889081106107e857fe5b60209081029190910101516001600160a01b03918216905285541673d533a949740bb3306d119cc777fa900ba034cd52141561089f5761084961082a82611d8c565b6001600160a01b038c166000908152600a602052604090205490611b54565b89888151811061085557fe5b60200260200101516020018181525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b89888151811061088657fe5b60209081029190910101516001600160a01b0390911690525b5050600190930192506105b2915050565b5050505b919050565b60128054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109455780601f1061091a57610100808354040283529160200191610945565b820191906000526020600020905b81548152906001019060200180831161092857829003601f168201915b5050505050905090565b600061096361095c612003565b8484612007565b5060015b92915050565b600f546001600160a01b031681565b600d546010546001600160a01b0390911690610aa8576040805160808101825273d533a949740bb3306d119cc777fa900ba034cd5281526001600160a01b038381166020830190815260009383018481526060840185815260108054600181018255965293517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672600590960295860180546001600160a01b031990811692861692909217905591517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae673860180549093169316929092179055517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae674909201805491516001600160801b03199092166001600160801b03938416178316600160801b93909216929092021790555b6000816001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae357600080fd5b505afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b919061321e565b60105490915060001901805b82811015610cdd57604051632061aa2360e11b81526000906001600160a01b038616906340c3544690610b5e9085906004016138ef565b60206040518083038186803b158015610b7657600080fd5b505afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190612fff565b905060106040518060800160405280836001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf657600080fd5b505afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e9190612fff565b6001600160a01b03908116825293841660208083019190915260006040808401829052606093840182905285546001808201885596835291839020855160059093020180546001600160a01b03199081169389169390931781559285015183870180549093169716969096179055938201516002909401805492909101516001600160801b03199092166001600160801b03948516178416600160801b94909216939093021790915501610b27565b50505050565b60025490565b6000610cf68484846120bb565b610d6684610d02612003565b610d61856040518060600160405280602881526020016139b8602891396001600160a01b038a16600090815260016020526040812090610d40612003565b6001600160a01b0316815260208101919091526040016000205491906121d0565b612007565b5060015b9392505050565b73f403c135812408bfbe8713b5a23a04b3d48aae3181565b60026006541415610db55760405162461bcd60e51b8152600401610dac9061382b565b60405180910390fd5b60026006558015610e4757610dca33826121fc565b600d54604051631c683a1b60e11b81526001600160a01b03909116906338d0743690610dfd9084906000906004016138f8565b600060405180830381600087803b158015610e1757600080fd5b505af1158015610e2b573d6000803e3d6000fd5b5050600c54610e4792506001600160a01b0316905033836122de565b336001600160a01b03167f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5826000604051610e839291906138f8565b60405180910390a2506001600655565b601290565b6000610963610ea5612003565b84610d618560016000610eb6612003565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611b54565b60026006541415610f095760405162461bcd60e51b8152600401610dac9061382b565b60026006558015610f9b57610f1e33826121fc565b600d54604051636197390160e11b81526001600160a01b039091169063c32e720290610f519084906000906004016138f8565b600060405180830381600087803b158015610f6b57600080fd5b505af1158015610f7f573d6000803e3d6000fd5b5050600b54610f9b92506001600160a01b0316905033836122de565b336001600160a01b03167f2fd83d5e9f5d240bed47a97a24cf354e4047e25edc2da27b01fd95e5e8a0c9a5826001604051610e839291906138f8565b600061096782611be5565b600b546001600160a01b031681565b601154610100900460ff16156110195760405162461bcd60e51b8152600401610dac90613622565b601180546201000033810262010000600160b01b0319909216919091179182905560405191046001600160a01b0316906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156110aa57600080fd5b505afa1580156110be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110e6919081019061316b565b6040516020016110f69190613276565b6040516020818303038152906040526012908051906020019061111a929190612f32565b50836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611190919081019061316b565b6040516020016111a091906132b4565b604051602081830303815290604052601390805190602001906111c4929190612f32565b506011805461ffff1916610100179055600b80546001600160a01b038088166001600160a01b031992831617909255600c8054878416908316179055600d8054868416908316179055600e849055600f805490911673f5bce5077908a1b7370b9ae04adc565ebd64396617905581161561128457601480546001810182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319166001600160a01b0383161790555b61128c61097c565b6112946115fb565b5050505050565b601481815481106112a857fe5b6000918252602090912001546001600160a01b0316905081565b73d533a949740bb3306d119cc777fa900ba034cd5281565b600260065414156112fd5760405162461bcd60e51b8152600401610dac9061382b565b600260065560115460ff16156113255760405162461bcd60e51b8152600401610dac90613744565b81156113df576113358183612339565b600b5461134d906001600160a01b03163330856123ed565b600e546040516321d0683360e11b815273f403c135812408bfbe8713b5a23a04b3d48aae31916343a0d0669161138b91908690600190600401613908565b602060405180830381600087803b1580156113a557600080fd5b505af11580156113b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dd919061314b565b505b806001600160a01b0316336001600160a01b03167fb32af138549e2a71563d1f2b1f7f0a139b3cdbc83d877d13603de1c3c5fd487a8460016040516114259291906138f8565b60405180910390a350506001600655565b6001600160a01b031660009081526020819052604090205490565b6011546201000090046001600160a01b031633146114815760405162461bcd60e51b8152600401610dac90613689565b6011546040516000916201000090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36011805462010000600160b01b0319169055565b60075481565b600260065414156114fc5760405162461bcd60e51b8152600401610dac9061382b565b600260065560115460ff16156115245760405162461bcd60e51b8152600401610dac90613744565b81156115af576115348183612339565b600c5461154c906001600160a01b03163330856123ed565b600d5460405163534a7e1d60e11b81526001600160a01b039091169063a694fc3a9061157c9085906004016138ef565b600060405180830381600087803b15801561159657600080fd5b505af11580156115aa573d6000803e3d6000fd5b505050505b806001600160a01b0316336001600160a01b03167fb32af138549e2a71563d1f2b1f7f0a139b3cdbc83d877d13603de1c3c5fd487a8460006040516114259291906138f8565b60085481565b600b54611627906001600160a01b031673f403c135812408bfbe8713b5a23a04b3d48aae31600061240e565b600b54611654906001600160a01b031673f403c135812408bfbe8713b5a23a04b3d48aae3160001961240e565b600d54600c54611672916001600160a01b039182169116600061240e565b600d54600c54611691916001600160a01b03918216911660001961240e565b565b6011546201000090046001600160a01b031681565b734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b60138054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109455780601f1061091a57610100808354040283529160200191610945565b60096020526000908152604090205481565b6000610963611740612003565b84610d61856040518060600160405280602581526020016139e0602591396001600061176a612003565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906121d0565b60145490565b60006109636117ae612003565b84846120bb565b601154610100900460ff1681565b60105490565b60115460ff1681565b604080518082019091526001600160a01b0382168152600060208201526117f8906124d1565b50565b6011546201000090046001600160a01b0316331461182b5760405162461bcd60e51b8152600401610dac90613689565b6001600160a01b0381166118515760405162461bcd60e51b8152600401610dac9061352c565b60005b6014548110156118b057816001600160a01b03166014828154811061187557fe5b6000918252602090912001546001600160a01b031614156118a85760405162461bcd60e51b8152600401610dac906135fb565b600101611854565b50601480546001810182556000919091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319166001600160a01b0392909216919091179055565b600d546001600160a01b031681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600061199e60405180604001604052808460006002811061195a57fe5b60200201602081019061196d9190612fe3565b6001600160a01b0316815260209081019061198e9060408701908701612fe3565b6001600160a01b03169052612591565b506001919050565b600e5481565b600a6020526000908152604090205481565b600c546001600160a01b031681565b6011546201000090046001600160a01b031633146119fd5760405162461bcd60e51b8152600401610dac90613689565b6001600160a01b038116611a235760405162461bcd60e51b8152600401610dac906134a4565b6011546040516001600160a01b038084169262010000900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3601180546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60108181548110611a9a57fe5b60009182526020909120600590910201805460018201546002909201546001600160a01b0391821693509116906001600160801b0380821691600160801b90041684565b6011546201000090046001600160a01b03163314611b0e5760405162461bcd60e51b8152600401610dac90613689565b6011805460ff19166001179055565b6000611b27610ce3565b905090565b600082821115611b4e5760405162461bcd60e51b8152600401610dac9061358d565b50900390565b600082820183811015610d6a5760405162461bcd60e51b8152600401610dac90613556565b600082611b8857506000610967565b82820282848281611b9557fe5b0414610d6a5760405162461bcd60e51b8152600401610dac90613648565b6000808211611bd45760405162461bcd60e51b8152600401610dac906135c4565b818381611bdd57fe5b049392505050565b60006001600160a01b0382161580611c0a5750600f546001600160a01b038381169116145b15611c17575060006108b4565b601454611c2e57611c2782611436565b90506108b4565b6000805b601454811015611ce95760148181548110611c4957fe5b600091825260209091200154604051631c9e379b60e01b81526001600160a01b0390911690631c9e379b90611c829087906004016132ee565b60206040518083038186803b158015611c9a57600080fd5b505afa925050508015611cca575060408051601f3d908101601f19168201909252611cc79181019061321e565b60015b611cd357611ce1565b611cdd8382611b54565b9250505b600101611c32565b50600f54604051630acc462360e31b81526000916001600160a01b031690635662311890611d1f903090869086906004016133a8565b60206040518083038186803b158015611d3757600080fd5b505afa158015611d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6f919061321e565b9050611d8481611d7e86611436565b90611b54565b949350505050565b600080734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ddc57600080fd5b505afa158015611df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e14919061321e565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b031663aa74e6226040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6557600080fd5b505afa158015611e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9d919061321e565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b0316631f96e76f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611eee57600080fd5b505afa158015611f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f26919061321e565b90506000734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b6001600160a01b031663d5abeb016040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7757600080fd5b505afa158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf919061321e565b90506000838581611fbc57fe5b04905082811015611ff6578083038388820281611fd557fe5b04975085830380891115611fe7578098505b889750505050505050506108b4565b5060009695505050505050565b3390565b6001600160a01b03831661202d5760405162461bcd60e51b8152600401610dac90613766565b6001600160a01b0382166120535760405162461bcd60e51b8152600401610dac906134ea565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906120ae9085906138ef565b60405180910390a3505050565b6001600160a01b0383166120e15760405162461bcd60e51b8152600401610dac906136ff565b6001600160a01b0382166121075760405162461bcd60e51b8152600401610dac90613461565b61211283838361266b565b61214f81604051806060016040528060268152602001613992602691396001600160a01b03861660009081526020819052604090205491906121d0565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461217e9082611b54565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120ae9085906138ef565b600081848411156121f45760405162461bcd60e51b8152600401610dac919061342e565b505050900390565b6001600160a01b0382166122225760405162461bcd60e51b8152600401610dac906136be565b61222e8260008361266b565b61226b81604051806060016040528060228152602001613970602291396001600160a01b03851660009081526020819052604090205491906121d0565b6001600160a01b0383166000908152602081905260409020556002546122919082611b2c565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906122d29085906138ef565b60405180910390a35050565b6123348363a9059cbb60e01b84846040516024016122fd92919061338f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612692565b505050565b6001600160a01b03821661235f5760405162461bcd60e51b8152600401610dac906138b8565b61236b6000838361266b565b6002546123789082611b54565b6002556001600160a01b03821660009081526020819052604090205461239e9082611b54565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906122d29085906138ef565b610cdd846323b872dd60e01b8585856040516024016122fd93929190613350565b8015806124965750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906124449030908690600401613302565b60206040518083038186803b15801561245c57600080fd5b505afa158015612470573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612494919061321e565b155b6124b25760405162461bcd60e51b8152600401610dac90613862565b6123348363095ea7b360e01b84846040516024016122fd92919061338f565b60006124db611b1d565b90506124e5612fb0565b6124f68360005b6020020151611be5565b8152600d54604051637050ccd960e01b81526001600160a01b0390911690637050ccd99061252b903090600190600401613374565b600060405180830381600087803b15801561254557600080fd5b505af1158015612559573d6000803e3d6000fd5b50506010549150600090505b818110156125835761257b818685876001612721565b600101612565565b50610cdd8483856001612b46565b60115460ff16156125a1576117f8565b60006125ab611b1d565b90506125b5612fb0565b6125c08360006124ec565b81526125cd8360016124ec565b6020820152600d54604051637050ccd960e01b81526001600160a01b0390911690637050ccd990612605903090600190600401613374565b600060405180830381600087803b15801561261f57600080fd5b505af1158015612633573d6000803e3d6000fd5b50506010549150600090505b8181101561265d57612655818685876000612721565b60010161263f565b50610cdd8483856000612b46565b604080518082019091526001600160a01b0380851682528316602082015261233490612591565b60606126e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e329092919063ffffffff16565b8051909150156123345780806020019051810190612705919061314b565b6123345760405162461bcd60e51b8152600401610dac906137e1565b60006010868154811061273057fe5b60009182526020822060059091020180546040516370a0823160e01b81529193506001600160a01b0316906370a082319061276f9030906004016132ee565b60206040518083038186803b15801561278757600080fd5b505afa15801561279b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127bf919061321e565b90506000841180156127f1575060028201546000906127ef908390600160801b90046001600160801b0316611b2c565b115b1561285357600282015461282b90859061073a9068056bc75e2d6310000090610784908690600160801b90046001600160801b0316611b2c565b6002830180546001600160801b031981166001600160801b0391821693909301169190911790555b60005b6002811015612b0457600087826002811061286d57fe5b60200201516001600160a01b0316141561288657612afc565b600f546001600160a01b031687826002811061289e57fe5b60200201516001600160a01b031614156128b757612afc565b60008360030160008984600281106128cb57fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020549050848061290b575060028401546001600160801b031681105b15612afa578415612a235760028401546000906129a59061295f9068056bc75e2d631000009061073a90612948906001600160801b031687611b2c565b8c886002811061295457fe5b602002015190611b79565b8660040160008c876002811061297157fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002054611b5490919063ffffffff16565b90508015612a1d5760008560040160008b86600281106129c157fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002081905550612a108984600281106129f957fe5b602002015186546001600160a01b031690836122de565b612a1a8482611b2c565b93505b50612aac565b6002840154612a7090612a5e9068056bc75e2d631000009061073a90612a52906001600160801b031686611b2c565b8b876002811061295457fe5b8560040160008b866002811061297157fe5b8460040160008a8560028110612a8257fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b6002808501546001600160801b03169060038601906000908b9086908110612ad057fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b505b600101612856565b506002820154600160801b90046001600160801b03168114612b3d576002820180546001600160801b03808416600160801b0291161790555b50505050505050565b6040516370a0823160e01b8152600090734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b906370a0823190612b809030906004016132ee565b60206040518083038186803b158015612b9857600080fd5b505afa158015612bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd0919061321e565b90506000612be960085483611b2c90919063ffffffff16565b9050600084118015612bfb5750600081115b15612c2257612c178461073a8368056bc75e2d63100000611b79565b600754016007819055505b60005b6002811015612e1a576000878260028110612c3c57fe5b60200201516001600160a01b03161415612c5557612e12565b600f546001600160a01b0316878260028110612c6d57fe5b60200201516001600160a01b03161415612c8657612e12565b600060096000898460028110612c9857fe5b60200201516001600160a01b03166001600160a01b031681526020019081526020016000205490508480612ccd575060075481105b15612e10576000612d0c612cfc68056bc75e2d6310000061073a61294886600754611b2c90919063ffffffff16565b600a60008c876002811061297157fe5b90508515612d97578015612d92576000600a60008b8660028110612d2c57fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002081905550612d85898460028110612d6457fe5b6020020151734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b90836122de565b612d8f8582611b2c565b94505b612dd2565b80600a60008b8660028110612da857fe5b60200201516001600160a01b03166001600160a01b03168152602001908152602001600020819055505b600754600960008b8660028110612de557fe5b60200201516001600160a01b03166001600160a01b0316815260200190815260200160002081905550505b505b600101612c25565b506008548214612e2a5760088290555b505050505050565b6060611d84848460008585612e4685612edc565b612e625760405162461bcd60e51b8152600401610dac906137aa565b60006060866001600160a01b03168587604051612e7f919061325a565b60006040518083038185875af1925050503d8060008114612ebc576040519150601f19603f3d011682016040523d82523d6000602084013e612ec1565b606091505b5091509150612ed1828286612ee2565b979650505050505050565b3b151590565b60608315612ef1575081610d6a565b825115612f015782518084602001fd5b8160405162461bcd60e51b8152600401610dac919061342e565b604080518082019091526000808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612f7357805160ff1916838001178555612fa0565b82800160010185558215612fa0579182015b82811115612fa0578251825591602001919060010190612f85565b50612fac929150612fce565b5090565b60405180604001604052806002906020820280368337509192915050565b5b80821115612fac5760008155600101612fcf565b600060208284031215612ff4578081fd5b8135610d6a8161395a565b600060208284031215613010578081fd5b8151610d6a8161395a565b6000806040838503121561302d578081fd5b82356130388161395a565b915060208301356130488161395a565b809150509250929050565b600080600080600060a0868803121561306a578081fd5b85356130758161395a565b945060208601356130858161395a565b935060408601356130958161395a565b92506060860135915060808601356130ac8161395a565b809150509295509295909350565b6000806000606084860312156130ce578283fd5b83356130d98161395a565b925060208401356130e98161395a565b929592945050506040919091013590565b6000806040838503121561310c578182fd5b82356131178161395a565b946020939093013593505050565b600060408284031215613136578081fd5b82604083011115613145578081fd5b50919050565b60006020828403121561315c578081fd5b81518015158114610d6a578182fd5b60006020828403121561317c578081fd5b815167ffffffffffffffff80821115613193578283fd5b818401915084601f8301126131a6578283fd5b8151818111156131b4578384fd5b604051601f8201601f1916810160200183811182821017156131d4578586fd5b6040528181528382016020018710156131eb578485fd5b6131fc82602083016020870161392e565b9695505050505050565b600060208284031215613217578081fd5b5035919050565b60006020828403121561322f578081fd5b5051919050565b60008060408385031215613248578182fd5b8235915060208301356130488161395a565b6000825161326c81846020870161392e565b9190910192915050565b600066029ba30b5b2b2160cd1b8252825161329881600785016020870161392e565b64204162726160d81b6007939091019283015250600c01919050565b60006273746b60e81b825282516132d281600385016020870161392e565b642d6162726160d81b6003939091019283015250600801919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0394851681529290931660208301526001600160801b039081166040830152909116606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b602080825282518282018190526000919060409081850190868401855b8281101561341657815180516001600160a01b031685528601518685015292840192908501906001016133e8565b5091979650505050505050565b901515815260200190565b600060208252825180602084015261344d81604085016020870161392e565b601f01601f19169190910160400192915050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526010908201526f34b73b30b634b21031b0bab6323937b760811b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600d908201526c185b1c9958591e481859191959609a1b604082015260600190565b6020808252600c908201526b185b1c9958591e481a5b9a5d60a21b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526008908201526739b43aba3237bbb760c11b604082015260600190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b9182521515602082015260400190565b92835260208301919091521515604082015260600190565b60ff91909116815260200190565b60005b83811015613949578181015183820152602001613931565b83811115610cdd5750506000910152565b6001600160a01b03811681146117f857600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212204408f893dbd56388a73acc33f1792238c0cab5860d2d67c6a73317858360645a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1179,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1185,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1187,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1189,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1191,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1193,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 1674,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1740,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "cvx_reward_integral",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1742,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "cvx_reward_remaining",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1746,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "cvx_reward_integral_for",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1750,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "cvx_claimable_reward",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1770,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "curveToken",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1772,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "convexToken",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 1774,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "convexPool",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 1776,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "convexPoolId",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1778,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "collateralVault",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 1781,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "rewards",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_struct(RewardType)1738_storage)dyn_storage"
      },
      {
        "astId": 1783,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "isShutdown",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 1785,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "isInit",
        "offset": 1,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 1787,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "owner",
        "offset": 2,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 1789,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "_tokenname",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 1791,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "_tokensymbol",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 3216,
        "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
        "label": "cauldrons",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardType)1738_storage)dyn_storage": {
        "base": "t_struct(RewardType)1738_storage",
        "encoding": "dynamic_array",
        "label": "struct ConvexStakingWrapper.RewardType[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RewardType)1738_storage": {
        "encoding": "inplace",
        "label": "struct ConvexStakingWrapper.RewardType",
        "members": [
          {
            "astId": 1723,
            "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
            "label": "reward_token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1725,
            "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
            "label": "reward_pool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1727,
            "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
            "label": "reward_integral",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 1729,
            "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
            "label": "reward_remaining",
            "offset": 16,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 1733,
            "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
            "label": "reward_integral_for",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1737,
            "contract": "contracts/convex/ConvexStakingWrapperAbra.sol:ConvexStakingWrapperAbra",
            "label": "claimable_reward",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}