{
  "address": "0xA454406bE7690C78ee96F99790a8b509460854eA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICurveVoter",
          "name": "_curveVoter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientOutput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV3",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV3POOL",
      "outputs": [
        {
          "internalType": "contract CurveThreePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRVETH",
      "outputs": [
        {
          "internalType": "contract CurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRICRYPTO",
      "outputs": [
        {
          "internalType": "contract CurveThreeCryptoPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract Tether",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedHarvesters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveVoter",
      "outputs": [
        {
          "internalType": "contract ICurveVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "harvestAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48ab7c0870b4c3caf902e514e16d818701d7ba99247d1adecf715a19cc2ea6cf",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0xA454406bE7690C78ee96F99790a8b509460854eA",
    "transactionIndex": 370,
    "gasUsed": "761169",
    "logsBloom": "0x
    "blockHash": "0x2f0a6e9b3c3dd4b20a9325a417be3762a1bd394c3a11f2ee0b1126a68ff908fb",
    "transactionHash": "0x48ab7c0870b4c3caf902e514e16d818701d7ba99247d1adecf715a19cc2ea6cf",
    "logs": [
      {
        "transactionIndex": 370,
        "blockNumber": 14666471,
        "transactionHash": "0x48ab7c0870b4c3caf902e514e16d818701d7ba99247d1adecf715a19cc2ea6cf",
        "address": "0xA454406bE7690C78ee96F99790a8b509460854eA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3"
        ],
        "data": "0x",
        "logIndex": 478,
        "blockHash": "0x2f0a6e9b3c3dd4b20a9325a417be3762a1bd394c3a11f2ee0b1126a68ff908fb"
      },
      {
        "transactionIndex": 370,
        "blockNumber": 14666471,
        "transactionHash": "0x48ab7c0870b4c3caf902e514e16d818701d7ba99247d1adecf715a19cc2ea6cf",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a454406be7690c78ee96f99790a8b509460854ea",
          "0x000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae46"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 479,
        "blockHash": "0x2f0a6e9b3c3dd4b20a9325a417be3762a1bd394c3a11f2ee0b1126a68ff908fb"
      },
      {
        "transactionIndex": 370,
        "blockNumber": 14666471,
        "transactionHash": "0x48ab7c0870b4c3caf902e514e16d818701d7ba99247d1adecf715a19cc2ea6cf",
        "address": "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a454406be7690c78ee96f99790a8b509460854ea",
          "0x0000000000000000000000008301ae4fc9c624d1d396cbdaa1ed877821d7c511"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 480,
        "blockHash": "0x2f0a6e9b3c3dd4b20a9325a417be3762a1bd394c3a11f2ee0b1126a68ff908fb"
      }
    ],
    "blockNumber": 14666471,
    "cumulativeGasUsed": "26475772",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x129149DC63F5778a41f619Bb36212566ac54eA45"
  ],
  "numDeployments": 2,
  "solcInputHash": "77aa9cc56d2fba9fc473de8e3e4a9c8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICurveVoter\",\"name\":\"_curveVoter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV3\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV3POOL\",\"outputs\":[{\"internalType\":\"contract CurveThreePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRVETH\",\"outputs\":[{\"internalType\":\"contract CurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRICRYPTO\",\"outputs\":[{\"internalType\":\"contract CurveThreeCryptoPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract Tether\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedHarvesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveVoter\",\"outputs\":[{\"internalType\":\"contract ICurveVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"harvestAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/magic-crv/RewardHarvester.sol\":\"RewardHarvester\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":690},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/Tether.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface Tether {\\r\\n    function approve(address spender, uint256 value) external;\\r\\n\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9f87988f22ccee1ce4ff100860b06f5be10583695be35231a763b4c3dc4164c8\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable func-name-mixedcase, var-name-mixedcase\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface CurvePool {\\r\\n    function exchange_underlying(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function exchange(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function exchange(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function get_dy_underlying(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function get_dy(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address _spender, uint256 _value) external returns (bool);\\r\\n\\r\\n    function add_liquidity(uint256[2] memory amounts, uint256 _min_mint_amount) external;\\r\\n\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 _min_mint_amount) external;\\r\\n\\r\\n    function add_liquidity(uint256[4] memory amounts, uint256 _min_mint_amount) external;\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 tokenAmount,\\r\\n        int128 i,\\r\\n        uint256 min_amount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 tokenAmount,\\r\\n        uint256 i,\\r\\n        uint256 min_amount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 tokenAmount,\\r\\n        int128 i,\\r\\n        uint256 min_amount,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x93216b95006cd4cc2359e1cababd9eab4fdc53ca1618a71d37b788d381b0d4a4\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveThreeCryptoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface CurveThreeCryptoPool {\\r\\n    function exchange(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) payable external;\\r\\n\\r\\n    function get_dy(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 _min_mint_amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x94457327f3c13368c0d4fe227fd66f692b7bd7de3f312da99d49fa813125eb99\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurveThreePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface CurveThreePool {\\r\\n    function exchange(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy\\r\\n    ) external;\\r\\n\\r\\n    function get_dy_underlying(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function get_dy(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function add_liquidity(uint256[3] memory amounts, uint256 _min_mint_amount) external;\\r\\n\\r\\n    function remove_liquidity_one_coin(\\r\\n        uint256 amount,\\r\\n        int128 i,\\r\\n        uint256 minAmount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc0d668f5cd2dfb6de5c8791c2ba99beafbb418f4dd39e3ace237bdcf914aa85c\",\"license\":\"MIT\"},\"contracts/magic-crv/RewardHarvester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable func-name-mixedcase\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/Tether.sol\\\";\\r\\nimport \\\"../interfaces/curve/ICurveThreeCryptoPool.sol\\\";\\r\\nimport \\\"../interfaces/curve/ICurveThreePool.sol\\\";\\r\\nimport \\\"../interfaces/curve/ICurvePool.sol\\\";\\r\\n\\r\\ninterface ICurveVoter {\\r\\n    function lock() external;\\r\\n\\r\\n    function claimAll(address recipient) external returns (uint256 amount);\\r\\n\\r\\n    function claim(address recipient) external returns (uint256 amount);\\r\\n}\\r\\n\\r\\ncontract RewardHarvester is Ownable {\\r\\n    error InsufficientOutput();\\r\\n    error NotAllowed();\\r\\n\\r\\n    ERC20 public constant CRV = ERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\\r\\n    ERC20 public constant CRV3 = ERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\r\\n    ERC20 public constant WETH = ERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n    CurveThreePool public constant CRV3POOL = CurveThreePool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\r\\n    CurvePool public constant CRVETH = CurvePool(0x8301AE4fc9c624d1D396cbDAa1ed877821D7C511);\\r\\n    Tether public constant USDT = Tether(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\r\\n    CurveThreeCryptoPool public constant TRICRYPTO = CurveThreeCryptoPool(0xD51a44d3FaE010294C616388b506AcdA1bfAAE46);\\r\\n    ICurveVoter public immutable curveVoter;\\r\\n\\r\\n    mapping(address => bool) public allowedHarvesters;\\r\\n\\r\\n    modifier onlyAllowedHarvesters() {\\r\\n        if (!allowedHarvesters[msg.sender] && msg.sender != owner()) {\\r\\n            revert NotAllowed();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(ICurveVoter _curveVoter) {\\r\\n        curveVoter = _curveVoter;\\r\\n        USDT.approve(address(TRICRYPTO), type(uint256).max);\\r\\n        WETH.approve(address(CRVETH), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function setAllowedHarvester(address account, bool allowed) external onlyOwner {\\r\\n        allowedHarvesters[account] = allowed;\\r\\n    }\\r\\n\\r\\n    function harvest(uint256 minAmountOut) external onlyAllowedHarvesters returns (uint256 amountOut) {\\r\\n        uint256 crvAmount = curveVoter.claim(address(this));\\r\\n\\r\\n        if (crvAmount != 0) {\\r\\n            amountOut = _harvest(crvAmount, minAmountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function harvestAll(uint256 minAmountOut) external onlyAllowedHarvesters returns (uint256 amountOut) {\\r\\n        uint256 crvAmount = curveVoter.claimAll(address(this));\\r\\n\\r\\n        if (crvAmount != 0) {\\r\\n            amountOut = _harvest(crvAmount, minAmountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _harvest(uint256 crvAmount, uint256 minAmountOut) private returns (uint256 amountOut) {\\r\\n        // 3CRV -> USDT\\r\\n        CRV3POOL.remove_liquidity_one_coin(crvAmount, 2, 0);\\r\\n\\r\\n        // USDT -> WETH\\r\\n        TRICRYPTO.exchange(0, 2, USDT.balanceOf(address(this)), 0);\\r\\n\\r\\n        // WETH -> CRV\\r\\n        amountOut = CRVETH.exchange(0, 1, WETH.balanceOf(address(this)), 0);\\r\\n\\r\\n        if (amountOut < minAmountOut) {\\r\\n            revert InsufficientOutput();\\r\\n        }\\r\\n\\r\\n        CRV.transfer(address(curveVoter), amountOut);\\r\\n        curveVoter.lock();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc700afe5773c56c3538771594b5065a1006afd38d02d1887653344dcd1c54c5f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610d70380380610d7083398101604081905261002f916101ad565b6100383361015d565b6001600160a01b03811660805260405163095ea7b360e01b815273d51a44d3fae010294c616388b506acda1bfaae466004820152600019602482015273dac17f958d2ee523a2206206994597c13d831ec79063095ea7b390604401600060405180830381600087803b1580156100ad57600080fd5b505af11580156100c1573d6000803e3d6000fd5b505060405163095ea7b360e01b8152738301ae4fc9c624d1d396cbdaa1ed877821d7c5116004820152600019602482015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2925063095ea7b391506044016020604051808303816000875af1158015610132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015691906101dd565b50506101ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156101bf57600080fd5b81516001600160a01b03811681146101d657600080fd5b9392505050565b6000602082840312156101ef57600080fd5b815180151581146101d657600080fd5b608051610b3a610236600039600081816101b5015281816103f4015281816104e60152818161092a01526109bb0152610b3a6000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063c54e44eb11610066578063c54e44eb14610241578063d6595f3a1461025c578063ddc632621461027d578063f2fde38b1461029057600080fd5b80638da5cb5b146101df578063945c9142146101f0578063950c7d281461020b578063ad5c46481461022657600080fd5b806345c6c193116100d357806345c6c1931461017a578063510b78d01461019557806365d2ebbf146101b0578063715018a6146101d757600080fd5b806325069aca146100fa578063367fc2fc146101325780633958f9e914610165575b600080fd5b61011573d51a44d3fae010294c616388b506acda1bfaae4681565b6040516001600160a01b0390911681526020015b60405180910390f35b610155610140366004610a4e565b60016020526000908152604090205460ff1681565b6040519015158152602001610129565b610178610173366004610a7e565b6102a3565b005b610115738301ae4fc9c624d1d396cbdaa1ed877821d7c51181565b610115736c3f90f043a72fa612cbac8115ee7e52bde6e49081565b6101157f000000000000000000000000000000000000000000000000000000000000000081565b61017861032d565b6000546001600160a01b0316610115565b61011573d533a949740bb3306d119cc777fa900ba034cd5281565b61011573bebc44782c7db0a1a60cb6fe97d0b483032ff1c781565b61011573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b61011573dac17f958d2ee523a2206206994597c13d831ec781565b61026f61026a366004610ab5565b610393565b604051908152602001610129565b61026f61028b366004610ab5565b610485565b61017861029e366004610a4e565b61051d565b6000546001600160a01b031633146103025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b6000546001600160a01b031633146103875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f9565b61039160006105e8565b565b3360009081526001602052604081205460ff161580156103be57506000546001600160a01b03163314155b156103dc57604051631eb49d6d60e11b815260040160405180910390fd5b6040516377329f3560e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906377329f35906024015b6020604051808303816000875af1158015610446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046a9190610ace565b9050801561047f5761047c8184610645565b91505b50919050565b3360009081526001602052604081205460ff161580156104b057506000546001600160a01b03163314155b156104ce57604051631eb49d6d60e11b815260040160405180910390fd5b604051630f41a04d60e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631e83409a90602401610427565b6000546001600160a01b031633146105775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f9565b6001600160a01b0381166105dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f9565b6105e5816105e8565b50565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051630d2680e960e11b815260048101839052600260248201526000604482018190529073bebc44782c7db0a1a60cb6fe97d0b483032ff1c790631a4d01d290606401600060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015273d51a44d3fae010294c616388b506acda1bfaae469250635b41b908915060009060029073dac17f958d2ee523a2206206994597c13d831ec7906370a0823190602401602060405180830381865afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190610ace565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260006064820152608401600060405180830381600087803b1580156107b557600080fd5b505af11580156107c9573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152738301ae4fc9c624d1d396cbdaa1ed877821d7c5119250635b41b908915060009060019073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a0823190602401602060405180830381865afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190610ace565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152600481019390935260248301919091526044820152600060648201526084016020604051808303816000875af11580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190610ace565b9050818110156109135760405163bb2875c360e01b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810182905273d533a949740bb3306d119cc777fa900ba034cd529063a9059cbb906044016020604051808303816000875af1158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b89190610ae7565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f83d08ba6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a1457600080fd5b505af1158015610a28573d6000803e3d6000fd5b5050505092915050565b80356001600160a01b0381168114610a4957600080fd5b919050565b600060208284031215610a6057600080fd5b610a6982610a32565b9392505050565b80151581146105e557600080fd5b60008060408385031215610a9157600080fd5b610a9a83610a32565b91506020830135610aaa81610a70565b809150509250929050565b600060208284031215610ac757600080fd5b5035919050565b600060208284031215610ae057600080fd5b5051919050565b600060208284031215610af957600080fd5b8151610a6981610a7056fea264697066735822122014a7d6c6e13f140cc46cb147189523bfafcaff7178e8279b028ba185a19cf27364736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063c54e44eb11610066578063c54e44eb14610241578063d6595f3a1461025c578063ddc632621461027d578063f2fde38b1461029057600080fd5b80638da5cb5b146101df578063945c9142146101f0578063950c7d281461020b578063ad5c46481461022657600080fd5b806345c6c193116100d357806345c6c1931461017a578063510b78d01461019557806365d2ebbf146101b0578063715018a6146101d757600080fd5b806325069aca146100fa578063367fc2fc146101325780633958f9e914610165575b600080fd5b61011573d51a44d3fae010294c616388b506acda1bfaae4681565b6040516001600160a01b0390911681526020015b60405180910390f35b610155610140366004610a4e565b60016020526000908152604090205460ff1681565b6040519015158152602001610129565b610178610173366004610a7e565b6102a3565b005b610115738301ae4fc9c624d1d396cbdaa1ed877821d7c51181565b610115736c3f90f043a72fa612cbac8115ee7e52bde6e49081565b6101157f000000000000000000000000000000000000000000000000000000000000000081565b61017861032d565b6000546001600160a01b0316610115565b61011573d533a949740bb3306d119cc777fa900ba034cd5281565b61011573bebc44782c7db0a1a60cb6fe97d0b483032ff1c781565b61011573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b61011573dac17f958d2ee523a2206206994597c13d831ec781565b61026f61026a366004610ab5565b610393565b604051908152602001610129565b61026f61028b366004610ab5565b610485565b61017861029e366004610a4e565b61051d565b6000546001600160a01b031633146103025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b6000546001600160a01b031633146103875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f9565b61039160006105e8565b565b3360009081526001602052604081205460ff161580156103be57506000546001600160a01b03163314155b156103dc57604051631eb49d6d60e11b815260040160405180910390fd5b6040516377329f3560e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906377329f35906024015b6020604051808303816000875af1158015610446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046a9190610ace565b9050801561047f5761047c8184610645565b91505b50919050565b3360009081526001602052604081205460ff161580156104b057506000546001600160a01b03163314155b156104ce57604051631eb49d6d60e11b815260040160405180910390fd5b604051630f41a04d60e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631e83409a90602401610427565b6000546001600160a01b031633146105775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f9565b6001600160a01b0381166105dc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f9565b6105e5816105e8565b50565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051630d2680e960e11b815260048101839052600260248201526000604482018190529073bebc44782c7db0a1a60cb6fe97d0b483032ff1c790631a4d01d290606401600060405180830381600087803b1580156106a357600080fd5b505af11580156106b7573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015273d51a44d3fae010294c616388b506acda1bfaae469250635b41b908915060009060029073dac17f958d2ee523a2206206994597c13d831ec7906370a0823190602401602060405180830381865afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190610ace565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260006064820152608401600060405180830381600087803b1580156107b557600080fd5b505af11580156107c9573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152738301ae4fc9c624d1d396cbdaa1ed877821d7c5119250635b41b908915060009060019073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a0823190602401602060405180830381865afa15801561083e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108629190610ace565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152600481019390935260248301919091526044820152600060648201526084016020604051808303816000875af11580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190610ace565b9050818110156109135760405163bb2875c360e01b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810182905273d533a949740bb3306d119cc777fa900ba034cd529063a9059cbb906044016020604051808303816000875af1158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b89190610ae7565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f83d08ba6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a1457600080fd5b505af1158015610a28573d6000803e3d6000fd5b5050505092915050565b80356001600160a01b0381168114610a4957600080fd5b919050565b600060208284031215610a6057600080fd5b610a6982610a32565b9392505050565b80151581146105e557600080fd5b60008060408385031215610a9157600080fd5b610a9a83610a32565b91506020830135610aaa81610a70565b809150509250929050565b600060208284031215610ac757600080fd5b5035919050565b600060208284031215610ae057600080fd5b5051919050565b600060208284031215610af957600080fd5b8151610a6981610a7056fea264697066735822122014a7d6c6e13f140cc46cb147189523bfafcaff7178e8279b028ba185a19cf27364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/magic-crv/RewardHarvester.sol:RewardHarvester",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9457,
        "contract": "contracts/magic-crv/RewardHarvester.sol:RewardHarvester",
        "label": "allowedHarvesters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}