{
  "address": "0xBd73aA17Ce60B0e83d972aB1Fb32f7cE138Ca32A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPopsicle",
          "name": "_popsicle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DEGENBOX",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM3POOL",
      "outputs": [
        {
          "internalType": "contract CurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETHUSDT",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "popsicle",
      "outputs": [
        {
          "internalType": "contract IPopsicle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapExact",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shareUsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bbc670f49bdcef07958f942bb41133375ca043383808ee37102015d9ad60abf",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0xBd73aA17Ce60B0e83d972aB1Fb32f7cE138Ca32A",
    "transactionIndex": 410,
    "gasUsed": "1140613",
    "logsBloom": "0x
    "blockHash": "0x68db69f50786ffec6e394e9b6ca528f79f7e0351a567edd0c7276584ded9bf59",
    "transactionHash": "0x9bbc670f49bdcef07958f942bb41133375ca043383808ee37102015d9ad60abf",
    "logs": [
      {
        "transactionIndex": 410,
        "blockNumber": 13850246,
        "transactionHash": "0x9bbc670f49bdcef07958f942bb41133375ca043383808ee37102015d9ad60abf",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000bd73aa17ce60b0e83d972ab1fb32f7ce138ca32a",
          "0x0000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 500,
        "blockHash": "0x68db69f50786ffec6e394e9b6ca528f79f7e0351a567edd0c7276584ded9bf59"
      }
    ],
    "blockNumber": 13850246,
    "cumulativeGasUsed": "27817821",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8d8B490fCe6Ca1A31752E7cFAFa954Bf30eB7EE2"
  ],
  "solcInputHash": "6275ba41784bca598d640e544e1be041",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPopsicle\",\"name\":\"_popsicle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEGENBOX\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM3POOL\",\"outputs\":[{\"internalType\":\"contract CurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHUSDT\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popsicle\",\"outputs\":[{\"internalType\":\"contract IPopsicle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapExact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shareUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap(address,address,address,uint256,uint256)\":{\"notice\":\"Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for at least 'amountToMin' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Returns the amount of tokens 'to' transferred to BentoBox. (The BentoBox skim function will be used by the caller to get the swapped funds).\"},\"swapExact(address,address,address,address,uint256,uint256)\":{\"notice\":\"Calculates the amount of token 'from' needed to complete the swap (amountFrom), this should be less than or equal to amountFromMax. Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for exactly 'exactAmountTo' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom). Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom). (The BentoBox skim function will be used by the caller to get the swapped funds).\"}},\"notice\":\"WETH/USDT Popsicle Swapper for Ethereum\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Liquidations/popsicle/PopsicleWETHUSDTSwapper.sol\":\"PopsicleWETHUSDTSwapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x058e0708ffdd2b04a17b96b5775d9fab8daa19d3cd37d26ce6c923679bf9cc9a\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50f187c86835070ec519acffcc259cd7900fdb85cb53333210fba9491eb65eca\",\"license\":\"AGPL-3.0-only\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBentoBoxV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IBentoBoxV1 {\\r\\n    function withdraw(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x1561033fdbd8652490026eb7127d69318ca1891ba0cdc44d012cdec052786ad6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb467f77c67070d3d5a3cbff566b1bc3e0609d65638e87b59a32cd2d085e9dd72\",\"license\":\"MIT\"},\"contracts/interfaces/IPopsicle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IPopsicle {\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function usersAmounts() external view returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function totalSupply() external view returns (uint256 amount);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256 shares, address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function tickLower() external view returns (int24);\\r\\n\\r\\n    function tickUpper() external view returns (int24);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 amount0Desired,\\r\\n        uint256 amount1Desired,\\r\\n        address to\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 shares,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xa3e2ba002593d213467004a6b3eba12b4dbc397511015d4fa13c4900b9339236\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapperGeneric.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >= 0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ISwapperGeneric {\\r\\n    /// @notice Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\r\\n    /// Swaps it for at least 'amountToMin' of token 'to'.\\r\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\r\\n    /// Returns the amount of tokens 'to' transferred to BentoBox.\\r\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\r\\n    function swap(\\r\\n        IERC20 fromToken,\\r\\n        IERC20 toToken,\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom\\r\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\r\\n\\r\\n    /// @notice Calculates the amount of token 'from' needed to complete the swap (amountFrom),\\r\\n    /// this should be less than or equal to amountFromMax.\\r\\n    /// Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\r\\n    /// Swaps it for exactly 'exactAmountTo' of token 'to'.\\r\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\r\\n    /// Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom).\\r\\n    /// Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom).\\r\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\r\\n    function swapExact(\\r\\n        IERC20 fromToken,\\r\\n        IERC20 toToken,\\r\\n        address recipient,\\r\\n        address refundTo,\\r\\n        uint256 shareFromSupplied,\\r\\n        uint256 shareToExact\\r\\n    ) external returns (uint256 shareUsed, uint256 shareReturned);\\r\\n}\\r\\n\",\"keccak256\":\"0xa570144cf506e407d9f9283278509e24015e69e15f0017f9ea7d3fe4b870b13e\",\"license\":\"MIT\"},\"contracts/interfaces/curve/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface CurvePool {\\r\\n    function exchange_underlying(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n}\",\"keccak256\":\"0xe7db9d5c09d8984531f3ea82b8121845588098f6338c756925890d71a7a7865e\",\"license\":\"MIT\"},\"contracts/swappers/Liquidations/popsicle/PopsicleWETHUSDTSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\r\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\r\\nimport \\\"../../../interfaces/ISwapperGeneric.sol\\\";\\r\\nimport \\\"../../../interfaces/IPopsicle.sol\\\";\\r\\nimport \\\"../../../interfaces/IBentoBoxV1.sol\\\";\\r\\nimport \\\"../../../interfaces/curve/ICurvePool.sol\\\";\\r\\n\\r\\n/// @notice WETH/USDT Popsicle Swapper for Ethereum\\r\\ncontract PopsicleWETHUSDTSwapper is ISwapperGeneric {\\r\\n    using SafeTransferLib for ERC20;\\r\\n\\r\\n    IBentoBoxV1 public constant DEGENBOX = IBentoBoxV1(0xd96f48665a1410C0cd669A88898ecA36B9Fc2cce);\\r\\n    CurvePool public constant MIM3POOL = CurvePool(0x5a6A4D54456819380173272A5E8E9B9904BdF41B);\\r\\n\\r\\n    IUniswapV2Pair public constant WETHUSDT = IUniswapV2Pair(0x06da0fd433C1A5d7a4faa01111c044910A184553);\\r\\n    IERC20 public constant MIM = IERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\\r\\n    IERC20 public constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n    ERC20 public constant USDT = ERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\r\\n\\r\\n    IPopsicle public immutable popsicle;\\r\\n\\r\\n    constructor(IPopsicle _popsicle) {\\r\\n        popsicle = _popsicle;\\r\\n        USDT.safeApprove(address(MIM3POOL), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function _getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) internal pure returns (uint256 amountOut) {\\r\\n        uint256 amountInWithFee = amountIn * 997;\\r\\n        uint256 numerator = amountInWithFee * reserveOut;\\r\\n        uint256 denominator = (reserveIn * 1000) + amountInWithFee;\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // Swaps to a flexible amount, from an exact input amount\\r\\n    /// @inheritdoc ISwapperGeneric\\r\\n    function swap(\\r\\n        IERC20,\\r\\n        IERC20,\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom\\r\\n    ) public override returns (uint256 extraShare, uint256 shareReturned) {\\r\\n        (uint256 amountFrom, ) = DEGENBOX.withdraw(IERC20(address(popsicle)), address(this), address(this), 0, shareFrom);\\r\\n        (uint256 wethAmount, uint256 usdtAmount) = popsicle.withdraw(amountFrom, address(this));\\r\\n\\r\\n        // WETH -> USDT\\r\\n        (uint256 reserve0, uint256 reserve1, ) = WETHUSDT.getReserves();\\r\\n        uint256 usdtFromWeth = _getAmountOut(wethAmount, reserve0, reserve1);\\r\\n        WETH.transfer(address(WETHUSDT), wethAmount);\\r\\n        WETHUSDT.swap(0, usdtFromWeth, address(this), \\\"\\\");\\r\\n        usdtAmount += usdtFromWeth;\\r\\n\\r\\n        // USDT -> MIM\\r\\n        uint256 mimFromUSDT = MIM3POOL.exchange_underlying(3, 0, usdtAmount, 0, address(DEGENBOX));\\r\\n\\r\\n        (, shareReturned) = DEGENBOX.deposit(MIM, address(DEGENBOX), recipient, mimFromUSDT, 0);\\r\\n        extraShare = shareReturned - shareToMin;\\r\\n    }\\r\\n\\r\\n    // Swaps to an exact amount, from a flexible input amount\\r\\n    /// @inheritdoc ISwapperGeneric\\r\\n    function swapExact(\\r\\n        IERC20,\\r\\n        IERC20,\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256\\r\\n    ) public pure virtual returns (uint256 shareUsed, uint256 shareReturned) {\\r\\n        return (0, 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7579eb3c1a95347cfba324541e00165d8564f088d5babad30b34692d18e9ae54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200164038038062001640833981810160405281019062000037919062000269565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000e5735a6a4d54456819380173272a5e8e9b9904bdf41b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff73dac17f958d2ee523a2206206994597c13d831ec773ffffffffffffffffffffffffffffffffffffffff16620000ec60201b62000783179092919060201c565b506200031e565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af191505062000155816200019d60201b60201c565b62000197576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200018e90620002fc565b60405180910390fd5b50505050565b60003d82620001b057806000803e806000fd5b8060208114620001cd5760008114620001df5760009250620001e4565b816000803e60005115159250620001e4565b600192505b5050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021d82620001f0565b9050919050565b6000620002318262000210565b9050919050565b620002438162000224565b81146200024f57600080fd5b50565b600081519050620002638162000238565b92915050565b600060208284031215620002825762000281620001eb565b5b6000620002928482850162000252565b91505092915050565b600082825260208201905092915050565b7f415050524f56455f4641494c4544000000000000000000000000000000000000600082015250565b6000620002e4600e836200029b565b9150620002f182620002ac565b602082019050919050565b600060208201905081810360008301526200031781620002d5565b9050919050565b6080516112f8620003486000396000818161025b015281816102cc015261035a01526112f86000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063c54e44eb11610066578063c54e44eb14610123578063daec383d14610141578063dc502dfa1461015f578063e0bc66b81461017d578063e343fe121461019b57610093565b806322a88c0914610098578063348a272a146100b65780634622be90146100d4578063ad5c464814610105575b600080fd5b6100a06101cc565b6040516100ad9190610949565b60405180910390f35b6100be6101e4565b6040516100cb9190610985565b60405180910390f35b6100ee60048036038101906100e99190610a57565b6101fc565b6040516100fc929190610af3565b60405180910390f35b61010d610211565b60405161011a9190610b3d565b60405180910390f35b61012b610229565b6040516101389190610b79565b60405180910390f35b610149610241565b6040516101569190610b3d565b60405180910390f35b610167610259565b6040516101749190610bb5565b60405180910390f35b61018561027d565b6040516101929190610bf1565b60405180910390f35b6101b560048036038101906101b09190610c0c565b610295565b6040516101c3929190610af3565b60405180910390f35b735a6a4d54456819380173272a5e8e9b9904bdf41b81565b7306da0fd433c1a5d7a4faa01111c044910a18455381565b60008060008091509150965096945050505050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b73dac17f958d2ee523a2206206994597c13d831ec781565b7399d8a9c45b2eca8864373a26d1459e3dff1e17f381565b7f000000000000000000000000000000000000000000000000000000000000000081565b73d96f48665a1410c0cd669a88898eca36b9fc2cce81565b600080600073d96f48665a1410c0cd669a88898eca36b9fc2cce73ffffffffffffffffffffffffffffffffffffffff166397da6d307f000000000000000000000000000000000000000000000000000000000000000030306000896040518663ffffffff1660e01b8152600401610310959493929190610cd1565b60408051808303816000875af115801561032e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103529190610d39565b5090506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662f714ce84306040518363ffffffff1660e01b81526004016103b2929190610d79565b60408051808303816000875af11580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190610d39565b915091506000807306da0fd433c1a5d7a4faa01111c044910a18455373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190610e24565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060006104b0858484610829565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb7306da0fd433c1a5d7a4faa01111c044910a184553876040518363ffffffff1660e01b8152600401610515929190610e77565b6020604051808303816000875af1158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190610ed8565b507306da0fd433c1a5d7a4faa01111c044910a18455373ffffffffffffffffffffffffffffffffffffffff1663022c0d9f600083306040518463ffffffff1660e01b81526004016105ab93929190610f3c565b600060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b5050505080846105e99190610fb5565b93506000735a6a4d54456819380173272a5e8e9b9904bdf41b73ffffffffffffffffffffffffffffffffffffffff166344ee19866003600088600073d96f48665a1410c0cd669a88898eca36b9fc2cce6040518663ffffffff1660e01b8152600401610659959493929190611084565b6020604051808303816000875af1158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c91906110d7565b905073d96f48665a1410c0cd669a88898eca36b9fc2cce73ffffffffffffffffffffffffffffffffffffffff166302b9446c7399d8a9c45b2eca8864373a26d1459e3dff1e17f373d96f48665a1410c0cd669a88898eca36b9fc2cce8f8560006040518663ffffffff1660e01b815260040161071c959493929190611104565b60408051808303816000875af115801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e9190610d39565b9050809850508a886107709190611157565b9850505050505050509550959350505050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af19150506107e481610881565b610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081a906111e8565b60405180910390fd5b50505050565b6000806103e58561083a9190611208565b90506000838261084a9190611208565b90506000826103e88761085d9190611208565b6108679190610fb5565b905080826108759190611291565b93505050509392505050565b60003d8261089357806000803e806000fd5b80602081146108ad57600081146108be57600092506108c3565b816000803e600051151592506108c3565b600192505b5050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061090f61090a610905846108ca565b6108ea565b6108ca565b9050919050565b6000610921826108f4565b9050919050565b600061093382610916565b9050919050565b61094381610928565b82525050565b600060208201905061095e600083018461093a565b92915050565b600061096f82610916565b9050919050565b61097f81610964565b82525050565b600060208201905061099a6000830184610976565b92915050565b600080fd5b60006109b0826108ca565b9050919050565b60006109c2826109a5565b9050919050565b6109d2816109b7565b81146109dd57600080fd5b50565b6000813590506109ef816109c9565b92915050565b6109fe816109a5565b8114610a0957600080fd5b50565b600081359050610a1b816109f5565b92915050565b6000819050919050565b610a3481610a21565b8114610a3f57600080fd5b50565b600081359050610a5181610a2b565b92915050565b60008060008060008060c08789031215610a7457610a736109a0565b5b6000610a8289828a016109e0565b9650506020610a9389828a016109e0565b9550506040610aa489828a01610a0c565b9450506060610ab589828a01610a0c565b9350506080610ac689828a01610a42565b92505060a0610ad789828a01610a42565b9150509295509295509295565b610aed81610a21565b82525050565b6000604082019050610b086000830185610ae4565b610b156020830184610ae4565b9392505050565b6000610b2782610916565b9050919050565b610b3781610b1c565b82525050565b6000602082019050610b526000830184610b2e565b92915050565b6000610b6382610916565b9050919050565b610b7381610b58565b82525050565b6000602082019050610b8e6000830184610b6a565b92915050565b6000610b9f82610916565b9050919050565b610baf81610b94565b82525050565b6000602082019050610bca6000830184610ba6565b92915050565b6000610bdb82610916565b9050919050565b610beb81610bd0565b82525050565b6000602082019050610c066000830184610be2565b92915050565b600080600080600060a08688031215610c2857610c276109a0565b5b6000610c36888289016109e0565b9550506020610c47888289016109e0565b9450506040610c5888828901610a0c565b9350506060610c6988828901610a42565b9250506080610c7a88828901610a42565b9150509295509295909350565b610c90816109a5565b82525050565b6000819050919050565b6000610cbb610cb6610cb184610c96565b6108ea565b610a21565b9050919050565b610ccb81610ca0565b82525050565b600060a082019050610ce66000830188610b2e565b610cf36020830187610c87565b610d006040830186610c87565b610d0d6060830185610cc2565b610d1a6080830184610ae4565b9695505050505050565b600081519050610d3381610a2b565b92915050565b60008060408385031215610d5057610d4f6109a0565b5b6000610d5e85828601610d24565b9250506020610d6f85828601610d24565b9150509250929050565b6000604082019050610d8e6000830185610ae4565b610d9b6020830184610c87565b9392505050565b60006dffffffffffffffffffffffffffff82169050919050565b610dc581610da2565b8114610dd057600080fd5b50565b600081519050610de281610dbc565b92915050565b600063ffffffff82169050919050565b610e0181610de8565b8114610e0c57600080fd5b50565b600081519050610e1e81610df8565b92915050565b600080600060608486031215610e3d57610e3c6109a0565b5b6000610e4b86828701610dd3565b9350506020610e5c86828701610dd3565b9250506040610e6d86828701610e0f565b9150509250925092565b6000604082019050610e8c6000830185610c87565b610e996020830184610ae4565b9392505050565b60008115159050919050565b610eb581610ea0565b8114610ec057600080fd5b50565b600081519050610ed281610eac565b92915050565b600060208284031215610eee57610eed6109a0565b5b6000610efc84828501610ec3565b91505092915050565b600082825260208201905092915050565b50565b6000610f26600083610f05565b9150610f3182610f16565b600082019050919050565b6000608082019050610f516000830186610cc2565b610f5e6020830185610ae4565b610f6b6040830184610c87565b8181036060830152610f7c81610f19565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fc082610a21565b9150610fcb83610a21565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561100057610fff610f86565b5b828201905092915050565b6000819050919050565b600081600f0b9050919050565b600061103d6110386110338461100b565b6108ea565b611015565b9050919050565b61104d81611022565b82525050565b600061106e61106961106484610c96565b6108ea565b611015565b9050919050565b61107e81611053565b82525050565b600060a0820190506110996000830188611044565b6110a66020830187611075565b6110b36040830186610ae4565b6110c06060830185610cc2565b6110cd6080830184610c87565b9695505050505050565b6000602082840312156110ed576110ec6109a0565b5b60006110fb84828501610d24565b91505092915050565b600060a0820190506111196000830188610b2e565b6111266020830187610c87565b6111336040830186610c87565b6111406060830185610ae4565b61114d6080830184610cc2565b9695505050505050565b600061116282610a21565b915061116d83610a21565b9250828210156111805761117f610f86565b5b828203905092915050565b600082825260208201905092915050565b7f415050524f56455f4641494c4544000000000000000000000000000000000000600082015250565b60006111d2600e8361118b565b91506111dd8261119c565b602082019050919050565b60006020820190508181036000830152611201816111c5565b9050919050565b600061121382610a21565b915061121e83610a21565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561125757611256610f86565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061129c82610a21565b91506112a783610a21565b9250826112b7576112b6611262565b5b82820490509291505056fea264697066735822122072a9290fcd2d358dac1ff6c697d21436b941893414c7de2fb3a3d0b2363e6e8a64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063c54e44eb11610066578063c54e44eb14610123578063daec383d14610141578063dc502dfa1461015f578063e0bc66b81461017d578063e343fe121461019b57610093565b806322a88c0914610098578063348a272a146100b65780634622be90146100d4578063ad5c464814610105575b600080fd5b6100a06101cc565b6040516100ad9190610949565b60405180910390f35b6100be6101e4565b6040516100cb9190610985565b60405180910390f35b6100ee60048036038101906100e99190610a57565b6101fc565b6040516100fc929190610af3565b60405180910390f35b61010d610211565b60405161011a9190610b3d565b60405180910390f35b61012b610229565b6040516101389190610b79565b60405180910390f35b610149610241565b6040516101569190610b3d565b60405180910390f35b610167610259565b6040516101749190610bb5565b60405180910390f35b61018561027d565b6040516101929190610bf1565b60405180910390f35b6101b560048036038101906101b09190610c0c565b610295565b6040516101c3929190610af3565b60405180910390f35b735a6a4d54456819380173272a5e8e9b9904bdf41b81565b7306da0fd433c1a5d7a4faa01111c044910a18455381565b60008060008091509150965096945050505050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b73dac17f958d2ee523a2206206994597c13d831ec781565b7399d8a9c45b2eca8864373a26d1459e3dff1e17f381565b7f000000000000000000000000000000000000000000000000000000000000000081565b73d96f48665a1410c0cd669a88898eca36b9fc2cce81565b600080600073d96f48665a1410c0cd669a88898eca36b9fc2cce73ffffffffffffffffffffffffffffffffffffffff166397da6d307f000000000000000000000000000000000000000000000000000000000000000030306000896040518663ffffffff1660e01b8152600401610310959493929190610cd1565b60408051808303816000875af115801561032e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103529190610d39565b5090506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662f714ce84306040518363ffffffff1660e01b81526004016103b2929190610d79565b60408051808303816000875af11580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190610d39565b915091506000807306da0fd433c1a5d7a4faa01111c044910a18455373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190610e24565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060006104b0858484610829565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb7306da0fd433c1a5d7a4faa01111c044910a184553876040518363ffffffff1660e01b8152600401610515929190610e77565b6020604051808303816000875af1158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190610ed8565b507306da0fd433c1a5d7a4faa01111c044910a18455373ffffffffffffffffffffffffffffffffffffffff1663022c0d9f600083306040518463ffffffff1660e01b81526004016105ab93929190610f3c565b600060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b5050505080846105e99190610fb5565b93506000735a6a4d54456819380173272a5e8e9b9904bdf41b73ffffffffffffffffffffffffffffffffffffffff166344ee19866003600088600073d96f48665a1410c0cd669a88898eca36b9fc2cce6040518663ffffffff1660e01b8152600401610659959493929190611084565b6020604051808303816000875af1158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c91906110d7565b905073d96f48665a1410c0cd669a88898eca36b9fc2cce73ffffffffffffffffffffffffffffffffffffffff166302b9446c7399d8a9c45b2eca8864373a26d1459e3dff1e17f373d96f48665a1410c0cd669a88898eca36b9fc2cce8f8560006040518663ffffffff1660e01b815260040161071c959493929190611104565b60408051808303816000875af115801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e9190610d39565b9050809850508a886107709190611157565b9850505050505050509550959350505050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201528260248201526000806044836000895af19150506107e481610881565b610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081a906111e8565b60405180910390fd5b50505050565b6000806103e58561083a9190611208565b90506000838261084a9190611208565b90506000826103e88761085d9190611208565b6108679190610fb5565b905080826108759190611291565b93505050509392505050565b60003d8261089357806000803e806000fd5b80602081146108ad57600081146108be57600092506108c3565b816000803e600051151592506108c3565b600192505b5050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061090f61090a610905846108ca565b6108ea565b6108ca565b9050919050565b6000610921826108f4565b9050919050565b600061093382610916565b9050919050565b61094381610928565b82525050565b600060208201905061095e600083018461093a565b92915050565b600061096f82610916565b9050919050565b61097f81610964565b82525050565b600060208201905061099a6000830184610976565b92915050565b600080fd5b60006109b0826108ca565b9050919050565b60006109c2826109a5565b9050919050565b6109d2816109b7565b81146109dd57600080fd5b50565b6000813590506109ef816109c9565b92915050565b6109fe816109a5565b8114610a0957600080fd5b50565b600081359050610a1b816109f5565b92915050565b6000819050919050565b610a3481610a21565b8114610a3f57600080fd5b50565b600081359050610a5181610a2b565b92915050565b60008060008060008060c08789031215610a7457610a736109a0565b5b6000610a8289828a016109e0565b9650506020610a9389828a016109e0565b9550506040610aa489828a01610a0c565b9450506060610ab589828a01610a0c565b9350506080610ac689828a01610a42565b92505060a0610ad789828a01610a42565b9150509295509295509295565b610aed81610a21565b82525050565b6000604082019050610b086000830185610ae4565b610b156020830184610ae4565b9392505050565b6000610b2782610916565b9050919050565b610b3781610b1c565b82525050565b6000602082019050610b526000830184610b2e565b92915050565b6000610b6382610916565b9050919050565b610b7381610b58565b82525050565b6000602082019050610b8e6000830184610b6a565b92915050565b6000610b9f82610916565b9050919050565b610baf81610b94565b82525050565b6000602082019050610bca6000830184610ba6565b92915050565b6000610bdb82610916565b9050919050565b610beb81610bd0565b82525050565b6000602082019050610c066000830184610be2565b92915050565b600080600080600060a08688031215610c2857610c276109a0565b5b6000610c36888289016109e0565b9550506020610c47888289016109e0565b9450506040610c5888828901610a0c565b9350506060610c6988828901610a42565b9250506080610c7a88828901610a42565b9150509295509295909350565b610c90816109a5565b82525050565b6000819050919050565b6000610cbb610cb6610cb184610c96565b6108ea565b610a21565b9050919050565b610ccb81610ca0565b82525050565b600060a082019050610ce66000830188610b2e565b610cf36020830187610c87565b610d006040830186610c87565b610d0d6060830185610cc2565b610d1a6080830184610ae4565b9695505050505050565b600081519050610d3381610a2b565b92915050565b60008060408385031215610d5057610d4f6109a0565b5b6000610d5e85828601610d24565b9250506020610d6f85828601610d24565b9150509250929050565b6000604082019050610d8e6000830185610ae4565b610d9b6020830184610c87565b9392505050565b60006dffffffffffffffffffffffffffff82169050919050565b610dc581610da2565b8114610dd057600080fd5b50565b600081519050610de281610dbc565b92915050565b600063ffffffff82169050919050565b610e0181610de8565b8114610e0c57600080fd5b50565b600081519050610e1e81610df8565b92915050565b600080600060608486031215610e3d57610e3c6109a0565b5b6000610e4b86828701610dd3565b9350506020610e5c86828701610dd3565b9250506040610e6d86828701610e0f565b9150509250925092565b6000604082019050610e8c6000830185610c87565b610e996020830184610ae4565b9392505050565b60008115159050919050565b610eb581610ea0565b8114610ec057600080fd5b50565b600081519050610ed281610eac565b92915050565b600060208284031215610eee57610eed6109a0565b5b6000610efc84828501610ec3565b91505092915050565b600082825260208201905092915050565b50565b6000610f26600083610f05565b9150610f3182610f16565b600082019050919050565b6000608082019050610f516000830186610cc2565b610f5e6020830185610ae4565b610f6b6040830184610c87565b8181036060830152610f7c81610f19565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fc082610a21565b9150610fcb83610a21565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561100057610fff610f86565b5b828201905092915050565b6000819050919050565b600081600f0b9050919050565b600061103d6110386110338461100b565b6108ea565b611015565b9050919050565b61104d81611022565b82525050565b600061106e61106961106484610c96565b6108ea565b611015565b9050919050565b61107e81611053565b82525050565b600060a0820190506110996000830188611044565b6110a66020830187611075565b6110b36040830186610ae4565b6110c06060830185610cc2565b6110cd6080830184610c87565b9695505050505050565b6000602082840312156110ed576110ec6109a0565b5b60006110fb84828501610d24565b91505092915050565b600060a0820190506111196000830188610b2e565b6111266020830187610c87565b6111336040830186610c87565b6111406060830185610ae4565b61114d6080830184610cc2565b9695505050505050565b600061116282610a21565b915061116d83610a21565b9250828210156111805761117f610f86565b5b828203905092915050565b600082825260208201905092915050565b7f415050524f56455f4641494c4544000000000000000000000000000000000000600082015250565b60006111d2600e8361118b565b91506111dd8261119c565b602082019050919050565b60006020820190508181036000830152611201816111c5565b9050919050565b600061121382610a21565b915061121e83610a21565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561125757611256610f86565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061129c82610a21565b91506112a783610a21565b9250826112b7576112b6611262565b5b82820490509291505056fea264697066735822122072a9290fcd2d358dac1ff6c697d21436b941893414c7de2fb3a3d0b2363e6e8a64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swap(address,address,address,uint256,uint256)": {
        "notice": "Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for at least 'amountToMin' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Returns the amount of tokens 'to' transferred to BentoBox. (The BentoBox skim function will be used by the caller to get the swapped funds)."
      },
      "swapExact(address,address,address,address,uint256,uint256)": {
        "notice": "Calculates the amount of token 'from' needed to complete the swap (amountFrom), this should be less than or equal to amountFromMax. Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for exactly 'exactAmountTo' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom). Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom). (The BentoBox skim function will be used by the caller to get the swapped funds)."
      }
    },
    "notice": "WETH/USDT Popsicle Swapper for Ethereum",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}