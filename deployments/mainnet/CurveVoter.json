{
  "address": "0xAC6C439253987Be9aFF6AaC047EC8501eA13d512",
  "abi": [
    {
      "inputs": [],
      "name": "NotAllowedVoter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMagicCRV",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV3",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ESCROW",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DISTRIBUTOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAUGE_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOCKTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VOTE_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM_GAUGE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "createMaxLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvester",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "increaseLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseMaxLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastClaimTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "magicCRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "setHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_magicCRV",
          "type": "address"
        }
      ],
      "name": "setMagicCRV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCRVTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "voteForGaugeWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteForMaxMIMGaugeWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe069b88ac93d8809d065a9c978e128b4706864d24d63fd63c88d22571aaa300e",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0xAC6C439253987Be9aFF6AaC047EC8501eA13d512",
    "transactionIndex": 82,
    "gasUsed": "1099654",
    "logsBloom": "0x00080000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000400000000000200000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000100000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x68a468324fe3018f5cb8c156af9da2da7ffe8cf168376e53f83f8d701d4bd59e",
    "transactionHash": "0xe069b88ac93d8809d065a9c978e128b4706864d24d63fd63c88d22571aaa300e",
    "logs": [
      {
        "transactionIndex": 82,
        "blockNumber": 14475404,
        "transactionHash": "0xe069b88ac93d8809d065a9c978e128b4706864d24d63fd63c88d22571aaa300e",
        "address": "0xAC6C439253987Be9aFF6AaC047EC8501eA13d512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x68a468324fe3018f5cb8c156af9da2da7ffe8cf168376e53f83f8d701d4bd59e"
      }
    ],
    "blockNumber": 14475404,
    "cumulativeGasUsed": "6046660",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3aeb032b067c836109c1d5b08c725c38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotAllowedVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMagicCRV\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ESCROW\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DISTRIBUTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAUGE_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCKTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTE_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM_GAUGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"createMaxLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseMaxLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magicCRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"setHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_magicCRV\",\"type\":\"address\"}],\"name\":\"setMagicCRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCRVTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"voteForGaugeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteForMaxMIMGaugeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createMaxLock(uint256)\":{\"notice\":\"creates a 4 years lock\"},\"increaseMaxLock()\":{\"notice\":\"extend to 4 years lock\"},\"lock()\":{\"notice\":\"add amount to the current lock created with `createLock` or `createMaxLock`\"},\"voteForGaugeWeights(address,uint256)\":{\"notice\":\"amount 10000 = 100%\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/magic-crv/CurveVoter.sol\":\"CurveVoter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc39d0f5693925ea1e8c517f7cc24211a9899c83a57e62d806180cdb056b6b75\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/curve/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable func-name-mixedcase\\r\\n\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IFeeDistributor {\\r\\n    function claim_many(address[20] calldata) external returns (bool);\\r\\n\\r\\n    function last_token_time() external view returns (uint256);\\r\\n\\r\\n    function time_cursor() external view returns (uint256);\\r\\n\\r\\n    function time_cursor_of(address) external view returns (uint256);\\r\\n\\r\\n    function checkpoint_token() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdf0544798257b6b0b53305a9526dd3750ed43773ff3556a706915e9673c8075f\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable func-name-mixedcase\\r\\n\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IGaugeController {\\r\\n    function vote_for_gauge_weights(address, uint256) external;\\r\\n}\",\"keccak256\":\"0xcd2a006400eb0f6ed6f88a361c35eef5dc9ed25519350ee83ee8071afcbab948\",\"license\":\"MIT\"},\"contracts/interfaces/curve/IVoteEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable func-name-mixedcase\\r\\n\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IVoteEscrow {\\r\\n    function create_lock(uint256, uint256) external;\\r\\n\\r\\n    function increase_amount(uint256) external;\\r\\n\\r\\n    function increase_unlock_time(uint256) external;\\r\\n\\r\\n    function withdraw() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0208124d4ad9d05f6c03b4d69a71088933aff336bc9ecbc4b90b665d653a1373\",\"license\":\"MIT\"},\"contracts/magic-crv/CurveVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Inspired by Yearn CurveYCRVVoter and StrategyProxy\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/curve/IFeeDistributor.sol\\\";\\r\\nimport \\\"../interfaces/curve/IVoteEscrow.sol\\\";\\r\\nimport \\\"../interfaces/curve/IGaugeController.sol\\\";\\r\\n\\r\\ncontract CurveVoter is Ownable {\\r\\n    using SafeTransferLib for ERC20;\\r\\n\\r\\n    error NotAllowedVoter();\\r\\n    error NotMagicCRV();\\r\\n    error NotAuthorized();\\r\\n\\r\\n    uint256 public constant MAX_LOCKTIME = 4 * 365 * 86400; // 4 years\\r\\n\\r\\n    ERC20 public constant CRV = ERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\\r\\n    address public constant ESCROW = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2;\\r\\n    address public constant GAUGE_CONTROLLER = 0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB;\\r\\n    address public constant FEE_DISTRIBUTOR = 0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc;\\r\\n    address public constant CRV3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\r\\n    address public constant MIM_GAUGE = 0xd8b712d29381748dB89c36BCa0138d7c75866ddF;\\r\\n    uint256 public constant MAX_VOTE_WEIGHT = 10_000;\\r\\n\\r\\n    mapping(address => bool) public voters;\\r\\n\\r\\n    uint256 public lastClaimTimestamp;\\r\\n    uint256 public totalCRVTokens;\\r\\n    address public magicCRV;\\r\\n    address public harvester;\\r\\n\\r\\n    modifier onlyAllowedVoters() {\\r\\n        if (!voters[msg.sender] && msg.sender != owner()) {\\r\\n            revert NotAllowedVoter();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyHarvester() {\\r\\n        if (msg.sender != harvester) {\\r\\n            revert NotMagicCRV();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAllowedLockers() {\\r\\n        if (msg.sender != magicCRV && msg.sender != owner() && msg.sender != harvester) {\\r\\n            revert NotAuthorized();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setAllowedVoter(address voter, bool allowed) external onlyOwner {\\r\\n        voters[voter] = allowed;\\r\\n    }\\r\\n\\r\\n    function setMagicCRV(address _magicCRV) external onlyOwner {\\r\\n        magicCRV = _magicCRV;\\r\\n    }\\r\\n\\r\\n    function setHarvester(address _harvester) external onlyOwner {\\r\\n        harvester = _harvester;\\r\\n    }\\r\\n\\r\\n    /// @notice amount 10000 = 100%\\r\\n    function voteForGaugeWeights(address gauge, uint256 amount) public onlyAllowedVoters {\\r\\n        IGaugeController(GAUGE_CONTROLLER).vote_for_gauge_weights(gauge, amount);\\r\\n    }\\r\\n\\r\\n    function voteForMaxMIMGaugeWeights() public onlyAllowedVoters {\\r\\n        IGaugeController(GAUGE_CONTROLLER).vote_for_gauge_weights(MIM_GAUGE, MAX_VOTE_WEIGHT);\\r\\n    }\\r\\n\\r\\n    function claim(address recipient) external onlyHarvester returns (uint256 amount) {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        if (block.timestamp < lastClaimTimestamp + 7 days) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        address p = address(this);\\r\\n\\r\\n        // curve claims are divided by weeks and each iterate can claim up to 20 weeks of rewards.\\r\\n        IFeeDistributor(FEE_DISTRIBUTOR).claim_many([p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p]);\\r\\n        lastClaimTimestamp = IFeeDistributor(FEE_DISTRIBUTOR).time_cursor_of(p);\\r\\n\\r\\n        amount = ERC20(CRV3).balanceOf(address(this));\\r\\n        if (amount > 0) {\\r\\n            ERC20(CRV3).transfer(recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice add amount to the current lock created with `createLock` or `createMaxLock`\\r\\n    function lock() external onlyAllowedLockers {\\r\\n        uint256 amount = ERC20(CRV).balanceOf(address(this));\\r\\n        if (amount > 0) {\\r\\n            CRV.safeApprove(ESCROW, 0);\\r\\n            CRV.safeApprove(ESCROW, amount);\\r\\n            IVoteEscrow(ESCROW).increase_amount(amount);\\r\\n            totalCRVTokens += amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice creates a 4 years lock\\r\\n    function createMaxLock(uint256 value) external onlyOwner {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        _createLock(value, block.timestamp + MAX_LOCKTIME);\\r\\n    }\\r\\n\\r\\n    function createLock(uint256 value, uint256 unlockTime) external onlyOwner {\\r\\n        _createLock(value, unlockTime);\\r\\n    }\\r\\n\\r\\n    /// @notice extend to 4 years lock\\r\\n    function increaseMaxLock() external onlyOwner {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        _increaseLock(block.timestamp + MAX_LOCKTIME);\\r\\n    }\\r\\n\\r\\n    function increaseLock(uint256 unlockTime) external onlyOwner {\\r\\n        _increaseLock(unlockTime);\\r\\n    }\\r\\n\\r\\n    function _createLock(uint256 value, uint256 unlockTime) internal {\\r\\n        CRV.safeApprove(ESCROW, 0);\\r\\n        CRV.safeApprove(ESCROW, value);\\r\\n        IVoteEscrow(ESCROW).create_lock(value, unlockTime);\\r\\n    }\\r\\n\\r\\n    function _increaseLock(uint256 unlockTime) internal {\\r\\n        IVoteEscrow(ESCROW).increase_unlock_time(unlockTime);\\r\\n    }\\r\\n\\r\\n    function release() external onlyOwner {\\r\\n        IVoteEscrow(ESCROW).withdraw();\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        ERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        token.safeTransfer(to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0975267198f663b6831068c78dce6e45d6b99365da1fe708050a7c4581163b5a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6112798061007e6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637244d96011610104578063c5dd2a1c116100a2578063e681c4aa11610071578063e681c4aa146103db578063f2fde38b146103f6578063f83d08ba14610409578063fab156321461041157600080fd5b8063c5dd2a1c1461038f578063d2aaae80146103a2578063d9caed12146103b5578063e14cccdf146103c857600080fd5b8063945c9142116100de578063945c914214610313578063a3ec138d1461032e578063ae4a5a9f14610361578063b52c05fe1461037c57600080fd5b80637244d960146102e757806386d1a69f146102fa5780638da5cb5b1461030257600080fd5b80634bdaeac11161017157806351f3b9481161014b57806351f3b948146102b2578063607af397146102bb5780636910dcce146102c4578063715018a6146102df57600080fd5b80634bdaeac11461027c57806350c2d63b1461028f578063510b78d01461029757600080fd5b80631c5a0914116101ad5780631c5a0914146102305780631e83409a1461024357806322884e2c146102565780633ea527cb1461027157600080fd5b80631447a73e146101d457806315de1daa146102045780631c3ebaeb14610219575b600080fd5b6004546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610217610212366004611064565b610419565b005b61022261271081565b6040519081526020016101fb565b61021761023e366004611088565b61046e565b610222610251366004611064565b6104a4565b6101e7732f50d538606fa9edd2b11e2446beb18c9d5846bb81565b610222630784ce0081565b6005546101e7906001600160a01b031681565b610217610790565b6101e7736c3f90f043a72fa612cbac8115ee7e52bde6e49081565b61022260035481565b61022260025481565b6101e773a464e6dcda8ac41e03616f95f4bc98a13b8922dc81565b61021761085b565b6102176102f53660046110a1565b610891565b610217610953565b6000546001600160a01b03166101e7565b6101e773d533a949740bb3306d119cc777fa900ba034cd5281565b61035161033c366004611064565b60016020526000908152604090205460ff1681565b60405190151581526020016101fb565b6101e773d8b712d29381748db89c36bca0138d7c75866ddf81565b61021761038a3660046110cd565b6109cc565b61021761039d3660046110fd565b610a04565b6102176103b0366004611088565b610a59565b6102176103c3366004611136565b610a9a565b6102176103d6366004611064565b610add565b6101e7735f3b5dfeb7b28cdbd7faba78963ee202a494e2a281565b610217610404366004611064565b610b29565b610217610bc1565b610217610d80565b6000546001600160a01b0316331461044c5760405162461bcd60e51b815260040161044390611177565b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104985760405162461bcd60e51b815260040161044390611177565b6104a181610dbb565b50565b6005546000906001600160a01b031633146104d25760405163040d77c760e11b815260040160405180910390fd5b6002546104e29062093a806111ac565b4210156104f157506000919050565b60408051610280810182523080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e0820181905261020082018190526102208201819052610240820181905261026082018190529151637b935a2360e01b815273a464e6dcda8ac41e03616f95f4bc98a13b8922dc91637b935a23916105c591906004016111d2565b6020604051808303816000875af11580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610608919061120d565b50604051632a2a314b60e01b81526001600160a01b038216600482015273a464e6dcda8ac41e03616f95f4bc98a13b8922dc90632a2a314b90602401602060405180830381865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610685919061122a565b6002556040516370a0823160e01b8152306004820152736c3f90f043a72fa612cbac8115ee7e52bde6e490906370a0823190602401602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb919061122a565b9150811561078a5760405163a9059cbb60e01b81526001600160a01b038416600482015260248101839052736c3f90f043a72fa612cbac8115ee7e52bde6e4909063a9059cbb906044016020604051808303816000875af1158015610764573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610788919061120d565b505b50919050565b3360009081526001602052604090205460ff161580156107bb57506000546001600160a01b03163314155b156107d957604051631729954960e01b815260040160405180910390fd5b604051631ae26c6560e31b815273d8b712d29381748db89c36bca0138d7c75866ddf60048201526127106024820152732f50d538606fa9edd2b11e2446beb18c9d5846bb9063d713632890604401600060405180830381600087803b15801561084157600080fd5b505af1158015610855573d6000803e3d6000fd5b50505050565b6000546001600160a01b031633146108855760405162461bcd60e51b815260040161044390611177565b61088f6000610e23565b565b3360009081526001602052604090205460ff161580156108bc57506000546001600160a01b03163314155b156108da57604051631729954960e01b815260040160405180910390fd5b604051631ae26c6560e31b81526001600160a01b038316600482015260248101829052732f50d538606fa9edd2b11e2446beb18c9d5846bb9063d7136328906044015b600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b505050505050565b6000546001600160a01b0316331461097d5760405162461bcd60e51b815260040161044390611177565b735f3b5dfeb7b28cdbd7faba78963ee202a494e2a26001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561084157600080fd5b6000546001600160a01b031633146109f65760405162461bcd60e51b815260040161044390611177565b610a008282610e73565b5050565b6000546001600160a01b03163314610a2e5760405162461bcd60e51b815260040161044390611177565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b6000546001600160a01b03163314610a835760405162461bcd60e51b815260040161044390611177565b6104a181610a95630784ce00426111ac565b610e73565b6000546001600160a01b03163314610ac45760405162461bcd60e51b815260040161044390611177565b610ad86001600160a01b0384168383610f19565b505050565b6000546001600160a01b03163314610b075760405162461bcd60e51b815260040161044390611177565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b535760405162461bcd60e51b815260040161044390611177565b6001600160a01b038116610bb85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610443565b6104a181610e23565b6004546001600160a01b03163314801590610be757506000546001600160a01b03163314155b8015610bfe57506005546001600160a01b03163314155b15610c1c5760405163ea8e4eb560e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015260009073d533a949740bb3306d119cc777fa900ba034cd52906370a0823190602401602060405180830381865afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c92919061122a565b905080156104a157610cce73d533a949740bb3306d119cc777fa900ba034cd52735f3b5dfeb7b28cdbd7faba78963ee202a494e2a26000610f92565b610d0173d533a949740bb3306d119cc777fa900ba034cd52735f3b5dfeb7b28cdbd7faba78963ee202a494e2a283610f92565b604051631255d9df60e21b815260048101829052735f3b5dfeb7b28cdbd7faba78963ee202a494e2a290634957677c90602401600060405180830381600087803b158015610d4e57600080fd5b505af1158015610d62573d6000803e3d6000fd5b505050508060036000828254610d7891906111ac565b909155505050565b6000546001600160a01b03163314610daa5760405162461bcd60e51b815260040161044390611177565b61088f610dbb630784ce00426111ac565b6040516377fbd30960e11b815260048101829052735f3b5dfeb7b28cdbd7faba78963ee202a494e2a29063eff7a61290602401600060405180830381600087803b158015610e0857600080fd5b505af1158015610e1c573d6000803e3d6000fd5b5050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ea773d533a949740bb3306d119cc777fa900ba034cd52735f3b5dfeb7b28cdbd7faba78963ee202a494e2a26000610f92565b610eda73d533a949740bb3306d119cc777fa900ba034cd52735f3b5dfeb7b28cdbd7faba78963ee202a494e2a284610f92565b6040516365fc387360e01b81526004810183905260248101829052735f3b5dfeb7b28cdbd7faba78963ee202a494e2a2906365fc38739060440161091d565b600060405163a9059cbb60e01b81526001600160a01b03841660048201528260248201526000806044836000895af1915050610f548161100a565b6108555760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610443565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af1915050610fcd8161100a565b6108555760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401610443565b60003d8261101c57806000803e806000fd5b80602081146110345780156110455760009250610788565b816000803e60005115159250610788565b5060019392505050565b6001600160a01b03811681146104a157600080fd5b60006020828403121561107657600080fd5b81356110818161104f565b9392505050565b60006020828403121561109a57600080fd5b5035919050565b600080604083850312156110b457600080fd5b82356110bf8161104f565b946020939093013593505050565b600080604083850312156110e057600080fd5b50508035926020909101359150565b80151581146104a157600080fd5b6000806040838503121561111057600080fd5b823561111b8161104f565b9150602083013561112b816110ef565b809150509250929050565b60008060006060848603121561114b57600080fd5b83356111568161104f565b925060208401356111668161104f565b929592945050506040919091013590565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156111cd57634e487b7160e01b600052601160045260246000fd5b500190565b6102808101818360005b60148110156112045781516001600160a01b03168352602092830192909101906001016111dc565b50505092915050565b60006020828403121561121f57600080fd5b8151611081816110ef565b60006020828403121561123c57600080fd5b505191905056fea2646970667358221220d1190ad67e0bf45e6f2e6e5a1c69d04743400fdb6f2d53f4ff82b235013643ba64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637244d96011610104578063c5dd2a1c116100a2578063e681c4aa11610071578063e681c4aa146103db578063f2fde38b146103f6578063f83d08ba14610409578063fab156321461041157600080fd5b8063c5dd2a1c1461038f578063d2aaae80146103a2578063d9caed12146103b5578063e14cccdf146103c857600080fd5b8063945c9142116100de578063945c914214610313578063a3ec138d1461032e578063ae4a5a9f14610361578063b52c05fe1461037c57600080fd5b80637244d960146102e757806386d1a69f146102fa5780638da5cb5b1461030257600080fd5b80634bdaeac11161017157806351f3b9481161014b57806351f3b948146102b2578063607af397146102bb5780636910dcce146102c4578063715018a6146102df57600080fd5b80634bdaeac11461027c57806350c2d63b1461028f578063510b78d01461029757600080fd5b80631c5a0914116101ad5780631c5a0914146102305780631e83409a1461024357806322884e2c146102565780633ea527cb1461027157600080fd5b80631447a73e146101d457806315de1daa146102045780631c3ebaeb14610219575b600080fd5b6004546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610217610212366004611064565b610419565b005b61022261271081565b6040519081526020016101fb565b61021761023e366004611088565b61046e565b610222610251366004611064565b6104a4565b6101e7732f50d538606fa9edd2b11e2446beb18c9d5846bb81565b610222630784ce0081565b6005546101e7906001600160a01b031681565b610217610790565b6101e7736c3f90f043a72fa612cbac8115ee7e52bde6e49081565b61022260035481565b61022260025481565b6101e773a464e6dcda8ac41e03616f95f4bc98a13b8922dc81565b61021761085b565b6102176102f53660046110a1565b610891565b610217610953565b6000546001600160a01b03166101e7565b6101e773d533a949740bb3306d119cc777fa900ba034cd5281565b61035161033c366004611064565b60016020526000908152604090205460ff1681565b60405190151581526020016101fb565b6101e773d8b712d29381748db89c36bca0138d7c75866ddf81565b61021761038a3660046110cd565b6109cc565b61021761039d3660046110fd565b610a04565b6102176103b0366004611088565b610a59565b6102176103c3366004611136565b610a9a565b6102176103d6366004611064565b610add565b6101e7735f3b5dfeb7b28cdbd7faba78963ee202a494e2a281565b610217610404366004611064565b610b29565b610217610bc1565b610217610d80565b6000546001600160a01b0316331461044c5760405162461bcd60e51b815260040161044390611177565b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146104985760405162461bcd60e51b815260040161044390611177565b6104a181610dbb565b50565b6005546000906001600160a01b031633146104d25760405163040d77c760e11b815260040160405180910390fd5b6002546104e29062093a806111ac565b4210156104f157506000919050565b60408051610280810182523080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e0820181905261020082018190526102208201819052610240820181905261026082018190529151637b935a2360e01b815273a464e6dcda8ac41e03616f95f4bc98a13b8922dc91637b935a23916105c591906004016111d2565b6020604051808303816000875af11580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610608919061120d565b50604051632a2a314b60e01b81526001600160a01b038216600482015273a464e6dcda8ac41e03616f95f4bc98a13b8922dc90632a2a314b90602401602060405180830381865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610685919061122a565b6002556040516370a0823160e01b8152306004820152736c3f90f043a72fa612cbac8115ee7e52bde6e490906370a0823190602401602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb919061122a565b9150811561078a5760405163a9059cbb60e01b81526001600160a01b038416600482015260248101839052736c3f90f043a72fa612cbac8115ee7e52bde6e4909063a9059cbb906044016020604051808303816000875af1158015610764573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610788919061120d565b505b50919050565b3360009081526001602052604090205460ff161580156107bb57506000546001600160a01b03163314155b156107d957604051631729954960e01b815260040160405180910390fd5b604051631ae26c6560e31b815273d8b712d29381748db89c36bca0138d7c75866ddf60048201526127106024820152732f50d538606fa9edd2b11e2446beb18c9d5846bb9063d713632890604401600060405180830381600087803b15801561084157600080fd5b505af1158015610855573d6000803e3d6000fd5b50505050565b6000546001600160a01b031633146108855760405162461bcd60e51b815260040161044390611177565b61088f6000610e23565b565b3360009081526001602052604090205460ff161580156108bc57506000546001600160a01b03163314155b156108da57604051631729954960e01b815260040160405180910390fd5b604051631ae26c6560e31b81526001600160a01b038316600482015260248101829052732f50d538606fa9edd2b11e2446beb18c9d5846bb9063d7136328906044015b600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b505050505050565b6000546001600160a01b0316331461097d5760405162461bcd60e51b815260040161044390611177565b735f3b5dfeb7b28cdbd7faba78963ee202a494e2a26001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561084157600080fd5b6000546001600160a01b031633146109f65760405162461bcd60e51b815260040161044390611177565b610a008282610e73565b5050565b6000546001600160a01b03163314610a2e5760405162461bcd60e51b815260040161044390611177565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b6000546001600160a01b03163314610a835760405162461bcd60e51b815260040161044390611177565b6104a181610a95630784ce00426111ac565b610e73565b6000546001600160a01b03163314610ac45760405162461bcd60e51b815260040161044390611177565b610ad86001600160a01b0384168383610f19565b505050565b6000546001600160a01b03163314610b075760405162461bcd60e51b815260040161044390611177565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b535760405162461bcd60e51b815260040161044390611177565b6001600160a01b038116610bb85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610443565b6104a181610e23565b6004546001600160a01b03163314801590610be757506000546001600160a01b03163314155b8015610bfe57506005546001600160a01b03163314155b15610c1c5760405163ea8e4eb560e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015260009073d533a949740bb3306d119cc777fa900ba034cd52906370a0823190602401602060405180830381865afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c92919061122a565b905080156104a157610cce73d533a949740bb3306d119cc777fa900ba034cd52735f3b5dfeb7b28cdbd7faba78963ee202a494e2a26000610f92565b610d0173d533a949740bb3306d119cc777fa900ba034cd52735f3b5dfeb7b28cdbd7faba78963ee202a494e2a283610f92565b604051631255d9df60e21b815260048101829052735f3b5dfeb7b28cdbd7faba78963ee202a494e2a290634957677c90602401600060405180830381600087803b158015610d4e57600080fd5b505af1158015610d62573d6000803e3d6000fd5b505050508060036000828254610d7891906111ac565b909155505050565b6000546001600160a01b03163314610daa5760405162461bcd60e51b815260040161044390611177565b61088f610dbb630784ce00426111ac565b6040516377fbd30960e11b815260048101829052735f3b5dfeb7b28cdbd7faba78963ee202a494e2a29063eff7a61290602401600060405180830381600087803b158015610e0857600080fd5b505af1158015610e1c573d6000803e3d6000fd5b5050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ea773d533a949740bb3306d119cc777fa900ba034cd52735f3b5dfeb7b28cdbd7faba78963ee202a494e2a26000610f92565b610eda73d533a949740bb3306d119cc777fa900ba034cd52735f3b5dfeb7b28cdbd7faba78963ee202a494e2a284610f92565b6040516365fc387360e01b81526004810183905260248101829052735f3b5dfeb7b28cdbd7faba78963ee202a494e2a2906365fc38739060440161091d565b600060405163a9059cbb60e01b81526001600160a01b03841660048201528260248201526000806044836000895af1915050610f548161100a565b6108555760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610443565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af1915050610fcd8161100a565b6108555760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401610443565b60003d8261101c57806000803e806000fd5b80602081146110345780156110455760009250610788565b816000803e60005115159250610788565b5060019392505050565b6001600160a01b03811681146104a157600080fd5b60006020828403121561107657600080fd5b81356110818161104f565b9392505050565b60006020828403121561109a57600080fd5b5035919050565b600080604083850312156110b457600080fd5b82356110bf8161104f565b946020939093013593505050565b600080604083850312156110e057600080fd5b50508035926020909101359150565b80151581146104a157600080fd5b6000806040838503121561111057600080fd5b823561111b8161104f565b9150602083013561112b816110ef565b809150509250929050565b60008060006060848603121561114b57600080fd5b83356111568161104f565b925060208401356111668161104f565b929592945050506040919091013590565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156111cd57634e487b7160e01b600052601160045260246000fd5b500190565b6102808101818360005b60148110156112045781516001600160a01b03168352602092830192909101906001016111dc565b50505092915050565b60006020828403121561121f57600080fd5b8151611081816110ef565b60006020828403121561123c57600080fd5b505191905056fea2646970667358221220d1190ad67e0bf45e6f2e6e5a1c69d04743400fdb6f2d53f4ff82b235013643ba64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createMaxLock(uint256)": {
        "notice": "creates a 4 years lock"
      },
      "increaseMaxLock()": {
        "notice": "extend to 4 years lock"
      },
      "lock()": {
        "notice": "add amount to the current lock created with `createLock` or `createMaxLock`"
      },
      "voteForGaugeWeights(address,uint256)": {
        "notice": "amount 10000 = 100%"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/magic-crv/CurveVoter.sol:CurveVoter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6754,
        "contract": "contracts/magic-crv/CurveVoter.sol:CurveVoter",
        "label": "voters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6756,
        "contract": "contracts/magic-crv/CurveVoter.sol:CurveVoter",
        "label": "lastClaimTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6758,
        "contract": "contracts/magic-crv/CurveVoter.sol:CurveVoter",
        "label": "totalCRVTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6760,
        "contract": "contracts/magic-crv/CurveVoter.sol:CurveVoter",
        "label": "magicCRV",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6762,
        "contract": "contracts/magic-crv/CurveVoter.sol:CurveVoter",
        "label": "harvester",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}