{
  "address": "0x54A8C6c4B3256D24652DAE3fC1511c871593DE9e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_ipfsMerkleProofs",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBorrowAmount",
          "type": "uint256"
        }
      ],
      "name": "LogSetMaxBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfsMerkleProofs",
          "type": "string"
        }
      ],
      "name": "LogSetMerkleRoot",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amountAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "ipfsMerkleProofs_",
          "type": "string"
        }
      ],
      "name": "changeMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newBorrowAmount",
          "type": "uint256"
        }
      ],
      "name": "getBorrowStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ipfsMerkleProofs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxBorrow",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "setMaxBorrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc701d100b7918e9c8db54efc22c4ebbb9a4ab549934fa86b44fc65fe096bf4c",
  "receipt": {
    "to": null,
    "from": "0xb4EfdA6DAf5ef75D08869A0f9C0213278fb43b6C",
    "contractAddress": "0x54A8C6c4B3256D24652DAE3fC1511c871593DE9e",
    "transactionIndex": 132,
    "gasUsed": "723268",
    "logsBloom": "0x
    "blockHash": "0xec99dcc3469912428b34a6fe78db7b6ad45e6db624c56efc3ba28e90fd1c1977",
    "transactionHash": "0xbc701d100b7918e9c8db54efc22c4ebbb9a4ab549934fa86b44fc65fe096bf4c",
    "logs": [
      {
        "transactionIndex": 132,
        "blockNumber": 14781769,
        "transactionHash": "0xbc701d100b7918e9c8db54efc22c4ebbb9a4ab549934fa86b44fc65fe096bf4c",
        "address": "0x54A8C6c4B3256D24652DAE3fC1511c871593DE9e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b4efda6daf5ef75d08869a0f9c0213278fb43b6c"
        ],
        "data": "0x",
        "logIndex": 237,
        "blockHash": "0xec99dcc3469912428b34a6fe78db7b6ad45e6db624c56efc3ba28e90fd1c1977"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 14781769,
        "transactionHash": "0xbc701d100b7918e9c8db54efc22c4ebbb9a4ab549934fa86b44fc65fe096bf4c",
        "address": "0x54A8C6c4B3256D24652DAE3fC1511c871593DE9e",
        "topics": [
          "0x5a907f45f325ee0bc65794b9b2dea3249b3c04aa431f380db15808c09fb763f1"
        ],
        "data": "0x2effc9f2ed226e61592595bb3846d34cab4db5420bc5d6651217f9ecc85b81d20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004a68747470733a2f2f697066732e696e667572612e696f2f697066732f516d4e5239366e4d4277346275747a366b6144614e6879614d336b50717a343447554e47343965736b696f696b5800000000000000000000000000000000000000000000",
        "logIndex": 238,
        "blockHash": "0xec99dcc3469912428b34a6fe78db7b6ad45e6db624c56efc3ba28e90fd1c1977"
      }
    ],
    "blockNumber": 14781769,
    "cumulativeGasUsed": "12104481",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2effc9f2ed226e61592595bb3846d34cab4db5420bc5d6651217f9ecc85b81d2",
    "https://ipfs.infura.io/ipfs/QmNR96nMBw4butz6kaDaNhyaM3kPqz44GUNG49eskioikX"
  ],
  "numDeployments": 2,
  "solcInputHash": "a88ce6d5f2156830f487822882cd8bb6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_ipfsMerkleProofs\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBorrowAmount\",\"type\":\"uint256\"}],\"name\":\"LogSetMaxBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsMerkleProofs\",\"type\":\"string\"}],\"name\":\"LogSetMerkleRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"ipfsMerkleProofs_\",\"type\":\"string\"}],\"name\":\"changeMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowAmount\",\"type\":\"uint256\"}],\"name\":\"getBorrowStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ipfsMerkleProofs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBorrow\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"setMaxBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBorrowStatus(address,uint256)\":{\"params\":{\"newBorrowPart\":\"new borrow part of the user. \",\"user\":\"address of the user\"},\"returns\":{\"success\":\"if user is allowed to borrow said new amount, returns true otherwise false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMaxBorrow(address,uint256,bytes32[])\":{\"params\":{\"maxBorrow\":\"new max borrowPart for the user. \",\"merkleProof\":\"merkle proof provided to user.\",\"user\":\"address of the user\"},\"returns\":{\"success\":\"if the user is indeed allowed to borrow said new amount\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBorrowStatus(address,uint256)\":{\"notice\":\"Get whether user is allowed to borrow\"},\"setMaxBorrow(address,uint256,bytes32[])\":{\"notice\":\"Function for the user to bring a merkle proof to set a new max borrow\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Whitelister.sol\":\"Whitelister\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":690},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"contracts/Whitelister.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.10;\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IWhitelister.sol\\\";\\n\\ncontract Whitelister is IWhitelister, Ownable {\\n    event LogSetMaxBorrow(address user, uint256 maxBorrowAmount);\\n    event LogSetMerkleRoot(bytes32 newRoot, string ipfsMerkleProofs);\\n    mapping (address => uint256) public amountAllowed;\\n\\n    bytes32 public merkleRoot;\\n    string public ipfsMerkleProofs;\\n\\n    constructor (\\n        bytes32 _merkleRoot,\\n        string memory _ipfsMerkleProofs\\n        ) {\\n        merkleRoot = _merkleRoot;\\n        ipfsMerkleProofs = _ipfsMerkleProofs;\\n        emit LogSetMerkleRoot(_merkleRoot, _ipfsMerkleProofs);\\n    }\\n\\n    /// @inheritdoc IWhitelister\\n    function getBorrowStatus(address user, uint256 newBorrowAmount) external view override returns (bool success) {\\n        return amountAllowed[user] >= newBorrowAmount;\\n    }\\n\\n    /// @inheritdoc IWhitelister\\n    function setMaxBorrow(address user, uint256 maxBorrow, bytes32[] calldata merkleProof) external returns (bool success) {\\n        // Verify the merkle proof.\\n        bytes32 node = keccak256(abi.encodePacked(user, maxBorrow));\\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), \\\"Whitelister: Invalid proof.\\\");\\n\\n        amountAllowed[user] = maxBorrow;\\n\\n        emit LogSetMaxBorrow(user, maxBorrow);\\n\\n        return true;\\n    }\\n\\n    function changeMerkleRoot(bytes32 newRoot, string calldata ipfsMerkleProofs_) external onlyOwner{\\n        ipfsMerkleProofs = ipfsMerkleProofs_;\\n        merkleRoot = newRoot;\\n        emit LogSetMerkleRoot(newRoot, ipfsMerkleProofs_);\\n    }\\n\\n}\",\"keccak256\":\"0x5d44ed40cbfc90a34e6951ca273ab002e77d0cf62e185237c3d662c8d863f496\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/IWhitelister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IWhitelister {\\n    /// @notice Get whether user is allowed to borrow\\n    /// @param user address of the user\\n    /// @param newBorrowPart new borrow part of the user. \\n    /// @return success if user is allowed to borrow said new amount, returns true otherwise false\\n    function getBorrowStatus(address user, uint256 newBorrowPart) external view returns (bool success);\\n\\n    /// @notice Function for the user to bring a merkle proof to set a new max borrow\\n    /// @param user address of the user\\n    /// @param maxBorrow new max borrowPart for the user. \\n    /// @param merkleProof merkle proof provided to user.\\n    /// @return success if the user is indeed allowed to borrow said new amount\\n    function setMaxBorrow(address user, uint256 maxBorrow, bytes32[] calldata merkleProof) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xea377215ae81615a8fbe7e67efd7353b53819797987db2a96a723557b6f53515\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000c8938038062000c898339810160408190526200003491620001dc565b6200003f336200009d565b6002829055805162000059906003906020840190620000ed565b507f5a907f45f325ee0bc65794b9b2dea3249b3c04aa431f380db15808c09fb763f182826040516200008d929190620002a1565b60405180910390a150506200031a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620000fb90620002dd565b90600052602060002090601f0160209004810192826200011f57600085556200016a565b82601f106200013a57805160ff19168380011785556200016a565b828001600101855582156200016a579182015b828111156200016a5782518255916020019190600101906200014d565b50620001789291506200017c565b5090565b5b808211156200017857600081556001016200017d565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001c6578181015183820152602001620001ac565b83811115620001d6576000848401525b50505050565b60008060408385031215620001f057600080fd5b825160208401519092506001600160401b03808211156200021057600080fd5b818501915085601f8301126200022557600080fd5b8151818111156200023a576200023a62000193565b604051601f8201601f19908116603f0116810190838211818310171562000265576200026562000193565b816040528281528860208487010111156200027f57600080fd5b62000292836020830160208801620001a9565b80955050505050509250929050565b8281526040602082015260008251806040840152620002c8816060850160208701620001a9565b601f01601f1916919091016060019392505050565b600181811c90821680620002f257607f821691505b602082108114156200031457634e487b7160e01b600052602260045260246000fd5b50919050565b61095f806200032a6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80638da5cb5b11610076578063bc5758861161005b578063bc57588614610141578063c29ba4c81461016f578063f2fde38b1461018257600080fd5b80638da5cb5b14610106578063ad4b85cc1461012157600080fd5b80631275fb7e146100a85780632eb4a7ab146100d05780636f1c6aab146100e7578063715018a6146100fc575b600080fd5b6100bb6100b63660046106d2565b610195565b60405190151581526020015b60405180910390f35b6100d960025481565b6040519081526020016100c7565b6100ef6102ca565b6040516100c7919061075c565b610104610358565b005b6000546040516001600160a01b0390911681526020016100c7565b6100d961012f3660046107b1565b60016020526000908152604090205481565b6100bb61014f3660046107d3565b6001600160a01b0391909116600090815260016020526040902054101590565b61010461017d3660046107fd565b6103be565b6101046101903660046107b1565b61046b565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526000908190605401604051602081830303815290604052805190602001209050610219848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506002549150849050610536565b61026a5760405162461bcd60e51b815260206004820152601b60248201527f57686974656c69737465723a20496e76616c69642070726f6f662e000000000060448201526064015b60405180910390fd5b6001600160a01b038616600081815260016020908152604091829020889055815192835282018790527f69c6d8b7196e71f451a2884f500930dfeb89625c59aba258581bb89d8e529ee6910160405180910390a150600195945050505050565b600380546102d790610879565b80601f016020809104026020016040519081016040528092919081815260200182805461030390610879565b80156103505780601f1061032557610100808354040283529160200191610350565b820191906000526020600020905b81548152906001019060200180831161033357829003601f168201915b505050505081565b6000546001600160a01b031633146103b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610261565b6103bc600061054c565b565b6000546001600160a01b031633146104185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610261565b6104246003838361061d565b5060028390556040517f5a907f45f325ee0bc65794b9b2dea3249b3c04aa431f380db15808c09fb763f19061045e908590859085906108b4565b60405180910390a1505050565b6000546001600160a01b031633146104c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610261565b6001600160a01b03811661052a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610261565b6105338161054c565b50565b60008261054385846105a9565b14949350505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b84518110156106155760008582815181106105cb576105cb6108ea565b602002602001015190508083116105f15760008381526020829052604090209250610602565b600081815260208490526040902092505b508061060d81610900565b9150506105ae565b509392505050565b82805461062990610879565b90600052602060002090601f01602090048101928261064b5760008555610691565b82601f106106645782800160ff19823516178555610691565b82800160010185558215610691579182015b82811115610691578235825591602001919060010190610676565b5061069d9291506106a1565b5090565b5b8082111561069d57600081556001016106a2565b80356001600160a01b03811681146106cd57600080fd5b919050565b600080600080606085870312156106e857600080fd5b6106f1856106b6565b935060208501359250604085013567ffffffffffffffff8082111561071557600080fd5b818701915087601f83011261072957600080fd5b81358181111561073857600080fd5b8860208260051b850101111561074d57600080fd5b95989497505060200194505050565b600060208083528351808285015260005b818110156107895785810183015185820160400152820161076d565b8181111561079b576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156107c357600080fd5b6107cc826106b6565b9392505050565b600080604083850312156107e657600080fd5b6107ef836106b6565b946020939093013593505050565b60008060006040848603121561081257600080fd5b83359250602084013567ffffffffffffffff8082111561083157600080fd5b818601915086601f83011261084557600080fd5b81358181111561085457600080fd5b87602082850101111561086657600080fd5b6020830194508093505050509250925092565b600181811c9082168061088d57607f821691505b602082108114156108ae57634e487b7160e01b600052602260045260246000fd5b50919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561092257634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220de9582d5310d29e8b67534c617c65a787a027b6c1daba37ae528ee8b9ad525c864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80638da5cb5b11610076578063bc5758861161005b578063bc57588614610141578063c29ba4c81461016f578063f2fde38b1461018257600080fd5b80638da5cb5b14610106578063ad4b85cc1461012157600080fd5b80631275fb7e146100a85780632eb4a7ab146100d05780636f1c6aab146100e7578063715018a6146100fc575b600080fd5b6100bb6100b63660046106d2565b610195565b60405190151581526020015b60405180910390f35b6100d960025481565b6040519081526020016100c7565b6100ef6102ca565b6040516100c7919061075c565b610104610358565b005b6000546040516001600160a01b0390911681526020016100c7565b6100d961012f3660046107b1565b60016020526000908152604090205481565b6100bb61014f3660046107d3565b6001600160a01b0391909116600090815260016020526040902054101590565b61010461017d3660046107fd565b6103be565b6101046101903660046107b1565b61046b565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526000908190605401604051602081830303815290604052805190602001209050610219848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506002549150849050610536565b61026a5760405162461bcd60e51b815260206004820152601b60248201527f57686974656c69737465723a20496e76616c69642070726f6f662e000000000060448201526064015b60405180910390fd5b6001600160a01b038616600081815260016020908152604091829020889055815192835282018790527f69c6d8b7196e71f451a2884f500930dfeb89625c59aba258581bb89d8e529ee6910160405180910390a150600195945050505050565b600380546102d790610879565b80601f016020809104026020016040519081016040528092919081815260200182805461030390610879565b80156103505780601f1061032557610100808354040283529160200191610350565b820191906000526020600020905b81548152906001019060200180831161033357829003601f168201915b505050505081565b6000546001600160a01b031633146103b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610261565b6103bc600061054c565b565b6000546001600160a01b031633146104185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610261565b6104246003838361061d565b5060028390556040517f5a907f45f325ee0bc65794b9b2dea3249b3c04aa431f380db15808c09fb763f19061045e908590859085906108b4565b60405180910390a1505050565b6000546001600160a01b031633146104c55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610261565b6001600160a01b03811661052a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610261565b6105338161054c565b50565b60008261054385846105a9565b14949350505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815b84518110156106155760008582815181106105cb576105cb6108ea565b602002602001015190508083116105f15760008381526020829052604090209250610602565b600081815260208490526040902092505b508061060d81610900565b9150506105ae565b509392505050565b82805461062990610879565b90600052602060002090601f01602090048101928261064b5760008555610691565b82601f106106645782800160ff19823516178555610691565b82800160010185558215610691579182015b82811115610691578235825591602001919060010190610676565b5061069d9291506106a1565b5090565b5b8082111561069d57600081556001016106a2565b80356001600160a01b03811681146106cd57600080fd5b919050565b600080600080606085870312156106e857600080fd5b6106f1856106b6565b935060208501359250604085013567ffffffffffffffff8082111561071557600080fd5b818701915087601f83011261072957600080fd5b81358181111561073857600080fd5b8860208260051b850101111561074d57600080fd5b95989497505060200194505050565b600060208083528351808285015260005b818110156107895785810183015185820160400152820161076d565b8181111561079b576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156107c357600080fd5b6107cc826106b6565b9392505050565b600080604083850312156107e657600080fd5b6107ef836106b6565b946020939093013593505050565b60008060006040848603121561081257600080fd5b83359250602084013567ffffffffffffffff8082111561083157600080fd5b818601915086601f83011261084557600080fd5b81358181111561085457600080fd5b87602082850101111561086657600080fd5b6020830194508093505050509250925092565b600181811c9082168061088d57607f821691505b602082108114156108ae57634e487b7160e01b600052602260045260246000fd5b50919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561092257634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220de9582d5310d29e8b67534c617c65a787a027b6c1daba37ae528ee8b9ad525c864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBorrowStatus(address,uint256)": {
        "params": {
          "newBorrowPart": "new borrow part of the user. ",
          "user": "address of the user"
        },
        "returns": {
          "success": "if user is allowed to borrow said new amount, returns true otherwise false"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMaxBorrow(address,uint256,bytes32[])": {
        "params": {
          "maxBorrow": "new max borrowPart for the user. ",
          "merkleProof": "merkle proof provided to user.",
          "user": "address of the user"
        },
        "returns": {
          "success": "if the user is indeed allowed to borrow said new amount"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBorrowStatus(address,uint256)": {
        "notice": "Get whether user is allowed to borrow"
      },
      "setMaxBorrow(address,uint256,bytes32[])": {
        "notice": "Function for the user to bring a merkle proof to set a new max borrow"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Whitelister.sol:Whitelister",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3596,
        "contract": "contracts/Whitelister.sol:Whitelister",
        "label": "amountAllowed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3598,
        "contract": "contracts/Whitelister.sol:Whitelister",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 3600,
        "contract": "contracts/Whitelister.sol:Whitelister",
        "label": "ipfsMerkleProofs",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}