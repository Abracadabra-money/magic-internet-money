{
  "address": "0x1fC83f75499b7620d53757f0b01E2ae626aAE530",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CurveToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM3POOL",
      "outputs": [
        {
          "internalType": "contract CurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TETHER",
      "outputs": [
        {
          "internalType": "contract TetherToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvx3CRV",
      "outputs": [
        {
          "internalType": "contract IConvex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "threecrv",
      "outputs": [
        {
          "internalType": "contract CurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8c751d4eca001b738f72c41e346a5665dc4447c738af5418c95c0b756186562",
  "receipt": {
    "to": null,
    "from": "0xb4EfdA6DAf5ef75D08869A0f9C0213278fb43b6C",
    "contractAddress": "0x1fC83f75499b7620d53757f0b01E2ae626aAE530",
    "transactionIndex": 60,
    "gasUsed": "550115",
    "logsBloom": "0x
    "blockHash": "0x704fe4287373cf32458f75b07d568e82e54c1c9a64c4df59bd3ff32850c7b3b9",
    "transactionHash": "0xd8c751d4eca001b738f72c41e346a5665dc4447c738af5418c95c0b756186562",
    "logs": [
      {
        "transactionIndex": 60,
        "blockNumber": 13148470,
        "transactionHash": "0xd8c751d4eca001b738f72c41e346a5665dc4447c738af5418c95c0b756186562",
        "address": "0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001fc83f75499b7620d53757f0b01e2ae626aae530",
          "0x0000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 126,
        "blockHash": "0x704fe4287373cf32458f75b07d568e82e54c1c9a64c4df59bd3ff32850c7b3b9"
      },
      {
        "transactionIndex": 60,
        "blockNumber": 13148470,
        "transactionHash": "0xd8c751d4eca001b738f72c41e346a5665dc4447c738af5418c95c0b756186562",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001fc83f75499b7620d53757f0b01e2ae626aae530",
          "0x000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 127,
        "blockHash": "0x704fe4287373cf32458f75b07d568e82e54c1c9a64c4df59bd3ff32850c7b3b9"
      },
      {
        "transactionIndex": 60,
        "blockNumber": 13148470,
        "transactionHash": "0xd8c751d4eca001b738f72c41e346a5665dc4447c738af5418c95c0b756186562",
        "address": "0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001fc83f75499b7620d53757f0b01e2ae626aae530",
          "0x000000000000000000000000d92494cb921e5c0d3a39ea88d0147bbd82e51008"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 128,
        "blockHash": "0x704fe4287373cf32458f75b07d568e82e54c1c9a64c4df59bd3ff32850c7b3b9"
      }
    ],
    "blockNumber": 13148470,
    "cumulativeGasUsed": "5631845",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7c8f642198b34b5572a79436b687b553",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CurveToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM3POOL\",\"outputs\":[{\"internalType\":\"contract CurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TETHER\",\"outputs\":[{\"internalType\":\"contract TetherToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx3CRV\",\"outputs\":[{\"internalType\":\"contract IConvex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threecrv\",\"outputs\":[{\"internalType\":\"contract CurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/3CrvLevSwapperV1.sol\":\"ThreeCrvLevSwapperV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/flat/3CrvLevSwapperV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIXED\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while(i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBatchFlashBorrower.sol@v1.0.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IBatchFlashBorrower {\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IFlashBorrower.sol@v1.0.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IFlashBorrower {\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IStrategy.sol@v1.0.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    // Send the assets to the Strategy and call skim to invest them\\n    function skim(uint256 amount) external;\\n\\n    // Harvest any profits made converted to the asset and pass them to the caller\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    // The actualAmount should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol@v1.0.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\ninterface IBentoBoxV1 {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n    event LogRegisterProtocol(address indexed protocol);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogStrategyDivest(address indexed token, uint256 amount);\\n    event LogStrategyInvest(address indexed token, uint256 amount);\\n    event LogStrategyLoss(address indexed token, uint256 amount);\\n    event LogStrategyProfit(address indexed token, uint256 amount);\\n    event LogStrategyQueued(address indexed token, address indexed strategy);\\n    event LogStrategySet(address indexed token, address indexed strategy);\\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\\n    function batchFlashLoan(IBatchFlashBorrower borrower, address[] calldata receivers, IERC20[] calldata tokens, uint256[] calldata amounts, bytes calldata data) external;\\n    function claimOwnership() external;\\n    function deploy(address masterContract, bytes calldata data, bool useCreate2) external payable;\\n    function deposit(IERC20 token_, address from, address to, uint256 amount, uint256 share) external payable returns (uint256 amountOut, uint256 shareOut);\\n    function flashLoan(IFlashBorrower borrower, address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n    function harvest(IERC20 token, bool balance, uint256 maxChangeAmount) external;\\n    function masterContractApproved(address, address) external view returns (bool);\\n    function masterContractOf(address) external view returns (address);\\n    function nonces(address) external view returns (uint256);\\n    function owner() external view returns (address);\\n    function pendingOwner() external view returns (address);\\n    function pendingStrategy(IERC20) external view returns (IStrategy);\\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function registerProtocol() external;\\n    function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;\\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\\n    function strategy(IERC20) external view returns (IStrategy);\\n    function strategyData(IERC20) external view returns (uint64 strategyStartDate, uint64 targetPercentage, uint128 balance);\\n    function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);\\n    function toShare(IERC20 token, uint256 amount, bool roundUp) external view returns (uint256 share);\\n    function totals(IERC20) external view returns (Rebase memory totals_);\\n    function transfer(IERC20 token, address from, address to, uint256 share) external;\\n    function transferMultiple(IERC20 token, address from, address[] calldata tos, uint256[] calldata shares) external;\\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\\n    function whitelistMasterContract(address masterContract, bool approved) external;\\n    function whitelistedMasterContracts(address) external view returns (bool);\\n    function withdraw(IERC20 token_, address from, address to, uint256 amount, uint256 share) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\\n// File contracts/swappers/Leverage/YVIBLevSwapper.sol\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\n\\ninterface CurvePool {\\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address receiver) external returns (uint256);\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n    function add_liquidity(uint256[3] memory amounts, uint256 _min_mint_amount) external;\\n}\\n\\ninterface YearnVault {\\n    function withdraw() external returns (uint256);\\n    function deposit(uint256 amount, address recipient) external returns (uint256);\\n}\\ninterface TetherToken {\\n    function approve(address _spender, uint256 _value) external;\\n}\\n\\ninterface IConvex is IERC20{\\n    function withdrawAndUnwrap(uint256 _amount) external;\\n    //deposit a curve token\\n    function deposit(uint256 _amount, address _to) external;\\n}\\n\\ncontract ThreeCrvLevSwapperV1 {\\n    using BoringMath for uint256;\\n    using BoringERC20 for IERC20;\\n\\n     // Local variables\\n    IBentoBoxV1 public constant bentoBox = IBentoBoxV1(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\\n    CurvePool public constant MIM3POOL = CurvePool(0x5a6A4D54456819380173272A5E8E9B9904BdF41B);\\n    CurvePool constant public threecrv = CurvePool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n    IConvex public constant cvx3CRV = IConvex(0xd92494CB921E5C0d3A39eA88d0147bbd82E51008);\\n    TetherToken public constant TETHER = TetherToken(0xdAC17F958D2ee523a2206206994597C13D831ec7); \\n    IERC20 public constant MIM = IERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\\n    IERC20 public constant CurveToken = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n\\n    constructor() public {\\n        MIM.approve(address(MIM3POOL), type(uint256).max);\\n        TETHER.approve(address(threecrv), type(uint256).max);\\n        CurveToken.approve(address(cvx3CRV), type(uint256).max);\\n    }\\n\\n\\n    // Swaps to a flexible amount, from an exact input amount\\n    function swap(\\n        address recipient,\\n        uint256 shareToMin,\\n        uint256 shareFrom\\n    ) public returns (uint256 extraShare, uint256 shareReturned) {\\n\\n        (uint256 amountFrom, ) = bentoBox.withdraw(MIM, address(this), address(this), 0, shareFrom);\\n\\n        uint256 amountIntermediate = MIM3POOL.exchange_underlying(0, 3, amountFrom, 0, address(this));\\n\\n        uint256[3] memory amountsAdded = [0,0, amountIntermediate];\\n\\n        threecrv.add_liquidity(amountsAdded, 0);\\n\\n        uint256 amountTo = CurveToken.balanceOf(address(this));\\n\\n        cvx3CRV.deposit(amountTo, address(bentoBox));\\n\\n        (, shareReturned) = bentoBox.deposit(cvx3CRV, address(bentoBox), recipient, amountTo, 0);\\n        extraShare = shareReturned.sub(shareToMin);\\n    }\\n}\",\"keccak256\":\"0xeb18ee6aedd90b6cbbde6c18ba9b8838e8ec9149d315a5d013783aa059beca99\",\"license\":\"MIXED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405163095ea7b360e01b81527399d8a9c45b2eca8864373a26d1459e3dff1e17f39063095ea7b39061006090735a6a4d54456819380173272a5e8e9b9904bdf41b9060001990600401610202565b602060405180830381600087803b15801561007a57600080fd5b505af115801561008e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b291906101db565b5060405163095ea7b360e01b815273dac17f958d2ee523a2206206994597c13d831ec79063095ea7b3906101029073bebc44782c7db0a1a60cb6fe97d0b483032ff1c79060001990600401610202565b600060405180830381600087803b15801561011c57600080fd5b505af1158015610130573d6000803e3d6000fd5b505060405163095ea7b360e01b8152736c3f90f043a72fa612cbac8115ee7e52bde6e490925063095ea7b391506101839073d92494cb921e5c0d3a39ea88d0147bbd82e510089060001990600401610202565b602060405180830381600087803b15801561019d57600080fd5b505af11580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d591906101db565b5061021b565b6000602082840312156101ec578081fd5b815180151581146101fb578182fd5b9392505050565b6001600160a01b03929092168252602082015260400190565b61074d8061022a6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638fe2508b1161005b5780638fe2508b146100c35780639f1d0f59146100cb578063daec383d146100ec578063e7fe541f146100f457610088565b806322a88c091461008d57806365f6a6be146100ab5780636b2ace87146100b357806378e7e3d1146100bb575b600080fd5b6100956100fc565b6040516100a29190610610565b60405180910390f35b610095610114565b61009561012c565b610095610144565b61009561015c565b6100de6100d9366004610596565b610174565b6040516100a2929190610709565b610095610516565b61009561052e565b735a6a4d54456819380173272a5e8e9b9904bdf41b81565b73bebc44782c7db0a1a60cb6fe97d0b483032ff1c781565b73f5bce5077908a1b7370b9ae04adc565ebd64396681565b73dac17f958d2ee523a2206206994597c13d831ec781565b736c3f90f043a72fa612cbac8115ee7e52bde6e49081565b60405163097da6d360e41b81526000908190819073f5bce5077908a1b7370b9ae04adc565ebd643966906397da6d30906101ce907399d8a9c45b2eca8864373a26d1459e3dff1e17f3903090819087908b9060040161065c565b6040805180830381600087803b1580156101e757600080fd5b505af11580156101fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021f91906105ed565b506040516322770cc360e11b8152909150600090735a6a4d54456819380173272a5e8e9b9904bdf41b906344ee198690610266908490600390879083903090600401610690565b602060405180830381600087803b15801561028057600080fd5b505af1158015610294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b891906105d5565b90506102c2610578565b50604080516060810182526000808252602082018190528183018490529151634515cef360e01b8152909173bebc44782c7db0a1a60cb6fe97d0b483032ff1c791634515cef39161031891859190600401610624565b600060405180830381600087803b15801561033257600080fd5b505af1158015610346573d6000803e3d6000fd5b50506040516370a0823160e01b815260009250736c3f90f043a72fa612cbac8115ee7e52bde6e49091506370a0823190610384903090600401610610565b60206040518083038186803b15801561039c57600080fd5b505afa1580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d491906105d5565b604051636e553f6560e01b815290915073d92494cb921e5c0d3a39ea88d0147bbd82e5100890636e553f659061042490849073f5bce5077908a1b7370b9ae04adc565ebd643966906004016106f2565b600060405180830381600087803b15801561043e57600080fd5b505af1158015610452573d6000803e3d6000fd5b505060405162ae511b60e21b815273f5bce5077908a1b7370b9ae04adc565ebd64396692506302b9446c91506104a99073d92494cb921e5c0d3a39ea88d0147bbd82e510089084908e90879060009060040161065c565b6040805180830381600087803b1580156104c257600080fd5b505af11580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa91906105ed565b955061050890508589610546565b955050505050935093915050565b7399d8a9c45b2eca8864373a26d1459e3dff1e17f381565b73d92494cb921e5c0d3a39ea88d0147bbd82e5100881565b808203828111156105725760405162461bcd60e51b8152600401610569906106c3565b60405180910390fd5b92915050565b60405180606001604052806003906020820280368337509192915050565b6000806000606084860312156105aa578283fd5b83356001600160a01b03811681146105c0578384fd5b95602085013595506040909401359392505050565b6000602082840312156105e6578081fd5b5051919050565b600080604083850312156105ff578182fd5b505080516020909101519092909150565b6001600160a01b0391909116815260200190565b60808101818460005b600381101561064c57815183526020928301929091019060010161062d565b5050508260608301529392505050565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b600f95860b81529390940b6020840152604083019190915260608201526001600160a01b03909116608082015260a00190565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b9182526001600160a01b0316602082015260400190565b91825260208201526040019056fea2646970667358221220f88c8d132c023a671848c8e9ce06a6b306eea907c36a12e2382b42bcedbf715264736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638fe2508b1161005b5780638fe2508b146100c35780639f1d0f59146100cb578063daec383d146100ec578063e7fe541f146100f457610088565b806322a88c091461008d57806365f6a6be146100ab5780636b2ace87146100b357806378e7e3d1146100bb575b600080fd5b6100956100fc565b6040516100a29190610610565b60405180910390f35b610095610114565b61009561012c565b610095610144565b61009561015c565b6100de6100d9366004610596565b610174565b6040516100a2929190610709565b610095610516565b61009561052e565b735a6a4d54456819380173272a5e8e9b9904bdf41b81565b73bebc44782c7db0a1a60cb6fe97d0b483032ff1c781565b73f5bce5077908a1b7370b9ae04adc565ebd64396681565b73dac17f958d2ee523a2206206994597c13d831ec781565b736c3f90f043a72fa612cbac8115ee7e52bde6e49081565b60405163097da6d360e41b81526000908190819073f5bce5077908a1b7370b9ae04adc565ebd643966906397da6d30906101ce907399d8a9c45b2eca8864373a26d1459e3dff1e17f3903090819087908b9060040161065c565b6040805180830381600087803b1580156101e757600080fd5b505af11580156101fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021f91906105ed565b506040516322770cc360e11b8152909150600090735a6a4d54456819380173272a5e8e9b9904bdf41b906344ee198690610266908490600390879083903090600401610690565b602060405180830381600087803b15801561028057600080fd5b505af1158015610294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b891906105d5565b90506102c2610578565b50604080516060810182526000808252602082018190528183018490529151634515cef360e01b8152909173bebc44782c7db0a1a60cb6fe97d0b483032ff1c791634515cef39161031891859190600401610624565b600060405180830381600087803b15801561033257600080fd5b505af1158015610346573d6000803e3d6000fd5b50506040516370a0823160e01b815260009250736c3f90f043a72fa612cbac8115ee7e52bde6e49091506370a0823190610384903090600401610610565b60206040518083038186803b15801561039c57600080fd5b505afa1580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d491906105d5565b604051636e553f6560e01b815290915073d92494cb921e5c0d3a39ea88d0147bbd82e5100890636e553f659061042490849073f5bce5077908a1b7370b9ae04adc565ebd643966906004016106f2565b600060405180830381600087803b15801561043e57600080fd5b505af1158015610452573d6000803e3d6000fd5b505060405162ae511b60e21b815273f5bce5077908a1b7370b9ae04adc565ebd64396692506302b9446c91506104a99073d92494cb921e5c0d3a39ea88d0147bbd82e510089084908e90879060009060040161065c565b6040805180830381600087803b1580156104c257600080fd5b505af11580156104d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fa91906105ed565b955061050890508589610546565b955050505050935093915050565b7399d8a9c45b2eca8864373a26d1459e3dff1e17f381565b73d92494cb921e5c0d3a39ea88d0147bbd82e5100881565b808203828111156105725760405162461bcd60e51b8152600401610569906106c3565b60405180910390fd5b92915050565b60405180606001604052806003906020820280368337509192915050565b6000806000606084860312156105aa578283fd5b83356001600160a01b03811681146105c0578384fd5b95602085013595506040909401359392505050565b6000602082840312156105e6578081fd5b5051919050565b600080604083850312156105ff578182fd5b505080516020909101519092909150565b6001600160a01b0391909116815260200190565b60808101818460005b600381101561064c57815183526020928301929091019060010161062d565b5050508260608301529392505050565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b600f95860b81529390940b6020840152604083019190915260608201526001600160a01b03909116608082015260a00190565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b9182526001600160a01b0316602082015260400190565b91825260208201526040019056fea2646970667358221220f88c8d132c023a671848c8e9ce06a6b306eea907c36a12e2382b42bcedbf715264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}