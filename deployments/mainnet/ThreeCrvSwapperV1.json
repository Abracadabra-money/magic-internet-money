{
  "address": "0xef9c97E356bc5fF2460E25f40f608101CE15d70b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MIM",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIM3POOL",
      "outputs": [
        {
          "internalType": "contract CurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TETHER",
      "outputs": [
        {
          "internalType": "contract TetherToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvx3CRV",
      "outputs": [
        {
          "internalType": "contract IConvex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "refundTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareFromSupplied",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareToExact",
          "type": "uint256"
        }
      ],
      "name": "swapExact",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shareUsed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "threecrv",
      "outputs": [
        {
          "internalType": "contract CurvePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8538d4cb59b266314daf378b48b867be08c50e9edf09ead6e71027a86aa10e78",
  "receipt": {
    "to": null,
    "from": "0xb4EfdA6DAf5ef75D08869A0f9C0213278fb43b6C",
    "contractAddress": "0xef9c97E356bc5fF2460E25f40f608101CE15d70b",
    "transactionIndex": 59,
    "gasUsed": "522647",
    "logsBloom": "0x
    "blockHash": "0x923acea6ce0e7d55ed16d2b53df3debe09762527b0bea611cd94b1ed0e5443cc",
    "transactionHash": "0x8538d4cb59b266314daf378b48b867be08c50e9edf09ead6e71027a86aa10e78",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 13148472,
        "transactionHash": "0x8538d4cb59b266314daf378b48b867be08c50e9edf09ead6e71027a86aa10e78",
        "address": "0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ef9c97e356bc5ff2460e25f40f608101ce15d70b",
          "0x0000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 90,
        "blockHash": "0x923acea6ce0e7d55ed16d2b53df3debe09762527b0bea611cd94b1ed0e5443cc"
      },
      {
        "transactionIndex": 59,
        "blockNumber": 13148472,
        "transactionHash": "0x8538d4cb59b266314daf378b48b867be08c50e9edf09ead6e71027a86aa10e78",
        "address": "0xdAC17F958D2ee523a2206206994597C13D831ec7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000ef9c97e356bc5ff2460e25f40f608101ce15d70b",
          "0x0000000000000000000000005a6a4d54456819380173272a5e8e9b9904bdf41b"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 91,
        "blockHash": "0x923acea6ce0e7d55ed16d2b53df3debe09762527b0bea611cd94b1ed0e5443cc"
      }
    ],
    "blockNumber": 13148472,
    "cumulativeGasUsed": "4670301",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "390975894e038f93ea1fc6bec33c39a2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM3POOL\",\"outputs\":[{\"internalType\":\"contract CurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TETHER\",\"outputs\":[{\"internalType\":\"contract TetherToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx3CRV\",\"outputs\":[{\"internalType\":\"contract IConvex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareFromSupplied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareToExact\",\"type\":\"uint256\"}],\"name\":\"swapExact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shareUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threecrv\",\"outputs\":[{\"internalType\":\"contract CurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap(address,address,address,uint256,uint256)\":{\"notice\":\"Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for at least 'amountToMin' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Returns the amount of tokens 'to' transferred to BentoBox. (The BentoBox skim function will be used by the caller to get the swapped funds).\"},\"swapExact(address,address,address,address,uint256,uint256)\":{\"notice\":\"Calculates the amount of token 'from' needed to complete the swap (amountFrom), this should be less than or equal to amountFromMax. Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for exactly 'exactAmountTo' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom). Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom). (The BentoBox skim function will be used by the caller to get the swapped funds).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/3CrvSwapperV1.sol\":\"ThreeCrvSwapperV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/flat/3CrvSwapperV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIXED\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n// File @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol@v1.4.2\\n// License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\\n// File @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol@v1.4.2\\n// License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\n// File contracts/interfaces/ISwapper.sol\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface ISwapper {\\n    /// @notice Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\n    /// Swaps it for at least 'amountToMin' of token 'to'.\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\n    /// Returns the amount of tokens 'to' transferred to BentoBox.\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        uint256 shareToMin,\\n        uint256 shareFrom\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\n\\n    /// @notice Calculates the amount of token 'from' needed to complete the swap (amountFrom),\\n    /// this should be less than or equal to amountFromMax.\\n    /// Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\n    /// Swaps it for exactly 'exactAmountTo' of token 'to'.\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\n    /// Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom).\\n    /// Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom).\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\n    function swapExact(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        address refundTo,\\n        uint256 shareFromSupplied,\\n        uint256 shareToExact\\n    ) external returns (uint256 shareUsed, uint256 shareReturned);\\n}\\n\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBatchFlashBorrower.sol@v1.0.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IBatchFlashBorrower {\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IFlashBorrower.sol@v1.0.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IFlashBorrower {\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IStrategy.sol@v1.0.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    // Send the assets to the Strategy and call skim to invest them\\n    function skim(uint256 amount) external;\\n\\n    // Harvest any profits made converted to the asset and pass them to the caller\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    // The actualAmount should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\\n\\n// File @sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol@v1.0.2\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\ninterface IBentoBoxV1 {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n    event LogRegisterProtocol(address indexed protocol);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogStrategyDivest(address indexed token, uint256 amount);\\n    event LogStrategyInvest(address indexed token, uint256 amount);\\n    event LogStrategyLoss(address indexed token, uint256 amount);\\n    event LogStrategyProfit(address indexed token, uint256 amount);\\n    event LogStrategyQueued(address indexed token, address indexed strategy);\\n    event LogStrategySet(address indexed token, address indexed strategy);\\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\\n    function batchFlashLoan(IBatchFlashBorrower borrower, address[] calldata receivers, IERC20[] calldata tokens, uint256[] calldata amounts, bytes calldata data) external;\\n    function claimOwnership() external;\\n    function deploy(address masterContract, bytes calldata data, bool useCreate2) external payable;\\n    function deposit(IERC20 token_, address from, address to, uint256 amount, uint256 share) external payable returns (uint256 amountOut, uint256 shareOut);\\n    function flashLoan(IFlashBorrower borrower, address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n    function harvest(IERC20 token, bool balance, uint256 maxChangeAmount) external;\\n    function masterContractApproved(address, address) external view returns (bool);\\n    function masterContractOf(address) external view returns (address);\\n    function nonces(address) external view returns (uint256);\\n    function owner() external view returns (address);\\n    function pendingOwner() external view returns (address);\\n    function pendingStrategy(IERC20) external view returns (IStrategy);\\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function registerProtocol() external;\\n    function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;\\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\\n    function strategy(IERC20) external view returns (IStrategy);\\n    function strategyData(IERC20) external view returns (uint64 strategyStartDate, uint64 targetPercentage, uint128 balance);\\n    function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);\\n    function toShare(IERC20 token, uint256 amount, bool roundUp) external view returns (uint256 share);\\n    function totals(IERC20) external view returns (Rebase memory totals_);\\n    function transfer(IERC20 token, address from, address to, uint256 share) external;\\n    function transferMultiple(IERC20 token, address from, address[] calldata tos, uint256[] calldata shares) external;\\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\\n    function whitelistMasterContract(address masterContract, bool approved) external;\\n    function whitelistedMasterContracts(address) external view returns (bool);\\n    function withdraw(IERC20 token_, address from, address to, uint256 amount, uint256 share) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\\n// File contracts/swappers/Liquidations/YVIBSwapper.sol\\n// License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface CurvePool {\\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address receiver) external returns (uint256);\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n    function remove_liquidity_one_coin(uint256 tokenAmount, int128 i, uint256 min_amount) external;\\n}\\n\\ninterface YearnVault {\\n    function withdraw() external returns (uint256);\\n    function deposit(uint256 amount, address recipient) external returns (uint256);\\n}\\ninterface TetherToken {\\n    function approve(address _spender, uint256 _value) external;\\n    function balanceOf(address user) external view returns (uint256);\\n}\\n\\ninterface IConvex is IERC20{\\n    function withdrawAndUnwrap(uint256 _amount) external;\\n}\\n\\ncontract ThreeCrvSwapperV1 is ISwapper {\\nusing BoringMath for uint256;\\n\\n    // Local variables\\n    IBentoBoxV1 public constant bentoBox = IBentoBoxV1(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\\n    \\n    CurvePool public constant MIM3POOL = CurvePool(0x5a6A4D54456819380173272A5E8E9B9904BdF41B);\\n    CurvePool constant public threecrv = CurvePool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n    IConvex public constant cvx3CRV = IConvex(0xd92494CB921E5C0d3A39eA88d0147bbd82E51008);\\n    TetherToken public constant TETHER = TetherToken(0xdAC17F958D2ee523a2206206994597C13D831ec7); \\n    IERC20 public constant MIM = IERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\\n\\n    constructor() public {\\n        MIM.approve(address(MIM3POOL), type(uint256).max);\\n        TETHER.approve(address(MIM3POOL), type(uint256).max);\\n    }\\n\\n    // Swaps to a flexible amount, from an exact input amount\\n    /// @inheritdoc ISwapper\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        uint256 shareToMin,\\n        uint256 shareFrom\\n    ) public override returns (uint256 extraShare, uint256 shareReturned) {\\n\\n        (uint256 amountFrom, ) = bentoBox.withdraw(fromToken, address(this), address(this), 0, shareFrom);\\n\\n        cvx3CRV.withdrawAndUnwrap(amountFrom);\\n\\n        threecrv.remove_liquidity_one_coin(amountFrom, 2, 0);\\n\\n        uint256 amountIntermediate = TETHER.balanceOf(address(this));\\n\\n        uint256 amountTo = MIM3POOL.exchange_underlying(3, 0, amountIntermediate, 0, address(bentoBox));\\n\\n        (, shareReturned) = bentoBox.deposit(toToken, address(bentoBox), recipient, amountTo, 0);\\n        extraShare = shareReturned.sub(shareToMin);\\n    }\\n\\n    // Swaps to an exact amount, from a flexible input amount\\n    /// @inheritdoc ISwapper\\n    function swapExact(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        address recipient,\\n        address refundTo,\\n        uint256 shareFromSupplied,\\n        uint256 shareToExact\\n    ) public override returns (uint256 shareUsed, uint256 shareReturned) {\\n        return (0,0);\\n    }\\n}\",\"keccak256\":\"0xa9d44d39f42555208ce2649111f62eef4ecab8074e9669fe2200ad1798f9f801\",\"license\":\"MIXED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405163095ea7b360e01b81527399d8a9c45b2eca8864373a26d1459e3dff1e17f39063095ea7b39061006090735a6a4d54456819380173272a5e8e9b9904bdf41b9060001990600401610160565b602060405180830381600087803b15801561007a57600080fd5b505af115801561008e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b29190610139565b5060405163095ea7b360e01b815273dac17f958d2ee523a2206206994597c13d831ec79063095ea7b39061010290735a6a4d54456819380173272a5e8e9b9904bdf41b9060001990600401610160565b600060405180830381600087803b15801561011c57600080fd5b505af1158015610130573d6000803e3d6000fd5b50505050610179565b60006020828403121561014a578081fd5b81518015158114610159578182fd5b9392505050565b6001600160a01b03929092168252602082015260400190565b61075a806101886000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806378e7e3d11161005b57806378e7e3d1146100dc578063daec383d146100e4578063e343fe12146100ec578063e7fe541f146100ff57610088565b806322a88c091461008d5780634622be90146100ab57806365f6a6be146100cc5780636b2ace87146100d4575b600080fd5b610095610107565b6040516100a29190610632565b60405180910390f35b6100be6100b9366004610530565b61011f565b6040516100a29291906106fe565b61009561012d565b610095610145565b61009561015d565b610095610175565b6100be6100fa36600461059d565b61018d565b6100956104e6565b735a6a4d54456819380173272a5e8e9b9904bdf41b81565b600080965096945050505050565b73bebc44782c7db0a1a60cb6fe97d0b483032ff1c781565b73f5bce5077908a1b7370b9ae04adc565ebd64396681565b73dac17f958d2ee523a2206206994597c13d831ec781565b7399d8a9c45b2eca8864373a26d1459e3dff1e17f381565b60405163097da6d360e41b81526000908190819073f5bce5077908a1b7370b9ae04adc565ebd643966906397da6d30906101d3908b903090819087908b90600401610646565b6040805180830381600087803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610224919061060f565b50604051630e5a77ed60e21b815290915073d92494cb921e5c0d3a39ea88d0147bbd82e5100890633969dfb49061025f9084906004016106dc565b600060405180830381600087803b15801561027957600080fd5b505af115801561028d573d6000803e3d6000fd5b5050604051630d2680e960e11b815273bebc44782c7db0a1a60cb6fe97d0b483032ff1c79250631a4d01d291506102ce9084906002906000906004016106e5565b600060405180830381600087803b1580156102e857600080fd5b505af11580156102fc573d6000803e3d6000fd5b50506040516370a0823160e01b81526000925073dac17f958d2ee523a2206206994597c13d831ec791506370a082319061033a903090600401610632565b60206040518083038186803b15801561035257600080fd5b505afa158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a91906105f7565b6040516322770cc360e11b8152909150600090735a6a4d54456819380173272a5e8e9b9904bdf41b906344ee1986906103e49060039085908790829073f5bce5077908a1b7370b9ae04adc565ebd6439669060040161067a565b602060405180830381600087803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043691906105f7565b60405162ae511b60e21b815290915073f5bce5077908a1b7370b9ae04adc565ebd643966906302b9446c90610478908c9084908d908790600090600401610646565b6040805180830381600087803b15801561049157600080fd5b505af11580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c9919061060f565b94506104d7905084886104fe565b94505050509550959350505050565b73d92494cb921e5c0d3a39ea88d0147bbd82e5100881565b8082038281111561052a5760405162461bcd60e51b8152600401610521906106ad565b60405180910390fd5b92915050565b60008060008060008060c08789031215610548578182fd5b86356105538161070c565b955060208701356105638161070c565b945060408701356105738161070c565b935060608701356105838161070c565b9598949750929560808101359460a0909101359350915050565b600080600080600060a086880312156105b4578081fd5b85356105bf8161070c565b945060208601356105cf8161070c565b935060408601356105df8161070c565b94979396509394606081013594506080013592915050565b600060208284031215610608578081fd5b5051919050565b60008060408385031215610621578182fd5b505080516020909101519092909150565b6001600160a01b0391909116815260200190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b600f95860b81529390940b6020840152604083019190915260608201526001600160a01b03909116608082015260a00190565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b90815260200190565b928352600f9190910b6020830152604082015260600190565b918252602082015260400190565b6001600160a01b038116811461072157600080fd5b5056fea26469706673582212202a933d6ccce78948c6a6e3695a824f3719e4734863930b4a308ce28dbff82e8464736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806378e7e3d11161005b57806378e7e3d1146100dc578063daec383d146100e4578063e343fe12146100ec578063e7fe541f146100ff57610088565b806322a88c091461008d5780634622be90146100ab57806365f6a6be146100cc5780636b2ace87146100d4575b600080fd5b610095610107565b6040516100a29190610632565b60405180910390f35b6100be6100b9366004610530565b61011f565b6040516100a29291906106fe565b61009561012d565b610095610145565b61009561015d565b610095610175565b6100be6100fa36600461059d565b61018d565b6100956104e6565b735a6a4d54456819380173272a5e8e9b9904bdf41b81565b600080965096945050505050565b73bebc44782c7db0a1a60cb6fe97d0b483032ff1c781565b73f5bce5077908a1b7370b9ae04adc565ebd64396681565b73dac17f958d2ee523a2206206994597c13d831ec781565b7399d8a9c45b2eca8864373a26d1459e3dff1e17f381565b60405163097da6d360e41b81526000908190819073f5bce5077908a1b7370b9ae04adc565ebd643966906397da6d30906101d3908b903090819087908b90600401610646565b6040805180830381600087803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610224919061060f565b50604051630e5a77ed60e21b815290915073d92494cb921e5c0d3a39ea88d0147bbd82e5100890633969dfb49061025f9084906004016106dc565b600060405180830381600087803b15801561027957600080fd5b505af115801561028d573d6000803e3d6000fd5b5050604051630d2680e960e11b815273bebc44782c7db0a1a60cb6fe97d0b483032ff1c79250631a4d01d291506102ce9084906002906000906004016106e5565b600060405180830381600087803b1580156102e857600080fd5b505af11580156102fc573d6000803e3d6000fd5b50506040516370a0823160e01b81526000925073dac17f958d2ee523a2206206994597c13d831ec791506370a082319061033a903090600401610632565b60206040518083038186803b15801561035257600080fd5b505afa158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a91906105f7565b6040516322770cc360e11b8152909150600090735a6a4d54456819380173272a5e8e9b9904bdf41b906344ee1986906103e49060039085908790829073f5bce5077908a1b7370b9ae04adc565ebd6439669060040161067a565b602060405180830381600087803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043691906105f7565b60405162ae511b60e21b815290915073f5bce5077908a1b7370b9ae04adc565ebd643966906302b9446c90610478908c9084908d908790600090600401610646565b6040805180830381600087803b15801561049157600080fd5b505af11580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c9919061060f565b94506104d7905084886104fe565b94505050509550959350505050565b73d92494cb921e5c0d3a39ea88d0147bbd82e5100881565b8082038281111561052a5760405162461bcd60e51b8152600401610521906106ad565b60405180910390fd5b92915050565b60008060008060008060c08789031215610548578182fd5b86356105538161070c565b955060208701356105638161070c565b945060408701356105738161070c565b935060608701356105838161070c565b9598949750929560808101359460a0909101359350915050565b600080600080600060a086880312156105b4578081fd5b85356105bf8161070c565b945060208601356105cf8161070c565b935060408601356105df8161070c565b94979396509394606081013594506080013592915050565b600060208284031215610608578081fd5b5051919050565b60008060408385031215610621578182fd5b505080516020909101519092909150565b6001600160a01b0391909116815260200190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b600f95860b81529390940b6020840152604083019190915260608201526001600160a01b03909116608082015260a00190565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b90815260200190565b928352600f9190910b6020830152604082015260600190565b918252602082015260400190565b6001600160a01b038116811461072157600080fd5b5056fea26469706673582212202a933d6ccce78948c6a6e3695a824f3719e4734863930b4a308ce28dbff82e8464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swap(address,address,address,uint256,uint256)": {
        "notice": "Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for at least 'amountToMin' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Returns the amount of tokens 'to' transferred to BentoBox. (The BentoBox skim function will be used by the caller to get the swapped funds)."
      },
      "swapExact(address,address,address,address,uint256,uint256)": {
        "notice": "Calculates the amount of token 'from' needed to complete the swap (amountFrom), this should be less than or equal to amountFromMax. Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for exactly 'exactAmountTo' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom). Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom). (The BentoBox skim function will be used by the caller to get the swapped funds)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}