{
  "address": "0xc33d23aA4b8a3dD2A3c539276Ab57363cC927202",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "bentoBox_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "magicInternetMoney_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "accruedAmount",
          "type": "uint128"
        }
      ],
      "name": "LogAccrue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "LogAddCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "part",
          "type": "uint256"
        }
      ],
      "name": "LogBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newLimit",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "perAddressPart",
          "type": "uint128"
        }
      ],
      "name": "LogChangeBorrowLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "LogExchangeRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "LogFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldInterestRate",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newInterestRate",
          "type": "uint64"
        }
      ],
      "name": "LogInterestChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowPart",
          "type": "uint256"
        }
      ],
      "name": "LogLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "LogRemoveCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "part",
          "type": "uint256"
        }
      ],
      "name": "LogRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feesEarnedFraction",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROW_OPENING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLATERIZATION_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInfo",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "lastAccrued",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "feesEarned",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "INTEREST_PER_SECOND",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "part",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowLimit",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "total",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "borrowPartPerAddress",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newBorrowLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "perAddressPart",
          "type": "uint128"
        }
      ],
      "name": "changeBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newInterestRate",
          "type": "uint64"
        }
      ],
      "name": "changeInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "cook",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value2",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxBorrowParts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract ISwapper",
          "name": "swapper",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "magicInternetMoney",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterContract",
      "outputs": [
        {
          "internalType": "contract CauldronV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "reduceSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "part",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrow",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "elastic",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "base",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateExchangeRate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "updated",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBorrowPart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateralShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x412f355aaf80fd2914e034a29ed2170afae17375e7526e597fccc3435c94650f",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0xc33d23aA4b8a3dD2A3c539276Ab57363cC927202",
    "transactionIndex": 192,
    "gasUsed": "4198127",
    "logsBloom": "0x
    "blockHash": "0xd694778225431b01bb375eb75026a386a258e4ed831c18e5fc5e37d05ec29f79",
    "transactionHash": "0x412f355aaf80fd2914e034a29ed2170afae17375e7526e597fccc3435c94650f",
    "logs": [
      {
        "transactionIndex": 192,
        "blockNumber": 14571199,
        "transactionHash": "0x412f355aaf80fd2914e034a29ed2170afae17375e7526e597fccc3435c94650f",
        "address": "0xc33d23aA4b8a3dD2A3c539276Ab57363cC927202",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb3485c2e209a5cfbdc1447674256578f1a80ee3"
        ],
        "data": "0x",
        "logIndex": 345,
        "blockHash": "0xd694778225431b01bb375eb75026a386a258e4ed831c18e5fc5e37d05ec29f79"
      }
    ],
    "blockNumber": 14571199,
    "cumulativeGasUsed": "22014651",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd96f48665a1410C0cd669A88898ecA36B9Fc2cce",
    "0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3"
  ],
  "solcInputHash": "2971b58a158933b69863a967e59de18e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"bentoBox_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"magicInternetMoney_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"accruedAmount\",\"type\":\"uint128\"}],\"name\":\"LogAccrue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogAddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newLimit\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"perAddressPart\",\"type\":\"uint128\"}],\"name\":\"LogChangeBorrowLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LogExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"LogFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldInterestRate\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newInterestRate\",\"type\":\"uint64\"}],\"name\":\"LogInterestChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowPart\",\"type\":\"uint256\"}],\"name\":\"LogLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"LogRemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"LogRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesEarnedFraction\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROW_OPENING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"lastAccrued\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"feesEarned\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"INTEREST_PER_SECOND\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowLimit\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"borrowPartPerAddress\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newBorrowLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"perAddressPart\",\"type\":\"uint128\"}],\"name\":\"changeBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newInterestRate\",\"type\":\"uint64\"}],\"name\":\"changeInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"cook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxBorrowParts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract ISwapper\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magicInternetMoney\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterContract\",\"outputs\":[{\"internalType\":\"contract CauldronV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reduceSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"elastic\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"base\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateExchangeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrowPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.\",\"kind\":\"dev\",\"methods\":{\"addCollateral(address,bool,uint256)\":{\"params\":{\"share\":\"The amount of shares to add for `to`.\",\"skim\":\"True if the amount should be skimmed from the deposit balance of msg.sender.x False if tokens from msg.sender in `bentoBox` should be transferred.\",\"to\":\"The receiver of the tokens.\"}},\"borrow(address,uint256)\":{\"returns\":{\"part\":\"Total part of the debt held by borrowers.\",\"share\":\"Total amount in shares borrowed.\"}},\"changeBorrowLimit(uint128,uint128)\":{\"params\":{\"newBorrowLimit\":\"new borrow limit\",\"perAddressPart\":\"new borrow limit per address\"}},\"changeInterestRate(uint64)\":{\"params\":{\"newInterestRate\":\"new interest rate\"}},\"cook(uint8[],uint256[],bytes[])\":{\"params\":{\"actions\":\"An array with a sequence of actions to execute (see ACTION_ declarations).\",\"datas\":\"A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\",\"values\":\"A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\"},\"returns\":{\"value1\":\"May contain the first positioned return value of the last executed action (if applicable).\",\"value2\":\"May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\"}},\"init(bytes)\":{\"details\":\"`data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)\"},\"liquidate(address[],uint256[],address,address)\":{\"params\":{\"maxBorrowParts\":\"A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\",\"to\":\"Address of the receiver in open liquidations if `swapper` is zero.\",\"users\":\"An array of user addresses.\"}},\"reduceSupply(uint256)\":{\"params\":{\"amount\":\"amount to reduce supply by\"}},\"removeCollateral(address,uint256)\":{\"params\":{\"share\":\"Amount of shares to remove.\",\"to\":\"The receiver of the shares.\"}},\"repay(address,bool,uint256)\":{\"params\":{\"part\":\"The amount to repay. See `userBorrowPart`.\",\"skim\":\"True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.\",\"to\":\"Address of the user this payment should go.\"},\"returns\":{\"amount\":\"The total amount repayed.\"}},\"setFeeTo(address)\":{\"params\":{\"newFeeTo\":\"The address of the receiver.\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}},\"updateExchangeRate()\":{\"returns\":{\"rate\":\"The new exchange rate.\",\"updated\":\"True if `exchangeRate` was updated.\"}}},\"title\":\"Cauldron\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accrue()\":{\"notice\":\"Accrues the interest on the borrowed tokens and handles the accumulation of fees.\"},\"addCollateral(address,bool,uint256)\":{\"notice\":\"Adds `collateral` from msg.sender to the account `to`.\"},\"borrow(address,uint256)\":{\"notice\":\"Sender borrows `amount` and transfers it to `to`.\"},\"changeBorrowLimit(uint128,uint128)\":{\"notice\":\"allows to change the borrow limit\"},\"changeInterestRate(uint64)\":{\"notice\":\"allows to change the interest rate\"},\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"constructor\":\"The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.\",\"cook(uint8[],uint256[],bytes[])\":{\"notice\":\"Executes a set of actions and allows composability (contract calls) to other contracts.\"},\"exchangeRate()\":{\"notice\":\"Exchange and interest rate tracking. This is 'cached' here because calls to Oracles can be very expensive.\"},\"init(bytes)\":{\"notice\":\"Serves as the constructor for clones, as clones can't have a regular constructor\"},\"liquidate(address[],uint256[],address,address)\":{\"notice\":\"Handles the liquidation of users' balances, once the users' amount of collateral is too low.\"},\"reduceSupply(uint256)\":{\"notice\":\"reduces the supply of MIM\"},\"removeCollateral(address,uint256)\":{\"notice\":\"Removes `share` amount of collateral and transfers it to `to`.\"},\"repay(address,bool,uint256)\":{\"notice\":\"Repays a loan.\"},\"setFeeTo(address)\":{\"notice\":\"Sets the beneficiary of interest accrued. MasterContract Only Admin function.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"updateExchangeRate()\":{\"notice\":\"Gets the exchange rate. I.e how much collateral to buy 1e18 asset. This function is supposed to be invoked if needed because Oracle queries can be expensive.\"},\"withdrawFees()\":{\"notice\":\"Withdraws the fees accumulated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CauldronV3.sol\":\"CauldronV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbde1619421fef865bf5f5f806e319900fb862e27f0aef6e0878e93f04f477601\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/Domain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Based on code and smartness by Ross Campbell and Keno\\n// Uses immutable to store the domain separator to reduce gas usage\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\npragma solidity 0.6.12;\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract Domain {\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n\\n    // solhint-disable var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;    \\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_SEPARATOR_SIGNATURE_HASH,\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    constructor() public {\\n        uint256 chainId; assembly {chainId := chainid()}\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _domainSeparator() internal view returns (bytes32) {\\n        uint256 chainId; assembly {chainId := chainid()}\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\n        digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    _domainSeparator(),\\n                    dataHash\\n                )\\n            );\\n    }\\n}\",\"keccak256\":\"0xe5215010c5a07b4b2fb1a2347b2106377678fea3d6f9ed656677c0570de2f6aa\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./Domain.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n// solhint-disable not-rely-on-time\\n\\n// Data part taken out for building of contracts that receive delegate calls\\ncontract ERC20Data {\\n    /// @notice owner > balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    /// @notice owner > spender > allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    /// @notice owner > nonce mapping. Used in `permit`.\\n    mapping(address => uint256) public nonces;\\n}\\n\\nabstract contract ERC20 is IERC20, Domain {\\n    /// @notice owner > balance mapping.\\n    mapping(address => uint256) public override balanceOf;\\n    /// @notice owner > spender > allowance mapping.\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n    /// @notice owner > nonce mapping. Used in `permit`.\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\\n    /// @param to The address to move the tokens.\\n    /// @param amount of the tokens to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transfer(address to, uint256 amount) public returns (bool) {\\n        // If `amount` is 0, or `msg.sender` is `to` nothing happens\\n        if (amount != 0 || msg.sender == to) {\\n            uint256 srcBalance = balanceOf[msg.sender];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n            if (msg.sender != to) {\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so low balance calls safe some gas\\n\\n                balanceOf[msg.sender] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount;\\n            }\\n        }\\n        emit Transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\\n    /// @param from Address to draw tokens from.\\n    /// @param to The address to move the tokens.\\n    /// @param amount The token amount to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (bool) {\\n        // If `amount` is 0, or `from` is `to` nothing happens\\n        if (amount != 0) {\\n            uint256 srcBalance = balanceOf[from];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n\\n            if (from != to) {\\n                uint256 spenderAllowance = allowance[from][msg.sender];\\n                // If allowance is infinite, don't decrease it to save on gas (breaks with EIP-20).\\n                if (spenderAllowance != type(uint256).max) {\\n                    require(spenderAllowance >= amount, \\\"ERC20: allowance too low\\\");\\n                    allowance[from][msg.sender] = spenderAllowance - amount; // Underflow is checked\\n                }\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so other failed calls safe some gas\\n\\n                balanceOf[from] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount;\\n            }\\n        }\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Approves `amount` from sender to be spend by `spender`.\\n    /// @param spender Address of the party that can draw from msg.sender's account.\\n    /// @param amount The maximum collective amount that `spender` can draw.\\n    /// @return (bool) Returns True if approved.\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparator();\\n    }\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /// @notice Approves `value` from `owner_` to be spend by `spender`.\\n    /// @param owner_ Address of the owner.\\n    /// @param spender The address of the spender that gets approved to draw from `owner_`.\\n    /// @param value The maximum collective amount that `spender` can draw.\\n    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\\n    function permit(\\n        address owner_,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(owner_ != address(0), \\\"ERC20: Owner cannot be 0\\\");\\n        require(block.timestamp < deadline, \\\"ERC20: Expired\\\");\\n        require(\\n            ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline))), v, r, s) ==\\n                owner_,\\n            \\\"ERC20: Invalid Signature\\\"\\n        );\\n        allowance[owner_][spender] = value;\\n        emit Approval(owner_, spender, value);\\n    }\\n}\\n\\ncontract ERC20WithSupply is IERC20, ERC20 {\\n    uint256 public override totalSupply;\\n\\n    function _mint(address user, uint256 amount) private {\\n        uint256 newTotalSupply = totalSupply + amount;\\n        require(newTotalSupply >= totalSupply, \\\"Mint overflow\\\");\\n        totalSupply = newTotalSupply;\\n        balanceOf[user] += amount;\\n    }\\n\\n    function _burn(address user, uint256 amount) private {\\n        require(balanceOf[user] >= amount, \\\"Burn too much\\\");\\n        totalSupply -= amount;\\n        balanceOf[user] -= amount;\\n    }\\n}\\n\",\"keccak256\":\"0x215d98f2006287eb309c79fcfebd5a25cf26e60ccf28923d203de07b6f671658\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf0da35541d6ae9e3c12fdd7c8d5d9584c56f9ac50d062efb8ca353ebd6ffd47d\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\",\"keccak256\":\"0xc8d7519d2bd26fc6d5125f8fc3fe2a6aada76f71f26b4712e0a4160f1cbdb2ba\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while(i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x08491b0b0af82e0d3c54a1274e745d95bd65c7638d240a83479121c6808bfc0e\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6bc52950e23c70a90a5b039697b77ba76360b62da6a06a61d3a1714b9c6c26b9\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"./BoringMath.sol\\\";\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\",\"keccak256\":\"0xab228bfa8a3019a4f7effa8aeeb05de141d328703d8a2f7b87ca811d0ca33196\",\"license\":\"MIT\"},\"@sushiswap/bentobox-sdk/contracts/IBatchFlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\\n\\ninterface IBatchFlashBorrower {\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\",\"keccak256\":\"0x825a46e61443df6e1289b513da4386d0413d0b5311553f3e7e7e5c90412ddd5d\",\"license\":\"MIT\"},\"@sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol';\\nimport './IBatchFlashBorrower.sol';\\nimport './IFlashBorrower.sol';\\nimport './IStrategy.sol';\\n\\ninterface IBentoBoxV1 {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n    event LogRegisterProtocol(address indexed protocol);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogStrategyDivest(address indexed token, uint256 amount);\\n    event LogStrategyInvest(address indexed token, uint256 amount);\\n    event LogStrategyLoss(address indexed token, uint256 amount);\\n    event LogStrategyProfit(address indexed token, uint256 amount);\\n    event LogStrategyQueued(address indexed token, address indexed strategy);\\n    event LogStrategySet(address indexed token, address indexed strategy);\\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\\n    function batchFlashLoan(IBatchFlashBorrower borrower, address[] calldata receivers, IERC20[] calldata tokens, uint256[] calldata amounts, bytes calldata data) external;\\n    function claimOwnership() external;\\n    function deploy(address masterContract, bytes calldata data, bool useCreate2) external payable;\\n    function deposit(IERC20 token_, address from, address to, uint256 amount, uint256 share) external payable returns (uint256 amountOut, uint256 shareOut);\\n    function flashLoan(IFlashBorrower borrower, address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n    function harvest(IERC20 token, bool balance, uint256 maxChangeAmount) external;\\n    function masterContractApproved(address, address) external view returns (bool);\\n    function masterContractOf(address) external view returns (address);\\n    function nonces(address) external view returns (uint256);\\n    function owner() external view returns (address);\\n    function pendingOwner() external view returns (address);\\n    function pendingStrategy(IERC20) external view returns (IStrategy);\\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function registerProtocol() external;\\n    function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;\\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\\n    function strategy(IERC20) external view returns (IStrategy);\\n    function strategyData(IERC20) external view returns (uint64 strategyStartDate, uint64 targetPercentage, uint128 balance);\\n    function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);\\n    function toShare(IERC20 token, uint256 amount, bool roundUp) external view returns (uint256 share);\\n    function totals(IERC20) external view returns (Rebase memory totals_);\\n    function transfer(IERC20 token, address from, address to, uint256 share) external;\\n    function transferMultiple(IERC20 token, address from, address[] calldata tos, uint256[] calldata shares) external;\\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\\n    function whitelistMasterContract(address masterContract, bool approved) external;\\n    function whitelistedMasterContracts(address) external view returns (bool);\\n    function withdraw(IERC20 token_, address from, address to, uint256 amount, uint256 share) external returns (uint256 amountOut, uint256 shareOut);\\n}\",\"keccak256\":\"0x9c025e34e0ef0c1fc9372ada9afa61925341ee93de9b9a79e77de55d715b6fb6\",\"license\":\"MIT\"},\"@sushiswap/bentobox-sdk/contracts/IFlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\\n\\ninterface IFlashBorrower {\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\",\"keccak256\":\"0x6e389a5acb7b3e7f337b7e28477e998228f05fc4c8ff877eab32d3e15037ccc2\",\"license\":\"MIT\"},\"@sushiswap/bentobox-sdk/contracts/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    // Send the assets to the Strategy and call skim to invest them\\n    function skim(uint256 amount) external;\\n\\n    // Harvest any profits made converted to the asset and pass them to the caller\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    // The actualAmount should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\",\"keccak256\":\"0x91c02244e1508cf8e4d6c45110c57142301c237e809dcad67b8022f83555ba13\",\"license\":\"MIT\"},\"contracts/CauldronV3.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\n// Cauldron\\r\\n\\r\\n//    (                (   (\\r\\n//    )\\\\      )    (   )\\\\  )\\\\ )  (\\r\\n//  (((_)  ( /(   ))\\\\ ((_)(()/(  )(    (    (\\r\\n//  )\\\\___  )(_)) /((_) _   ((_))(()\\\\   )\\\\   )\\\\ )\\r\\n// ((/ __|((_)_ (_))( | |  _| |  ((_) ((_) _(_/(\\r\\n//  | (__ / _` || || || |/ _` | | '_|/ _ \\\\| ' \\\\))\\r\\n//   \\\\___|\\\\__,_| \\\\_,_||_|\\\\__,_| |_|  \\\\___/|_||_|\\r\\n\\r\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\r\\n// Twitter: @Boring_Crypto\\r\\n\\r\\n// Special thanks to:\\r\\n// @0xKeno - for all his invaluable contributions\\r\\n// @burger_crypto - for the idea of trying to let the LPs benefit from liquidations\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\\\";\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\\\";\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/ERC20.sol\\\";\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\\\";\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol\\\";\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\r\\nimport \\\"@sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol\\\";\\r\\nimport \\\"./MagicInternetMoney.sol\\\";\\r\\nimport \\\"./interfaces/IOracle.sol\\\";\\r\\nimport \\\"./interfaces/ISwapper.sol\\\";\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\n/// @title Cauldron\\r\\n/// @dev This contract allows contract calls to any contract (except BentoBox)\\r\\n/// from arbitrary callers thus, don't trust calls from this contract in any circumstances.\\r\\ncontract CauldronV3 is BoringOwnable, IMasterContract {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringMath128 for uint128;\\r\\n    using RebaseLibrary for Rebase;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    event LogExchangeRate(uint256 rate);\\r\\n    event LogAccrue(uint128 accruedAmount);\\r\\n    event LogAddCollateral(address indexed from, address indexed to, uint256 share);\\r\\n    event LogRemoveCollateral(address indexed from, address indexed to, uint256 share);\\r\\n    event LogBorrow(address indexed from, address indexed to, uint256 amount, uint256 part);\\r\\n    event LogRepay(address indexed from, address indexed to, uint256 amount, uint256 part);\\r\\n    event LogFeeTo(address indexed newFeeTo);\\r\\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\\r\\n    event LogInterestChange(uint64 oldInterestRate, uint64 newInterestRate);\\r\\n    event LogChangeBorrowLimit(uint128 newLimit, uint128 perAddressPart);\\r\\n    event LogLiquidation(\\r\\n        address indexed from,\\r\\n        address indexed user,\\r\\n        address indexed to,\\r\\n        uint256 collateralShare,\\r\\n        uint256 borrowAmount,\\r\\n        uint256 borrowPart\\r\\n    );\\r\\n\\r\\n    // Immutables (for MasterContract and all clones)\\r\\n    IBentoBoxV1 public immutable bentoBox;\\r\\n    CauldronV3 public immutable masterContract;\\r\\n    IERC20 public immutable magicInternetMoney;\\r\\n\\r\\n    // MasterContract variables\\r\\n    address public feeTo;\\r\\n\\r\\n    // Per clone variables\\r\\n    // Clone init settings\\r\\n    IERC20 public collateral;\\r\\n    IOracle public oracle;\\r\\n    bytes public oracleData;\\r\\n\\r\\n    struct BorrowCap {\\r\\n        uint128 total;\\r\\n        uint128 borrowPartPerAddress;\\r\\n    }\\r\\n\\r\\n    BorrowCap public borrowLimit;\\r\\n\\r\\n    // Total amounts\\r\\n    uint256 public totalCollateralShare; // Total collateral supplied\\r\\n    Rebase public totalBorrow; // elastic = Total token amount to be repayed by borrowers, base = Total parts of the debt held by borrowers\\r\\n\\r\\n    // User balances\\r\\n    mapping(address => uint256) public userCollateralShare;\\r\\n    mapping(address => uint256) public userBorrowPart;\\r\\n\\r\\n    /// @notice Exchange and interest rate tracking.\\r\\n    /// This is 'cached' here because calls to Oracles can be very expensive.\\r\\n    uint256 public exchangeRate;\\r\\n\\r\\n    struct AccrueInfo {\\r\\n        uint64 lastAccrued;\\r\\n        uint128 feesEarned;\\r\\n        uint64 INTEREST_PER_SECOND;\\r\\n    }\\r\\n\\r\\n    AccrueInfo public accrueInfo;\\r\\n\\r\\n    /// @notice tracking of last interest update\\r\\n    uint256 private lastInterestUpdate;\\r\\n\\r\\n    // Settings\\r\\n    uint256 public COLLATERIZATION_RATE;\\r\\n    uint256 private constant COLLATERIZATION_RATE_PRECISION = 1e5; // Must be less than EXCHANGE_RATE_PRECISION (due to optimization in math)\\r\\n\\r\\n    uint256 private constant EXCHANGE_RATE_PRECISION = 1e18;\\r\\n\\r\\n    uint256 public LIQUIDATION_MULTIPLIER; \\r\\n    uint256 private constant LIQUIDATION_MULTIPLIER_PRECISION = 1e5;\\r\\n\\r\\n    uint256 public BORROW_OPENING_FEE;\\r\\n    uint256 private constant BORROW_OPENING_FEE_PRECISION = 1e5;\\r\\n\\r\\n    uint256 private constant DISTRIBUTION_PART = 10;\\r\\n    uint256 private constant DISTRIBUTION_PRECISION = 100;\\r\\n\\r\\n    modifier onlyMasterContractOwner() {\\r\\n        require(msg.sender == masterContract.owner(), \\\"Caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.\\r\\n    constructor(IBentoBoxV1 bentoBox_, IERC20 magicInternetMoney_) public {\\r\\n        bentoBox = bentoBox_;\\r\\n        magicInternetMoney = magicInternetMoney_;\\r\\n        masterContract = this;\\r\\n    }\\r\\n\\r\\n    /// @notice Serves as the constructor for clones, as clones can't have a regular constructor\\r\\n    /// @dev `data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)\\r\\n    function init(bytes calldata data) public payable override {\\r\\n        require(address(collateral) == address(0), \\\"Cauldron: already initialized\\\");\\r\\n        (collateral, oracle, oracleData, accrueInfo.INTEREST_PER_SECOND, LIQUIDATION_MULTIPLIER, COLLATERIZATION_RATE, BORROW_OPENING_FEE) = abi.decode(data, (IERC20, IOracle, bytes, uint64, uint256, uint256, uint256));\\r\\n        borrowLimit = BorrowCap(type(uint128).max, type(uint128).max);\\r\\n        require(address(collateral) != address(0), \\\"Cauldron: bad pair\\\");\\r\\n\\r\\n        (, exchangeRate) = oracle.get(oracleData);\\r\\n    }\\r\\n\\r\\n    /// @notice Accrues the interest on the borrowed tokens and handles the accumulation of fees.\\r\\n    function accrue() public {\\r\\n        AccrueInfo memory _accrueInfo = accrueInfo;\\r\\n        // Number of seconds since accrue was called\\r\\n        uint256 elapsedTime = block.timestamp - _accrueInfo.lastAccrued;\\r\\n        if (elapsedTime == 0) {\\r\\n            return;\\r\\n        }\\r\\n        _accrueInfo.lastAccrued = uint64(block.timestamp);\\r\\n\\r\\n        Rebase memory _totalBorrow = totalBorrow;\\r\\n        if (_totalBorrow.base == 0) {\\r\\n            accrueInfo = _accrueInfo;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Accrue interest\\r\\n        uint128 extraAmount = (uint256(_totalBorrow.elastic).mul(_accrueInfo.INTEREST_PER_SECOND).mul(elapsedTime) / 1e18).to128();\\r\\n        _totalBorrow.elastic = _totalBorrow.elastic.add(extraAmount);\\r\\n\\r\\n        _accrueInfo.feesEarned = _accrueInfo.feesEarned.add(extraAmount);\\r\\n        totalBorrow = _totalBorrow;\\r\\n        accrueInfo = _accrueInfo;\\r\\n\\r\\n        emit LogAccrue(extraAmount);\\r\\n    }\\r\\n\\r\\n    /// @notice Concrete implementation of `isSolvent`. Includes a third parameter to allow caching `exchangeRate`.\\r\\n    /// @param _exchangeRate The exchange rate. Used to cache the `exchangeRate` between calls.\\r\\n    function _isSolvent(address user, uint256 _exchangeRate) internal view returns (bool) {\\r\\n        // accrue must have already been called!\\r\\n        uint256 borrowPart = userBorrowPart[user];\\r\\n        if (borrowPart == 0) return true;\\r\\n        uint256 collateralShare = userCollateralShare[user];\\r\\n        if (collateralShare == 0) return false;\\r\\n\\r\\n        Rebase memory _totalBorrow = totalBorrow;\\r\\n\\r\\n        return\\r\\n            bentoBox.toAmount(\\r\\n                collateral,\\r\\n                collateralShare.mul(EXCHANGE_RATE_PRECISION / COLLATERIZATION_RATE_PRECISION).mul(COLLATERIZATION_RATE),\\r\\n                false\\r\\n            ) >=\\r\\n            // Moved exchangeRate here instead of dividing the other side to preserve more precision\\r\\n            borrowPart.mul(_totalBorrow.elastic).mul(_exchangeRate) / _totalBorrow.base;\\r\\n    }\\r\\n\\r\\n    /// @dev Checks if the user is solvent in the closed liquidation case at the end of the function body.\\r\\n    modifier solvent() {\\r\\n        _;\\r\\n        (, uint256 _exchangeRate) = updateExchangeRate();\\r\\n        require(_isSolvent(msg.sender, _exchangeRate), \\\"Cauldron: user insolvent\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the exchange rate. I.e how much collateral to buy 1e18 asset.\\r\\n    /// This function is supposed to be invoked if needed because Oracle queries can be expensive.\\r\\n    /// @return updated True if `exchangeRate` was updated.\\r\\n    /// @return rate The new exchange rate.\\r\\n    function updateExchangeRate() public returns (bool updated, uint256 rate) {\\r\\n        (updated, rate) = oracle.get(oracleData);\\r\\n\\r\\n        if (updated) {\\r\\n            exchangeRate = rate;\\r\\n            emit LogExchangeRate(rate);\\r\\n        } else {\\r\\n            // Return the old rate if fetching wasn't successful\\r\\n            rate = exchangeRate;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper function to move tokens.\\r\\n    /// @param token The ERC-20 token.\\r\\n    /// @param share The amount in shares to add.\\r\\n    /// @param total Grand total amount to deduct from this contract's balance. Only applicable if `skim` is True.\\r\\n    /// Only used for accounting checks.\\r\\n    /// @param skim If True, only does a balance check on this contract.\\r\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\r\\n    function _addTokens(\\r\\n        IERC20 token,\\r\\n        uint256 share,\\r\\n        uint256 total,\\r\\n        bool skim\\r\\n    ) internal {\\r\\n        if (skim) {\\r\\n            require(share <= bentoBox.balanceOf(token, address(this)).sub(total), \\\"Cauldron: Skim too much\\\");\\r\\n        } else {\\r\\n            bentoBox.transfer(token, msg.sender, address(this), share);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Adds `collateral` from msg.sender to the account `to`.\\r\\n    /// @param to The receiver of the tokens.\\r\\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.x\\r\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\r\\n    /// @param share The amount of shares to add for `to`.\\r\\n    function addCollateral(\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 share\\r\\n    ) public {\\r\\n        userCollateralShare[to] = userCollateralShare[to].add(share);\\r\\n        uint256 oldTotalCollateralShare = totalCollateralShare;\\r\\n        totalCollateralShare = oldTotalCollateralShare.add(share);\\r\\n        _addTokens(collateral, share, oldTotalCollateralShare, skim);\\r\\n        emit LogAddCollateral(skim ? address(bentoBox) : msg.sender, to, share);\\r\\n    }\\r\\n\\r\\n    /// @dev Concrete implementation of `removeCollateral`.\\r\\n    function _removeCollateral(address to, uint256 share) internal {\\r\\n        userCollateralShare[msg.sender] = userCollateralShare[msg.sender].sub(share);\\r\\n        totalCollateralShare = totalCollateralShare.sub(share);\\r\\n        emit LogRemoveCollateral(msg.sender, to, share);\\r\\n        bentoBox.transfer(collateral, address(this), to, share);\\r\\n    }\\r\\n\\r\\n    /// @notice Removes `share` amount of collateral and transfers it to `to`.\\r\\n    /// @param to The receiver of the shares.\\r\\n    /// @param share Amount of shares to remove.\\r\\n    function removeCollateral(address to, uint256 share) public solvent {\\r\\n        // accrue must be called because we check solvency\\r\\n        accrue();\\r\\n        _removeCollateral(to, share);\\r\\n    }\\r\\n\\r\\n    /// @dev Concrete implementation of `borrow`.\\r\\n    function _borrow(address to, uint256 amount) internal returns (uint256 part, uint256 share) {\\r\\n        uint256 feeAmount = amount.mul(BORROW_OPENING_FEE) / BORROW_OPENING_FEE_PRECISION; // A flat % fee is charged for any borrow\\r\\n        (totalBorrow, part) = totalBorrow.add(amount.add(feeAmount), true);\\r\\n\\r\\n        BorrowCap memory cap =  borrowLimit;\\r\\n\\r\\n        require(totalBorrow.elastic <= cap.total, \\\"Borrow Limit reached\\\");\\r\\n\\r\\n        accrueInfo.feesEarned = accrueInfo.feesEarned.add(uint128(feeAmount));\\r\\n        \\r\\n        uint256 newBorrowPart = userBorrowPart[msg.sender].add(part);\\r\\n        require(newBorrowPart <= cap.borrowPartPerAddress, \\\"Borrow Limit reached\\\");\\r\\n\\r\\n        userBorrowPart[msg.sender] = newBorrowPart;\\r\\n\\r\\n        // As long as there are tokens on this contract you can 'mint'... this enables limiting borrows\\r\\n        share = bentoBox.toShare(magicInternetMoney, amount, false);\\r\\n        bentoBox.transfer(magicInternetMoney, address(this), to, share);\\r\\n\\r\\n        emit LogBorrow(msg.sender, to, amount.add(feeAmount), part);\\r\\n    }\\r\\n\\r\\n    /// @notice Sender borrows `amount` and transfers it to `to`.\\r\\n    /// @return part Total part of the debt held by borrowers.\\r\\n    /// @return share Total amount in shares borrowed.\\r\\n    function borrow(address to, uint256 amount) public solvent returns (uint256 part, uint256 share) {\\r\\n        accrue();\\r\\n        (part, share) = _borrow(to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Concrete implementation of `repay`.\\r\\n    function _repay(\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 part\\r\\n    ) internal returns (uint256 amount) {\\r\\n        (totalBorrow, amount) = totalBorrow.sub(part, true);\\r\\n        userBorrowPart[to] = userBorrowPart[to].sub(part);\\r\\n\\r\\n        uint256 share = bentoBox.toShare(magicInternetMoney, amount, true);\\r\\n        bentoBox.transfer(magicInternetMoney, skim ? address(bentoBox) : msg.sender, address(this), share);\\r\\n        emit LogRepay(skim ? address(bentoBox) : msg.sender, to, amount, part);\\r\\n    }\\r\\n\\r\\n    /// @notice Repays a loan.\\r\\n    /// @param to Address of the user this payment should go.\\r\\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\\r\\n    /// False if tokens from msg.sender in `bentoBox` should be transferred.\\r\\n    /// @param part The amount to repay. See `userBorrowPart`.\\r\\n    /// @return amount The total amount repayed.\\r\\n    function repay(\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 part\\r\\n    ) public returns (uint256 amount) {\\r\\n        accrue();\\r\\n        amount = _repay(to, skim, part);\\r\\n    }\\r\\n\\r\\n    // Functions that need accrue to be called\\r\\n    uint8 internal constant ACTION_REPAY = 2;\\r\\n    uint8 internal constant ACTION_REMOVE_COLLATERAL = 4;\\r\\n    uint8 internal constant ACTION_BORROW = 5;\\r\\n    uint8 internal constant ACTION_GET_REPAY_SHARE = 6;\\r\\n    uint8 internal constant ACTION_GET_REPAY_PART = 7;\\r\\n    uint8 internal constant ACTION_ACCRUE = 8;\\r\\n\\r\\n    // Functions that don't need accrue to be called\\r\\n    uint8 internal constant ACTION_ADD_COLLATERAL = 10;\\r\\n    uint8 internal constant ACTION_UPDATE_EXCHANGE_RATE = 11;\\r\\n\\r\\n    // Function on BentoBox\\r\\n    uint8 internal constant ACTION_BENTO_DEPOSIT = 20;\\r\\n    uint8 internal constant ACTION_BENTO_WITHDRAW = 21;\\r\\n    uint8 internal constant ACTION_BENTO_TRANSFER = 22;\\r\\n    uint8 internal constant ACTION_BENTO_TRANSFER_MULTIPLE = 23;\\r\\n    uint8 internal constant ACTION_BENTO_SETAPPROVAL = 24;\\r\\n\\r\\n    // Any external call (except to BentoBox)\\r\\n    uint8 internal constant ACTION_CALL = 30;\\r\\n\\r\\n    int256 internal constant USE_VALUE1 = -1;\\r\\n    int256 internal constant USE_VALUE2 = -2;\\r\\n\\r\\n    /// @dev Helper function for choosing the correct value (`value1` or `value2`) depending on `inNum`.\\r\\n    function _num(\\r\\n        int256 inNum,\\r\\n        uint256 value1,\\r\\n        uint256 value2\\r\\n    ) internal pure returns (uint256 outNum) {\\r\\n        outNum = inNum >= 0 ? uint256(inNum) : (inNum == USE_VALUE1 ? value1 : value2);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper function for depositing into `bentoBox`.\\r\\n    function _bentoDeposit(\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        uint256 value1,\\r\\n        uint256 value2\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\r\\n        amount = int256(_num(amount, value1, value2)); // Done this way to avoid stack too deep errors\\r\\n        share = int256(_num(share, value1, value2));\\r\\n        return bentoBox.deposit{value: value}(token, msg.sender, to, uint256(amount), uint256(share));\\r\\n    }\\r\\n\\r\\n    /// @dev Helper function to withdraw from the `bentoBox`.\\r\\n    function _bentoWithdraw(\\r\\n        bytes memory data,\\r\\n        uint256 value1,\\r\\n        uint256 value2\\r\\n    ) internal returns (uint256, uint256) {\\r\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\r\\n        return bentoBox.withdraw(token, msg.sender, to, _num(amount, value1, value2), _num(share, value1, value2));\\r\\n    }\\r\\n\\r\\n    /// @dev Helper function to perform a contract call and eventually extracting revert messages on failure.\\r\\n    /// Calls to `bentoBox` are not allowed for obvious security reasons.\\r\\n    /// This also means that calls made from this contract shall *not* be trusted.\\r\\n    function _call(\\r\\n        uint256 value,\\r\\n        bytes memory data,\\r\\n        uint256 value1,\\r\\n        uint256 value2\\r\\n    ) internal returns (bytes memory, uint8) {\\r\\n        (address callee, bytes memory callData, bool useValue1, bool useValue2, uint8 returnValues) =\\r\\n            abi.decode(data, (address, bytes, bool, bool, uint8));\\r\\n\\r\\n        if (useValue1 && !useValue2) {\\r\\n            callData = abi.encodePacked(callData, value1);\\r\\n        } else if (!useValue1 && useValue2) {\\r\\n            callData = abi.encodePacked(callData, value2);\\r\\n        } else if (useValue1 && useValue2) {\\r\\n            callData = abi.encodePacked(callData, value1, value2);\\r\\n        }\\r\\n\\r\\n        require(callee != address(bentoBox) && callee != address(this), \\\"Cauldron: can't call\\\");\\r\\n\\r\\n        (bool success, bytes memory returnData) = callee.call{value: value}(callData);\\r\\n        require(success, \\\"Cauldron: call failed\\\");\\r\\n        return (returnData, returnValues);\\r\\n    }\\r\\n\\r\\n    struct CookStatus {\\r\\n        bool needsSolvencyCheck;\\r\\n        bool hasAccrued;\\r\\n    }\\r\\n\\r\\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\\r\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\r\\n    /// @param values A one-to-one mapped array to `actions`. ETH amounts to send along with the actions.\\r\\n    /// Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\\r\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\r\\n    /// @return value1 May contain the first positioned return value of the last executed action (if applicable).\\r\\n    /// @return value2 May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\\r\\n    function cook(\\r\\n        uint8[] calldata actions,\\r\\n        uint256[] calldata values,\\r\\n        bytes[] calldata datas\\r\\n    ) external payable returns (uint256 value1, uint256 value2) {\\r\\n        CookStatus memory status;\\r\\n        for (uint256 i = 0; i < actions.length; i++) {\\r\\n            uint8 action = actions[i];\\r\\n            if (!status.hasAccrued && action < 10) {\\r\\n                accrue();\\r\\n                status.hasAccrued = true;\\r\\n            }\\r\\n            if (action == ACTION_ADD_COLLATERAL) {\\r\\n                (int256 share, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\\r\\n                addCollateral(to, skim, _num(share, value1, value2));\\r\\n            } else if (action == ACTION_REPAY) {\\r\\n                (int256 part, address to, bool skim) = abi.decode(datas[i], (int256, address, bool));\\r\\n                _repay(to, skim, _num(part, value1, value2));\\r\\n            } else if (action == ACTION_REMOVE_COLLATERAL) {\\r\\n                (int256 share, address to) = abi.decode(datas[i], (int256, address));\\r\\n                _removeCollateral(to, _num(share, value1, value2));\\r\\n                status.needsSolvencyCheck = true;\\r\\n            } else if (action == ACTION_BORROW) {\\r\\n                (int256 amount, address to) = abi.decode(datas[i], (int256, address));\\r\\n                (value1, value2) = _borrow(to, _num(amount, value1, value2));\\r\\n                status.needsSolvencyCheck = true;\\r\\n            } else if (action == ACTION_UPDATE_EXCHANGE_RATE) {\\r\\n                (bool must_update, uint256 minRate, uint256 maxRate) = abi.decode(datas[i], (bool, uint256, uint256));\\r\\n                (bool updated, uint256 rate) = updateExchangeRate();\\r\\n                require((!must_update || updated) && rate > minRate && (maxRate == 0 || rate > maxRate), \\\"Cauldron: rate not ok\\\");\\r\\n            } else if (action == ACTION_BENTO_SETAPPROVAL) {\\r\\n                (address user, address _masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) =\\r\\n                    abi.decode(datas[i], (address, address, bool, uint8, bytes32, bytes32));\\r\\n                bentoBox.setMasterContractApproval(user, _masterContract, approved, v, r, s);\\r\\n            } else if (action == ACTION_BENTO_DEPOSIT) {\\r\\n                (value1, value2) = _bentoDeposit(datas[i], values[i], value1, value2);\\r\\n            } else if (action == ACTION_BENTO_WITHDRAW) {\\r\\n                (value1, value2) = _bentoWithdraw(datas[i], value1, value2);\\r\\n            } else if (action == ACTION_BENTO_TRANSFER) {\\r\\n                (IERC20 token, address to, int256 share) = abi.decode(datas[i], (IERC20, address, int256));\\r\\n                bentoBox.transfer(token, msg.sender, to, _num(share, value1, value2));\\r\\n            } else if (action == ACTION_BENTO_TRANSFER_MULTIPLE) {\\r\\n                (IERC20 token, address[] memory tos, uint256[] memory shares) = abi.decode(datas[i], (IERC20, address[], uint256[]));\\r\\n                bentoBox.transferMultiple(token, msg.sender, tos, shares);\\r\\n            } else if (action == ACTION_CALL) {\\r\\n                (bytes memory returnData, uint8 returnValues) = _call(values[i], datas[i], value1, value2);\\r\\n\\r\\n                if (returnValues == 1) {\\r\\n                    (value1) = abi.decode(returnData, (uint256));\\r\\n                } else if (returnValues == 2) {\\r\\n                    (value1, value2) = abi.decode(returnData, (uint256, uint256));\\r\\n                }\\r\\n            } else if (action == ACTION_GET_REPAY_SHARE) {\\r\\n                int256 part = abi.decode(datas[i], (int256));\\r\\n                value1 = bentoBox.toShare(magicInternetMoney, totalBorrow.toElastic(_num(part, value1, value2), true), true);\\r\\n            } else if (action == ACTION_GET_REPAY_PART) {\\r\\n                int256 amount = abi.decode(datas[i], (int256));\\r\\n                value1 = totalBorrow.toBase(_num(amount, value1, value2), false);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (status.needsSolvencyCheck) {\\r\\n            (, uint256 _exchangeRate) = updateExchangeRate();\\r\\n            require(_isSolvent(msg.sender, _exchangeRate), \\\"Cauldron: user insolvent\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Handles the liquidation of users' balances, once the users' amount of collateral is too low.\\r\\n    /// @param users An array of user addresses.\\r\\n    /// @param maxBorrowParts A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\\r\\n    /// @param to Address of the receiver in open liquidations if `swapper` is zero.\\r\\n    function liquidate(\\r\\n        address[] calldata users,\\r\\n        uint256[] calldata maxBorrowParts,\\r\\n        address to,\\r\\n        ISwapper swapper\\r\\n    ) public {\\r\\n        // Oracle can fail but we still need to allow liquidations\\r\\n        (, uint256 _exchangeRate) = updateExchangeRate();\\r\\n        accrue();\\r\\n\\r\\n        uint256 allCollateralShare;\\r\\n        uint256 allBorrowAmount;\\r\\n        uint256 allBorrowPart;\\r\\n        Rebase memory _totalBorrow = totalBorrow;\\r\\n        Rebase memory bentoBoxTotals = bentoBox.totals(collateral);\\r\\n        for (uint256 i = 0; i < users.length; i++) {\\r\\n            address user = users[i];\\r\\n            if (!_isSolvent(user, _exchangeRate)) {\\r\\n                uint256 borrowPart;\\r\\n                {\\r\\n                    uint256 availableBorrowPart = userBorrowPart[user];\\r\\n                    borrowPart = maxBorrowParts[i] > availableBorrowPart ? availableBorrowPart : maxBorrowParts[i];\\r\\n                    userBorrowPart[user] = availableBorrowPart.sub(borrowPart);\\r\\n                }\\r\\n                uint256 borrowAmount = _totalBorrow.toElastic(borrowPart, false);\\r\\n                uint256 collateralShare =\\r\\n                    bentoBoxTotals.toBase(\\r\\n                        borrowAmount.mul(LIQUIDATION_MULTIPLIER).mul(_exchangeRate) /\\r\\n                            (LIQUIDATION_MULTIPLIER_PRECISION * EXCHANGE_RATE_PRECISION),\\r\\n                        false\\r\\n                    );\\r\\n\\r\\n                userCollateralShare[user] = userCollateralShare[user].sub(collateralShare);\\r\\n                emit LogRemoveCollateral(user, to, collateralShare);\\r\\n                emit LogRepay(msg.sender, user, borrowAmount, borrowPart);\\r\\n                emit LogLiquidation(msg.sender, user, to, collateralShare, borrowAmount, borrowPart);\\r\\n\\r\\n                // Keep totals\\r\\n                allCollateralShare = allCollateralShare.add(collateralShare);\\r\\n                allBorrowAmount = allBorrowAmount.add(borrowAmount);\\r\\n                allBorrowPart = allBorrowPart.add(borrowPart);\\r\\n            }\\r\\n        }\\r\\n        require(allBorrowAmount != 0, \\\"Cauldron: all are solvent\\\");\\r\\n        _totalBorrow.elastic = _totalBorrow.elastic.sub(allBorrowAmount.to128());\\r\\n        _totalBorrow.base = _totalBorrow.base.sub(allBorrowPart.to128());\\r\\n        totalBorrow = _totalBorrow;\\r\\n        totalCollateralShare = totalCollateralShare.sub(allCollateralShare);\\r\\n\\r\\n        // Apply a percentual fee share to sSpell holders\\r\\n        \\r\\n        {\\r\\n            uint256 distributionAmount = (allBorrowAmount.mul(LIQUIDATION_MULTIPLIER) / LIQUIDATION_MULTIPLIER_PRECISION).sub(allBorrowAmount).mul(DISTRIBUTION_PART) / DISTRIBUTION_PRECISION; // Distribution Amount\\r\\n            allBorrowAmount = allBorrowAmount.add(distributionAmount);\\r\\n            accrueInfo.feesEarned = accrueInfo.feesEarned.add(distributionAmount.to128());\\r\\n        }\\r\\n\\r\\n        uint256 allBorrowShare = bentoBox.toShare(magicInternetMoney, allBorrowAmount, true);\\r\\n\\r\\n        // Swap using a swapper freely chosen by the caller\\r\\n        // Open (flash) liquidation: get proceeds first and provide the borrow after\\r\\n        bentoBox.transfer(collateral, address(this), to, allCollateralShare);\\r\\n        if (swapper != ISwapper(0)) {\\r\\n            swapper.swap(collateral, magicInternetMoney, msg.sender, allBorrowShare, allCollateralShare);\\r\\n        }\\r\\n\\r\\n        allBorrowShare = bentoBox.toShare(magicInternetMoney, allBorrowAmount, true);\\r\\n        bentoBox.transfer(magicInternetMoney, msg.sender, address(this), allBorrowShare);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws the fees accumulated.\\r\\n    function withdrawFees() public {\\r\\n        accrue();\\r\\n        address _feeTo = masterContract.feeTo();\\r\\n        uint256 _feesEarned = accrueInfo.feesEarned;\\r\\n        uint256 share = bentoBox.toShare(magicInternetMoney, _feesEarned, false);\\r\\n        bentoBox.transfer(magicInternetMoney, address(this), _feeTo, share);\\r\\n        accrueInfo.feesEarned = 0;\\r\\n\\r\\n        emit LogWithdrawFees(_feeTo, _feesEarned);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the beneficiary of interest accrued.\\r\\n    /// MasterContract Only Admin function.\\r\\n    /// @param newFeeTo The address of the receiver.\\r\\n    function setFeeTo(address newFeeTo) public onlyOwner {\\r\\n        feeTo = newFeeTo;\\r\\n        emit LogFeeTo(newFeeTo);\\r\\n    }\\r\\n\\r\\n    /// @notice reduces the supply of MIM\\r\\n    /// @param amount amount to reduce supply by\\r\\n    function reduceSupply(uint256 amount) public onlyMasterContractOwner {\\r\\n        bentoBox.withdraw(magicInternetMoney, address(this), masterContract.owner(), amount, 0);\\r\\n    }\\r\\n\\r\\n    /// @notice allows to change the interest rate\\r\\n    /// @param newInterestRate new interest rate\\r\\n    function changeInterestRate(uint64 newInterestRate) public onlyMasterContractOwner {\\r\\n        uint64 oldInterestRate = accrueInfo.INTEREST_PER_SECOND;\\r\\n\\r\\n        require(newInterestRate < oldInterestRate + oldInterestRate * 3 / 4 , \\\"Interest rate increase > 75%\\\");\\r\\n        require(lastInterestUpdate + 3 days < block.timestamp, \\\"Update only every 3 days\\\");\\r\\n\\r\\n        lastInterestUpdate = block.timestamp;\\r\\n        accrueInfo.INTEREST_PER_SECOND = newInterestRate;\\r\\n        emit LogInterestChange(oldInterestRate, newInterestRate);\\r\\n    }\\r\\n\\r\\n    /// @notice allows to change the borrow limit\\r\\n    /// @param newBorrowLimit new borrow limit\\r\\n    /// @param perAddressPart new borrow limit per address\\r\\n    function changeBorrowLimit(uint128 newBorrowLimit, uint128 perAddressPart) public onlyMasterContractOwner {\\r\\n        borrowLimit = BorrowCap(newBorrowLimit, perAddressPart);\\r\\n        emit LogChangeBorrowLimit(newBorrowLimit, perAddressPart);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x385dc48e5457167c4ceea3ae5bb3b35a103aaeb8b5f1d9674acab32881a369b9\",\"license\":\"UNLICENSED\"},\"contracts/MagicInternetMoney.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Magic Internet Money\\r\\n\\r\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557\\r\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\r\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\r\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\r\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\r\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\r\\n\\r\\n// BoringCrypto, 0xMerlin\\r\\n\\r\\npragma solidity 0.6.12;\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\\\";\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/ERC20.sol\\\";\\r\\nimport \\\"@sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol\\\";\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\\\";\\r\\n\\r\\n/// @title Cauldron\\r\\n/// @dev This contract allows contract calls to any contract (except BentoBox)\\r\\n/// from arbitrary callers thus, don't trust calls from this contract in any circumstances.\\r\\ncontract MagicInternetMoney is ERC20, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    // ERC20 'variables'\\r\\n    string public constant symbol = \\\"MIM\\\";\\r\\n    string public constant name = \\\"Magic Internet Money\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint256 public override totalSupply;\\r\\n\\r\\n    struct Minting {\\r\\n        uint128 time;\\r\\n        uint128 amount;\\r\\n    }\\r\\n\\r\\n    Minting public lastMint;\\r\\n    uint256 private constant MINTING_PERIOD = 24 hours;\\r\\n    uint256 private constant MINTING_INCREASE = 15000;\\r\\n    uint256 private constant MINTING_PRECISION = 1e5;\\r\\n\\r\\n    function mint(address to, uint256 amount) public onlyOwner {\\r\\n        require(to != address(0), \\\"MIM: no mint to zero address\\\");\\r\\n\\r\\n        // Limits the amount minted per period to a convergence function, with the period duration restarting on every mint\\r\\n        uint256 totalMintedAmount = uint256(lastMint.time < block.timestamp - MINTING_PERIOD ? 0 : lastMint.amount).add(amount);\\r\\n        require(totalSupply == 0 || totalSupply.mul(MINTING_INCREASE) / MINTING_PRECISION >= totalMintedAmount);\\r\\n\\r\\n        lastMint.time = block.timestamp.to128();\\r\\n        lastMint.amount = totalMintedAmount.to128();\\r\\n\\r\\n        totalSupply = totalSupply + amount;\\r\\n        balanceOf[to] += amount;\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function mintToBentoBox(address clone, uint256 amount, IBentoBoxV1 bentoBox) public onlyOwner {\\r\\n        mint(address(bentoBox), amount);\\r\\n        bentoBox.deposit(IERC20(address(this)), address(bentoBox), clone, amount, 0);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public {\\r\\n        require(amount <= balanceOf[msg.sender], \\\"MIM: not enough\\\");\\r\\n\\r\\n        balanceOf[msg.sender] -= amount;\\r\\n        totalSupply -= amount;\\r\\n        emit Transfer(msg.sender, address(0), amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa5b8321d8583abe3d8639ba67b7315fed5e94179f5aafbf8f0cfb4e832ea38a1\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IOracle {\\r\\n    /// @notice Get the latest exchange rate.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return success if no valid (recent) rate is available, return false else true.\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\\r\\n\\r\\n    /// @notice Check the last exchange rate without any state changes.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return success if no valid (recent) rate is available, return false else true.\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\\r\\n\\r\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\r\\n\\r\\n    /// @notice Returns a human readable (short) name about this oracle.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return (string) A human readable symbol name about this oracle.\\r\\n    function symbol(bytes calldata data) external view returns (string memory);\\r\\n\\r\\n    /// @notice Returns a human readable name about this oracle.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return (string) A human readable name about this oracle.\\r\\n    function name(bytes calldata data) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x724e4079842c80db8202bbd75fd9ccee057012cf82f5615898f76ce550ff7f46\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\ninterface ISwapper {\\r\\n    /// @notice Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\r\\n    /// Swaps it for at least 'amountToMin' of token 'to'.\\r\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\r\\n    /// Returns the amount of tokens 'to' transferred to BentoBox.\\r\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\r\\n    function swap(\\r\\n        IERC20 fromToken,\\r\\n        IERC20 toToken,\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom\\r\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\r\\n\\r\\n    /// @notice Calculates the amount of token 'from' needed to complete the swap (amountFrom),\\r\\n    /// this should be less than or equal to amountFromMax.\\r\\n    /// Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\r\\n    /// Swaps it for exactly 'exactAmountTo' of token 'to'.\\r\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\r\\n    /// Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom).\\r\\n    /// Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom).\\r\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\r\\n    function swapExact(\\r\\n        IERC20 fromToken,\\r\\n        IERC20 toToken,\\r\\n        address recipient,\\r\\n        address refundTo,\\r\\n        uint256 shareFromSupplied,\\r\\n        uint256 shareToExact\\r\\n    ) external returns (uint256 shareUsed, uint256 shareReturned);\\r\\n}\\r\\n\",\"keccak256\":\"0xd151bf0634f058c4541cc3c0b0627eda152f11f887ce921c5d385e5e97450cfd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162004caf38038062004caf833981016040819052620000349162000099565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606092831b811660805290821b1660c05230901b60a052620000f0565b60008060408385031215620000ac578182fd5b8251620000b981620000d7565b6020840151909250620000cc81620000d7565b809150509250929050565b6001600160a01b0381168114620000ed57600080fd5b50565b60805160601c60a05160601c60c05160601c614ab2620001fd60003980610a795280610b3c528061157b52806118d852806120325280612175528061223b52806122ff5280612370528061292752806129d75280612cd05280612d925250806107dc528061098c52806117e852806118fa52806123cc528061249c525080610a445280610b0f5280611145528061130d52806113e5528061154c528061172152806118a95280611a925280611bb9528061200552806120cc528061220e52806122d252806128f852806129a85280612a035280612a8d5280612c9b5280612d655280612eeb52806130935280613149528061322552806133aa52806135ea52806136c75250614ab26000f3fe6080604052600436106102045760003560e01c80637dc0d1d011610118578063b27c0e74116100a0578063e30c39781161006f578063e30c397814610554578063e551d11d14610569578063f46901ed1461057e578063f7dad4341461059e578063f8ba4cff146105be57610204565b8063b27c0e74146104f1578063c7ee2a7b14610515578063cd446e221461052a578063d8dfeb451461053f57610204565b8063876467f8116100e7578063876467f8146104725780638da5cb5b14610492578063912860c5146104a75780639b352ae1146104c7578063aba024f4146104dc57610204565b80637dc0d1d0146103fa578063806234441461040f5780638285ef401461042f578063860ffea11461045257610204565b8063476343ee1161019b5780634e71e0c81161016a5780634e71e0c814610386578063656f3d641461039b5780636b2ace87146103ae5780636ec097fb146103c357806374645ff3146103d857610204565b8063476343ee1461031057806348e4163e146103255780634b8a3529146103455780634ddf47d41461037357610204565b80631c9e379b116101d75780631c9e379b146102a65780631cd4c966146102c65780633ba0b9a9146102e6578063473e3ce7146102fb57610204565b8063017e7e581461020957806302ce728f14610234578063078dfbe71461025757806315294c4014610279575b600080fd5b34801561021557600080fd5b5061021e6105d3565b60405161022b919061427f565b60405180910390f35b34801561024057600080fd5b506102496105e2565b60405161022b9291906142cc565b34801561026357600080fd5b50610277610272366004613c0a565b6106bc565b005b34801561028557600080fd5b50610299610294366004613c54565b6107ab565b60405161022b91906148cf565b3480156102b257600080fd5b506102996102c1366004613aa8565b6107c8565b3480156102d257600080fd5b506102776102e13660046141d7565b6107da565b3480156102f257600080fd5b50610299610974565b34801561030757600080fd5b5061029961097a565b34801561031c57600080fd5b50610277610980565b34801561033157600080fd5b50610299610340366004613aa8565b610bf7565b34801561035157600080fd5b50610365610360366004613c94565b610c09565b60405161022b9291906148d8565b610277610381366004613e46565b610c5e565b34801561039257600080fd5b50610277610dec565b6103656103a9366004613d50565b610e79565b3480156103ba57600080fd5b5061021e61171f565b3480156103cf57600080fd5b50610299611743565b3480156103e457600080fd5b506103ed611749565b60405161022b91906142dc565b34801561040657600080fd5b5061021e6117d7565b34801561041b57600080fd5b5061027761042a3660046140c0565b6117e6565b34801561043b57600080fd5b506104446119fd565b60405161022b9291906148b5565b34801561045e57600080fd5b5061027761046d366004613c54565b611a17565b34801561047e57600080fd5b5061027761048d366004613c94565b611af8565b34801561049e57600080fd5b5061021e611b3d565b3480156104b357600080fd5b506102776104c2366004613cbf565b611b4c565b3480156104d357600080fd5b5061021e61236e565b3480156104e857600080fd5b50610299612392565b3480156104fd57600080fd5b50610506612398565b60405161022b939291906148fc565b34801561052157600080fd5b506102996123c4565b34801561053657600080fd5b5061021e6123ca565b34801561054b57600080fd5b5061021e6123ee565b34801561056057600080fd5b5061021e6123fd565b34801561057557600080fd5b5061044461240c565b34801561058a57600080fd5b50610277610599366004613aa8565b612426565b3480156105aa57600080fd5b506102776105b936600461416f565b61249a565b3480156105ca57600080fd5b506102776125cf565b6002546001600160a01b031681565b6004805460405163d6d7d52560e01b815260009283926001600160a01b03169163d6d7d52591610615916005910161430f565b6040805180830381600087803b15801561062e57600080fd5b505af1158015610642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106669190613de5565b909250905081156106b357600b8190556040517f9f9192b5edb17356c524e08d9e025c8e2f6307e6ea52fb7968faa3081f51c3c8906106a69083906148cf565b60405180910390a16106b8565b50600b545b9091565b6000546001600160a01b031633146106ef5760405162461bcd60e51b81526004016106e6906146a4565b60405180910390fd5b811561078a576001600160a01b0383161515806107095750805b6107255760405162461bcd60e51b81526004016106e690614599565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b0319918216179091556001805490911690556107a6565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b60006107b56125cf565b6107c0848484612837565b949350505050565b60096020526000908152604090205481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190613ac4565b6001600160a01b0316336001600160a01b03161461089b5760405162461bcd60e51b81526004016106e690614533565b600c546001600160401b03600160c01b90910481169060049060038302160481016001600160401b0316826001600160401b0316106108ec5760405162461bcd60e51b81526004016106e69061470e565b42600d546203f48001106109125760405162461bcd60e51b81526004016106e69061466d565b42600d55600c80546001600160c01b0316600160c01b6001600160401b038516021790556040517f76bc92b92b7755bcb03b25070431a80435c4d3fbf91c6c81c0c0cc350f6b5c6a906109689083908590614928565b60405180910390a15050565b600b5481565b60075481565b6109886125cf565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e357600080fd5b505afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190613ac4565b600c54604051636d289ce560e11b8152919250600160401b90046001600160801b0316906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063da5139ca90610aa5907f000000000000000000000000000000000000000000000000000000000000000090869086906004016144aa565b60206040518083038186803b158015610abd57600080fd5b505afa158015610ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af5919061419c565b604051633c6340f360e21b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90610b6a907f0000000000000000000000000000000000000000000000000000000000000000903090889087906004016143b3565b600060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b5050600c8054600160401b600160c01b031916905550506040516001600160a01b038416907fbe641c3ffc44b2d6c184f023fa4ed7bda4b6ffa71e03b3c98ae0c776da1f17e790610bea9085906148cf565b60405180910390a2505050565b600a6020526000908152604090205481565b600080610c146125cf565b610c1e8484612af7565b90925090506000610c2d6105e2565b915050610c3a3382612e4a565b610c565760405162461bcd60e51b81526004016106e6906144fc565b509250929050565b6003546001600160a01b031615610c875760405162461bcd60e51b81526004016106e690614773565b610c9381830183613ffa565b6010819055600e829055600f839055600c80546001600160c01b0316600160c01b6001600160401b0387160217905584516003906000906004908290610ce09060059060208c01906138f4565b50815461010091820a6001600160a01b03818102199092169b8216029a909a17909155825491900a8089021990911698881602979097179096555050604080518082019091526001600160801b0380825260209091015250506000196006556003541615159050610d635760405162461bcd60e51b81526004016106e6906147e1565b6004805460405163d6d7d52560e01b81526001600160a01b039091169163d6d7d52591610d93916005910161430f565b6040805180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de49190613de5565b600b55505050565b6001546001600160a01b0316338114610e175760405162461bcd60e51b81526004016106e6906146d9565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b600080610e8461396e565b60005b888110156116d65760008a8a83818110610e9d57fe5b9050602002016020810190610eb291906141fe565b90508260200151158015610ec95750600a8160ff16105b15610ede57610ed66125cf565b600160208401525b60ff8116600a1415610f38576000806000898986818110610efb57fe5b9050602002810190610f0d9190614942565b810190610f1a9190614107565b925092509250610f30828261046d868c8c612fd2565b5050506116cd565b60ff811660021415610f98576000806000898986818110610f5557fe5b9050602002810190610f679190614942565b810190610f749190614107565b925092509250610f8f8282610f8a868c8c612fd2565b612837565b505050506116cd565b60ff811660041415610ff557600080888885818110610fb357fe5b9050602002810190610fc59190614942565b810190610fd291906140d8565b91509150610fea81610fe5848a8a612fd2565b612ffa565b5050600183526116cd565b60ff8116600514156110585760008088888581811061101057fe5b90506020028101906110229190614942565b81019061102f91906140d8565b9150915061104781611042848a8a612fd2565b612af7565b6001875290975095506116cd915050565b60ff8116600b14156110f757600080600089898681811061107557fe5b90506020028101906110879190614942565b8101906110949190613e12565b9250925092506000806110a56105e2565b915091508415806110b35750815b80156110be57508381115b80156110d157508215806110d157508281115b6110ed5760405162461bcd60e51b81526004016106e690614872565b50505050506116cd565b60ff8116601814156111d6576000806000806000808c8c8981811061111857fe5b905060200281019061112a9190614942565b8101906111379190613ae0565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0a47c938787878787876040518763ffffffff1660e01b815260040161119996959493929190614293565b600060405180830381600087803b1580156111b357600080fd5b505af11580156111c7573d6000803e3d6000fd5b505050505050505050506116cd565b60ff81166014141561125e576112548787848181106111f157fe5b90506020028101906112039190614942565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92508c915086905081811061124657fe5b905060200201358787613108565b90955093506116cd565b60ff8116601514156112c95761125487878481811061127957fe5b905060200281019061128b9190614942565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508891506131fe9050565b60ff8116601614156113a15760008060008989868181106112e657fe5b90506020028101906112f89190614942565b8101906113059190613eb2565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc843385611348868e8e612fd2565b6040518563ffffffff1660e01b815260040161136794939291906143b3565b600060405180830381600087803b15801561138157600080fd5b505af1158015611395573d6000803e3d6000fd5b505050505050506116cd565b60ff8116601714156114355760006060808989868181106113be57fe5b90506020028101906113d09190614942565b8101906113dd9190613f28565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fca8843843385856040518563ffffffff1660e01b81526004016113679493929190614411565b60ff8116601e141561150f57606060006114b78b8b8681811061145457fe5b905060200201358a8a8781811061146757fe5b90506020028101906114799190614942565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91506132ec9050565b915091508060ff16600114156114e257818060200190518101906114db919061419c565b9650611508565b8060ff1660021415611508578180602001905181019061150291906141b4565b90975095505b50506116cd565b60ff81166006141561165057600087878481811061152957fe5b905060200281019061153b9190614942565b81019061154891906140c0565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663da5139ca7f00000000000000000000000000000000000000000000000000000000000000006115d86115a8858b8b612fd2565b604080518082019091526008546001600160801b038082168352600160801b9091041660208201529060016134a2565b60016040518463ffffffff1660e01b81526004016115f8939291906144aa565b60206040518083038186803b15801561161057600080fd5b505afa158015611624573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611648919061419c565b9550506116cd565b60ff8116600714156116cd57600087878481811061166a57fe5b905060200281019061167c9190614942565b81019061168991906140c0565b90506116c9611699828888612fd2565b604080518082019091526008546001600160801b038082168352600160801b909104166020820152906000613542565b9550505b50600101610e87565b508051156117135760006116e86105e2565b9150506116f53382612e4a565b6117115760405162461bcd60e51b81526004016106e6906144fc565b505b50965096945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600f5481565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156117cf5780601f106117a4576101008083540402835291602001916117cf565b820191906000526020600020905b8154815290600101906020018083116117b257829003601f168201915b505050505081565b6004546001600160a01b031681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561183f57600080fd5b505afa158015611853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118779190613ac4565b6001600160a01b0316336001600160a01b0316146118a75760405162461bcd60e51b81526004016106e690614533565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d307f0000000000000000000000000000000000000000000000000000000000000000307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561195157600080fd5b505afa158015611965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119899190613ac4565b8560006040518663ffffffff1660e01b81526004016119ac9594939291906143dd565b6040805180830381600087803b1580156119c557600080fd5b505af11580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a691906141b4565b6008546001600160801b0380821691600160801b90041682565b6001600160a01b038316600090815260096020526040902054611a3a90826135bb565b6001600160a01b038416600090815260096020526040902055600754611a6081836135bb565b600755600354611a7b906001600160a01b03168383866135de565b836001600160a01b031683611a905733611ab2565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167f9ed03113de523cebfe5e49d5f8e12894b1c0d42ce805990461726444c90eab8784604051611aea91906148cf565b60405180910390a350505050565b611b006125cf565b611b0a8282612ffa565b6000611b146105e2565b915050611b213382612e4a565b6107a65760405162461bcd60e51b81526004016106e6906144fc565b6000546001600160a01b031681565b6000611b566105e2565b915050611b616125cf565b6000806000611b6e61396e565b50604080518082019091526008546001600160801b038082168352600160801b909104166020820152611b9f61396e565b600354604051634ffe34db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692634ffe34db92611bf292919091169060040161427f565b604080518083038186803b158015611c0957600080fd5b505afa158015611c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c41919061412d565b905060005b8b811015611ea05760008d8d83818110611c5c57fe5b9050602002016020810190611c719190613aa8565b9050611c7d8189612e4a565b611e97576001600160a01b0381166000908152600a6020526040812054808e8e86818110611ca757fe5b9050602002013511611ccb578d8d85818110611cbf57fe5b90506020020135611ccd565b805b9150611cd9818361373b565b6001600160a01b0384166000908152600a60205260408120919091559050611d028683836134a2565b90506000611d48670de0b6b3a7640000620186a002611d368d611d30600f548761375e90919063ffffffff16565b9061375e565b81611d3d57fe5b889190046000613542565b6001600160a01b038516600090815260096020526040902054909150611d6e908261373b565b6001600160a01b0380861660008181526009602052604090819020939093559151908f1691907f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c40290611dc19085906148cf565b60405180910390a3836001600160a01b0316336001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e8486604051611e0e9291906148d8565b60405180910390a38c6001600160a01b0316846001600160a01b0316336001600160a01b03167f66b108dc29b952efc76dccea9b82dce6b59fab4d9af73d8dcc9789afcad5daf6848688604051611e67939291906148e6565b60405180910390a4611e798a826135bb565b9950611e8589836135bb565b9850611e9188846135bb565b97505050505b50600101611c46565b5083611ebe5760405162461bcd60e51b81526004016106e6906145ff565b611edb611eca85613795565b83516001600160801b0316906137c2565b6001600160801b03168252611f06611ef284613795565b60208401516001600160801b0316906137c2565b6001600160801b03908116602084018190528351600880546001600160801b03191691841691909117909216600160801b909102179055600754611f4a908661373b565b60078190555060006064611f84600a611d3088620186a0611f76600f548c61375e90919063ffffffff16565b81611f7d57fe5b049061373b565b81611f8b57fe5b049050611f9885826135bb565b9450611fbf611fa682613795565b600c54600160401b90046001600160801b0316906137f1565b600c80546001600160801b0392909216600160401b02600160401b600160c01b031990921691909117905550604051636d289ce560e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063da5139ca9061205f907f00000000000000000000000000000000000000000000000000000000000000009089906001906004016144aa565b60206040518083038186803b15801561207757600080fd5b505afa15801561208b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120af919061419c565b600354604051633c6340f360e21b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261210892169030908e908c906004016143b3565b600060405180830381600087803b15801561212257600080fd5b505af1158015612136573d6000803e3d6000fd5b505050506001600160a01b038816156121f7576003546040516371a1ff0960e11b81526001600160a01b038a81169263e343fe12926121a392909116907f000000000000000000000000000000000000000000000000000000000000000090339087908d906004016143dd565b6040805180830381600087803b1580156121bc57600080fd5b505af11580156121d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f491906141b4565b50505b604051636d289ce560e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063da5139ca90612268907f00000000000000000000000000000000000000000000000000000000000000009089906001906004016144aa565b60206040518083038186803b15801561228057600080fd5b505afa158015612294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b8919061419c565b604051633c6340f360e21b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc9061232d907f0000000000000000000000000000000000000000000000000000000000000000903390309087906004016143b3565b600060405180830381600087803b15801561234757600080fd5b505af115801561235b573d6000803e3d6000fd5b5050505050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60105481565b600c546001600160401b03808216916001600160801b03600160401b82041691600160c01b9091041683565b600e5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003546001600160a01b031681565b6001546001600160a01b031681565b6006546001600160801b0380821691600160801b90041682565b6000546001600160a01b031633146124505760405162461bcd60e51b81526004016106e6906146a4565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fcf1d3f17e521c635e0d20b8acba94ba170afc041d0546d46dafa09d3c9c19eb390600090a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124f357600080fd5b505afa158015612507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252b9190613ac4565b6001600160a01b0316336001600160a01b03161461255b5760405162461bcd60e51b81526004016106e690614533565b6040805180820182526001600160801b038481168083528482166020909301839052600680546001600160801b031916909117909116600160801b909202919091179055517ff1fce436bc22563026222b3b2bdc088cb69d25192974264114df12ab812628f69061096890849084906148b5565b6125d7613985565b5060408051606081018252600c546001600160401b038082168084526001600160801b03600160401b8404166020850152600160c01b909204169282019290925290420380612627575050612835565b6001600160401b034216825261263b61396e565b50604080518082019091526008546001600160801b038082168352600160801b90910416602082018190526126d95750508051600c805460208401516040909401516001600160401b03908116600160c01b026001600160c01b036001600160801b03909616600160401b02600160401b600160c01b03199290951667ffffffffffffffff1990931692909217169290921792909216179055612835565b6000612725670de0b6b3a764000061271885611d3088604001516001600160401b031687600001516001600160801b031661375e90919063ffffffff16565b8161271f57fe5b04613795565b825190915061273d906001600160801b0316826137f1565b6001600160801b039081168352602085015161275a9116826137f1565b6001600160801b039081166020808701829052845160088054928701518516600160801b029185166001600160801b031990931692909217909316929092179091558451600c80546040808901516001600160401b03908116600160c01b026001600160c01b03600160401b909702600160401b600160c01b03199290961667ffffffffffffffff199094169390931716939093179390931692909217909155517fee527de5e142bcc7fe0eddc4b9a04816d73f6307dd74f9204585910d60a8c083906128289083906148a1565b60405180910390a1505050505b565b604080518082019091526008546001600160801b038082168352600160801b90910416602082015260009061286e90836001613820565b8151600880546020948501516001600160801b03908116600160801b029381166001600160801b031990921691909117169190911790556001600160a01b0386166000908152600a9092526040909120549091506128cc908361373b565b6001600160a01b038086166000908152600a6020526040808220939093559151636d289ce560e11b81527f00000000000000000000000000000000000000000000000000000000000000009091169063da5139ca90612954907f00000000000000000000000000000000000000000000000000000000000000009086906001906004016144aa565b60206040518083038186803b15801561296c57600080fd5b505afa158015612980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a4919061419c565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc7f000000000000000000000000000000000000000000000000000000000000000086612a015733612a23565b7f00000000000000000000000000000000000000000000000000000000000000005b30856040518563ffffffff1660e01b8152600401612a4494939291906143b3565b600060405180830381600087803b158015612a5e57600080fd5b505af1158015612a72573d6000803e3d6000fd5b50505050846001600160a01b031684612a8b5733612aad565b7f00000000000000000000000000000000000000000000000000000000000000005b6001600160a01b03167fc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e8486604051612ae79291906148d8565b60405180910390a3509392505050565b6000806000620186a0612b156010548661375e90919063ffffffff16565b81612b1c57fe5b049050612b5c612b2c85836135bb565b604080518082019091526008546001600160801b038082168352600160801b909104166020820152906001613895565b8151600880546020909401516001600160801b03908116600160801b029281166001600160801b031990951694909417909316179091559250612b9d61396e565b50604080518082019091526006546001600160801b03808216808452600160801b90920481166020840152600854161115612bea5760405162461bcd60e51b81526004016106e69061480d565b600c54612c0790600160401b90046001600160801b0316836137f1565b600c80546001600160801b0392909216600160401b02600160401b600160c01b0319909216919091179055336000908152600a6020526040812054612c4c90866135bb565b905081602001516001600160801b0316811115612c7b5760405162461bcd60e51b81526004016106e69061480d565b336000908152600a602052604080822083905551636d289ce560e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163da5139ca91612cfb917f0000000000000000000000000000000000000000000000000000000000000000918b91906004016144aa565b60206040518083038186803b158015612d1357600080fd5b505afa158015612d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4b919061419c565b604051633c6340f360e21b81529094506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90612dc0907f00000000000000000000000000000000000000000000000000000000000000009030908c908a906004016143b3565b600060405180830381600087803b158015612dda57600080fd5b505af1158015612dee573d6000803e3d6000fd5b5050506001600160a01b0388169050337fb92cb6bca8e3270b9170930f03b17571e55791acdb1a0e9f339eec88bdb35e24612e2989876135bb565b88604051612e389291906148d8565b60405180910390a35050509250929050565b6001600160a01b0382166000908152600a602052604081205480612e72576001915050612fcc565b6001600160a01b03841660009081526009602052604090205480612e9b57600092505050612fcc565b612ea361396e565b50604080518082019091526008546001600160801b03808216808452600160801b909204166020830181905290612ee1908790611d3090879061375e565b81612ee857fe5b047f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166356623118600360009054906101000a90046001600160a01b0316612f54600e54611d30620186a0670de0b6b3a764000081612f4b57fe5b8a91900461375e565b60006040518463ffffffff1660e01b8152600401612f74939291906144aa565b60206040518083038186803b158015612f8c57600080fd5b505afa158015612fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc4919061419c565b101593505050505b92915050565b600080841215612ff2576000198414612feb5781612fed565b825b6107c0565b509192915050565b33600090815260096020526040902054613014908261373b565b33600090815260096020526040902055600754613031908261373b565b6007556040516001600160a01b0383169033907f8ad4d3ff00da092c7ad9a573ea4f5f6a3dffc6712dc06d3f78f49b862297c402906130719085906148cf565b60405180910390a3600354604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc926130d29291909116903090879087906004016143b3565b600060405180830381600087803b1580156130ec57600080fd5b505af1158015613100573d6000803e3d6000fd5b505050505050565b600080600080600080898060200190518101906131259190613ee1565b9350935093509350613138828989612fd2565b9150613145818989612fd2565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8a86338787876040518763ffffffff1660e01b815260040161319c9594939291906143dd565b60408051808303818588803b1580156131b457600080fd5b505af11580156131c8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906131ed91906141b4565b955095505050505094509492505050565b6000806000806000808880602001905181019061321b9190613ee1565b93509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d30853386613260878e8e612fd2565b61326b878f8f612fd2565b6040518663ffffffff1660e01b815260040161328b9594939291906143dd565b6040805180830381600087803b1580156132a457600080fd5b505af11580156132b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132dc91906141b4565b9550955050505050935093915050565b6060600080606060008060008980602001905181019061330c9190613b4d565b94509450945094509450828015613321575081155b1561334f578389604051602001613339929190614236565b60405160208183030381529060405293506133a8565b8215801561335a5750815b15613372578388604051602001613339929190614236565b82801561337c5750815b156133a85783898960405160200161339693929190614258565b60405160208183030381529060405293505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316141580156133f357506001600160a01b0385163014155b61340f5760405162461bcd60e51b81526004016106e690614745565b60006060866001600160a01b03168d8760405161342c919061421a565b60006040518083038185875af1925050503d8060008114613469576040519150601f19603f3d011682016040523d82523d6000602084013e61346e565b606091505b5091509150816134905760405162461bcd60e51b81526004016106e69061456a565b9c919b50909950505050505050505050565b600083602001516001600160801b0316600014156134c157508161353b565b602084015184516001600160801b03918216916134e09186911661375e565b816134e757fe5b04905081801561352b57508284600001516001600160801b031661352186602001516001600160801b03168461375e90919063ffffffff16565b8161352857fe5b04105b1561353b576107c08160016135bb565b9392505050565b82516000906001600160801b031661355b57508161353b565b835160208501516001600160801b039182169161357a9186911661375e565b8161358157fe5b04905081801561352b57508284602001516001600160801b031661352186600001516001600160801b03168461375e90919063ffffffff16565b81810181811015612fcc5760405162461bcd60e51b81526004016106e690614636565b80156136b05761368c827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7888aec87306040518363ffffffff1660e01b8152600401613636929190614399565b60206040518083038186803b15801561364e57600080fd5b505afa158015613662573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613686919061419c565b9061373b565b8311156136ab5760405162461bcd60e51b81526004016106e6906147aa565b613735565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc906137029087903390309089906004016143b3565b600060405180830381600087803b15801561371c57600080fd5b505af1158015613730573d6000803e3d6000fd5b505050505b50505050565b80820382811115612fcc5760405162461bcd60e51b81526004016106e6906144cd565b60008115806137795750508082028282828161377657fe5b04145b612fcc5760405162461bcd60e51b81526004016106e69061483b565b60006001600160801b038211156137be5760405162461bcd60e51b81526004016106e6906145c8565b5090565b8082036001600160801b038084169082161115612fcc5760405162461bcd60e51b81526004016106e6906144cd565b8181016001600160801b038083169082161015612fcc5760405162461bcd60e51b81526004016106e690614636565b61382861396e565b60006138358585856134a2565b905061385461384382613795565b86516001600160801b0316906137c2565b6001600160801b0316855261387f61386b85613795565b60208701516001600160801b0316906137c2565b6001600160801b03166020860152939492505050565b61389d61396e565b60006138aa858585613542565b90506138c96138b885613795565b86516001600160801b0316906137f1565b6001600160801b0316855261387f6138e082613795565b60208701516001600160801b0316906137f1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061393557805160ff1916838001178555613962565b82800160010185558215613962579182015b82811115613962578251825591602001919060010190613947565b506137be9291506139a5565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b5b808211156137be57600081556001016139a6565b8035612fcc81614a32565b60008083601f8401126139d6578182fd5b5081356001600160401b038111156139ec578182fd5b6020830191508360208083028501011115613a0657600080fd5b9250929050565b600082601f830112613a1d578081fd5b8135613a30613a2b826149ac565b614986565b818152915060208083019084810181840286018201871015613a5157600080fd5b60005b84811015613a7057813584529282019290820190600101613a54565b505050505092915050565b8051612fcc81614a4a565b80356001600160401b0381168114612fcc57600080fd5b8051612fcc81614a6d565b600060208284031215613ab9578081fd5b813561353b81614a32565b600060208284031215613ad5578081fd5b815161353b81614a32565b60008060008060008060c08789031215613af8578182fd5b8635613b0381614a32565b95506020870135613b1381614a32565b94506040870135613b2381614a4a565b93506060870135613b3381614a6d565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215613b64578283fd5b8551613b6f81614a32565b60208701519095506001600160401b03811115613b8a578384fd5b8601601f81018813613b9a578384fd5b8051613ba8613a2b826149cb565b818152896020838501011115613bbc578586fd5b613bcd826020830160208601614a06565b809650505050613be08760408801613a7b565b9250613bef8760608801613a7b565b9150613bfe8760808801613a9d565b90509295509295909350565b600080600060608486031215613c1e578081fd5b8335613c2981614a32565b92506020840135613c3981614a4a565b91506040840135613c4981614a4a565b809150509250925092565b600080600060608486031215613c68578081fd5b8335613c7381614a32565b92506020840135613c8381614a4a565b929592945050506040919091013590565b60008060408385031215613ca6578182fd5b8235613cb181614a32565b946020939093013593505050565b60008060008060008060808789031215613cd7578384fd5b86356001600160401b0380821115613ced578586fd5b613cf98a838b016139c5565b90985096506020890135915080821115613d11578586fd5b50613d1e89828a016139c5565b9095509350506040870135613d3281614a32565b91506060870135613d4281614a32565b809150509295509295509295565b60008060008060008060608789031215613d68578384fd5b86356001600160401b0380821115613d7e578586fd5b613d8a8a838b016139c5565b90985096506020890135915080821115613da2578586fd5b613dae8a838b016139c5565b90965094506040890135915080821115613dc6578384fd5b50613dd389828a016139c5565b979a9699509497509295939492505050565b60008060408385031215613df7578182fd5b8251613e0281614a4a565b6020939093015192949293505050565b600080600060608486031215613e26578081fd5b8335613e3181614a4a565b95602085013595506040909401359392505050565b60008060208385031215613e58578182fd5b82356001600160401b0380821115613e6e578384fd5b818501915085601f830112613e81578384fd5b813581811115613e8f578485fd5b866020828501011115613ea0578485fd5b60209290920196919550909350505050565b600080600060608486031215613ec6578081fd5b8335613ed181614a32565b92506020840135613c8381614a32565b60008060008060808587031215613ef6578182fd5b8451613f0181614a32565b6020860151909450613f1281614a32565b6040860151606090960151949790965092505050565b600080600060608486031215613f3c578081fd5b8335613f4781614a32565b92506020848101356001600160401b0380821115613f63578384fd5b818701915087601f830112613f76578384fd5b8135613f84613a2b826149ac565b81815284810190848601868402860187018c1015613fa0578788fd5b8795505b83861015613fca57613fb68c826139ba565b835260019590950194918601918601613fa4565b50965050506040870135925080831115613fe2578384fd5b5050613ff086828701613a0d565b9150509250925092565b600080600080600080600060e0888a031215614014578485fd5b873561401f81614a32565b9650602088013561402f81614a32565b955060408801356001600160401b03811115614049578586fd5b8801601f81018a13614059578586fd5b8035614067613a2b826149cb565b8181528b602083850101111561407b578788fd5b61408c8260208301602086016149fa565b80975050505061409f8960608a01613a86565b9699959850939660808101359560a0820135955060c0909101359350915050565b6000602082840312156140d1578081fd5b5035919050565b600080604083850312156140ea578182fd5b8235915060208301356140fc81614a32565b809150509250929050565b60008060006060848603121561411b578081fd5b833592506020840135613c3981614a32565b60006040828403121561413e578081fd5b6141486040614986565b825161415381614a58565b8152602083015161416381614a58565b60208201529392505050565b60008060408385031215614181578182fd5b823561418c81614a58565b915060208301356140fc81614a58565b6000602082840312156141ad578081fd5b5051919050565b600080604083850312156141c6578182fd5b505080516020909101519092909150565b6000602082840312156141e8578081fd5b81356001600160401b038116811461353b578182fd5b60006020828403121561420f578081fd5b813561353b81614a6d565b6000825161422c818460208701614a06565b9190910192915050565b60008351614248818460208801614a06565b9190910191825250602001919050565b6000845161426a818460208901614a06565b91909101928352506020820152604001919050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b9115158252602082015260400190565b60006020825282518060208401526142fb816040850160208701614a06565b601f01601f19169190910160400192915050565b6000602080830181845282855460018082166000811461433657600181146143545761438c565b60028304607f16855260ff198316604089015260608801935061438c565b600283048086526143648a6149ee565b885b828110156143825781548b820160400152908401908801614366565b8a01604001955050505b5091979650505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60006080820160018060a01b0380881684526020818816818601526080604086015282875180855260a0870191508289019450855b81811015614464578551851683529483019491830191600101614446565b50508581036060870152865180825290820193509150808601845b8381101561449b5781518552938201939082019060010161447f565b50929998505050505050505050565b6001600160a01b0393909316835260208301919091521515604082015260600190565b602080825260159082015274426f72696e674d6174683a20556e646572666c6f7760581b604082015260600190565b60208082526018908201527f4361756c64726f6e3a207573657220696e736f6c76656e740000000000000000604082015260600190565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b60208082526015908201527410d85d5b191c9bdb8e8818d85b1b0819985a5b1959605a1b604082015260600190565b6020808252601590820152744f776e61626c653a207a65726f206164647265737360581b604082015260600190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526019908201527f4361756c64726f6e3a20616c6c2061726520736f6c76656e7400000000000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b60208082526018908201527f557064617465206f6e6c79206576657279203320646179730000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b6020808252601c908201527f496e746572657374207261746520696e637265617365203e2037352500000000604082015260600190565b60208082526014908201527310d85d5b191c9bdb8e8818d85b89dd0818d85b1b60621b604082015260600190565b6020808252601d908201527f4361756c64726f6e3a20616c726561647920696e697469616c697a6564000000604082015260600190565b60208082526017908201527f4361756c64726f6e3a20536b696d20746f6f206d756368000000000000000000604082015260600190565b60208082526012908201527121b0bab6323937b71d103130b2103830b4b960711b604082015260600190565b602080825260149082015273109bdc9c9bddc8131a5b5a5d081c995858da195960621b604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b6020808252601590820152744361756c64726f6e3a2072617465206e6f74206f6b60581b604082015260600190565b6001600160801b0391909116815260200190565b6001600160801b0392831681529116602082015260400190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b6001600160401b0393841681526001600160801b03929092166020830152909116604082015260600190565b6001600160401b0392831681529116602082015260400190565b6000808335601e19843603018112614958578283fd5b8301803591506001600160401b03821115614971578283fd5b602001915036819003821315613a0657600080fd5b6040518181016001600160401b03811182821017156149a457600080fd5b604052919050565b60006001600160401b038211156149c1578081fd5b5060209081020190565b60006001600160401b038211156149e0578081fd5b50601f01601f191660200190565b60009081526020902090565b82818337506000910152565b60005b83811015614a21578181015183820152602001614a09565b838111156137355750506000910152565b6001600160a01b0381168114614a4757600080fd5b50565b8015158114614a4757600080fd5b6001600160801b0381168114614a4757600080fd5b60ff81168114614a4757600080fdfea26469706673582212207e05a0c8fd714e9c49c24caa01ecd0793df4e7ea2b86a8cf03d492f82470c3b864736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.",
    "kind": "dev",
    "methods": {
      "addCollateral(address,bool,uint256)": {
        "params": {
          "share": "The amount of shares to add for `to`.",
          "skim": "True if the amount should be skimmed from the deposit balance of msg.sender.x False if tokens from msg.sender in `bentoBox` should be transferred.",
          "to": "The receiver of the tokens."
        }
      },
      "borrow(address,uint256)": {
        "returns": {
          "part": "Total part of the debt held by borrowers.",
          "share": "Total amount in shares borrowed."
        }
      },
      "changeBorrowLimit(uint128,uint128)": {
        "params": {
          "newBorrowLimit": "new borrow limit",
          "perAddressPart": "new borrow limit per address"
        }
      },
      "changeInterestRate(uint64)": {
        "params": {
          "newInterestRate": "new interest rate"
        }
      },
      "cook(uint8[],uint256[],bytes[])": {
        "params": {
          "actions": "An array with a sequence of actions to execute (see ACTION_ declarations).",
          "datas": "A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.",
          "values": "A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`."
        },
        "returns": {
          "value1": "May contain the first positioned return value of the last executed action (if applicable).",
          "value2": "May contain the second positioned return value of the last executed action which returns 2 values (if applicable)."
        }
      },
      "init(bytes)": {
        "details": "`data` is abi encoded in the format: (IERC20 collateral, IERC20 asset, IOracle oracle, bytes oracleData)"
      },
      "liquidate(address[],uint256[],address,address)": {
        "params": {
          "maxBorrowParts": "A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.",
          "to": "Address of the receiver in open liquidations if `swapper` is zero.",
          "users": "An array of user addresses."
        }
      },
      "reduceSupply(uint256)": {
        "params": {
          "amount": "amount to reduce supply by"
        }
      },
      "removeCollateral(address,uint256)": {
        "params": {
          "share": "Amount of shares to remove.",
          "to": "The receiver of the shares."
        }
      },
      "repay(address,bool,uint256)": {
        "params": {
          "part": "The amount to repay. See `userBorrowPart`.",
          "skim": "True if the amount should be skimmed from the deposit balance of msg.sender. False if tokens from msg.sender in `bentoBox` should be transferred.",
          "to": "Address of the user this payment should go."
        },
        "returns": {
          "amount": "The total amount repayed."
        }
      },
      "setFeeTo(address)": {
        "params": {
          "newFeeTo": "The address of the receiver."
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      },
      "updateExchangeRate()": {
        "returns": {
          "rate": "The new exchange rate.",
          "updated": "True if `exchangeRate` was updated."
        }
      }
    },
    "title": "Cauldron",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accrue()": {
        "notice": "Accrues the interest on the borrowed tokens and handles the accumulation of fees."
      },
      "addCollateral(address,bool,uint256)": {
        "notice": "Adds `collateral` from msg.sender to the account `to`."
      },
      "borrow(address,uint256)": {
        "notice": "Sender borrows `amount` and transfers it to `to`."
      },
      "changeBorrowLimit(uint128,uint128)": {
        "notice": "allows to change the borrow limit"
      },
      "changeInterestRate(uint64)": {
        "notice": "allows to change the interest rate"
      },
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "constructor": "The constructor is only used for the initial master contract. Subsequent clones are initialised via `init`.",
      "cook(uint8[],uint256[],bytes[])": {
        "notice": "Executes a set of actions and allows composability (contract calls) to other contracts."
      },
      "exchangeRate()": {
        "notice": "Exchange and interest rate tracking. This is 'cached' here because calls to Oracles can be very expensive."
      },
      "init(bytes)": {
        "notice": "Serves as the constructor for clones, as clones can't have a regular constructor"
      },
      "liquidate(address[],uint256[],address,address)": {
        "notice": "Handles the liquidation of users' balances, once the users' amount of collateral is too low."
      },
      "reduceSupply(uint256)": {
        "notice": "reduces the supply of MIM"
      },
      "removeCollateral(address,uint256)": {
        "notice": "Removes `share` amount of collateral and transfers it to `to`."
      },
      "repay(address,bool,uint256)": {
        "notice": "Repays a loan."
      },
      "setFeeTo(address)": {
        "notice": "Sets the beneficiary of interest accrued. MasterContract Only Admin function."
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      },
      "updateExchangeRate()": {
        "notice": "Gets the exchange rate. I.e how much collateral to buy 1e18 asset. This function is supposed to be invoked if needed because Oracle queries can be expensive."
      },
      "withdrawFees()": {
        "notice": "Withdraws the fees accumulated."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 118,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4919,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "feeTo",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4921,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "collateral",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)831"
      },
      {
        "astId": 4923,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IOracle)8212"
      },
      {
        "astId": 4925,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "oracleData",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      },
      {
        "astId": 4932,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "borrowLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(BorrowCap)4930_storage"
      },
      {
        "astId": 4934,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "totalCollateralShare",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4936,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "totalBorrow",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Rebase)1445_storage"
      },
      {
        "astId": 4940,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "userCollateralShare",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4944,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "userBorrowPart",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4947,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "exchangeRate",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4956,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "accrueInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(AccrueInfo)4954_storage"
      },
      {
        "astId": 4959,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "lastInterestUpdate",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4961,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "COLLATERIZATION_RATE",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4969,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "LIQUIDATION_MULTIPLIER",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4974,
        "contract": "contracts/CauldronV3.sol:CauldronV3",
        "label": "BORROW_OPENING_FEE",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)831": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)8212": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AccrueInfo)4954_storage": {
        "encoding": "inplace",
        "label": "struct CauldronV3.AccrueInfo",
        "members": [
          {
            "astId": 4949,
            "contract": "contracts/CauldronV3.sol:CauldronV3",
            "label": "lastAccrued",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4951,
            "contract": "contracts/CauldronV3.sol:CauldronV3",
            "label": "feesEarned",
            "offset": 8,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 4953,
            "contract": "contracts/CauldronV3.sol:CauldronV3",
            "label": "INTEREST_PER_SECOND",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(BorrowCap)4930_storage": {
        "encoding": "inplace",
        "label": "struct CauldronV3.BorrowCap",
        "members": [
          {
            "astId": 4927,
            "contract": "contracts/CauldronV3.sol:CauldronV3",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 4929,
            "contract": "contracts/CauldronV3.sol:CauldronV3",
            "label": "borrowPartPerAddress",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Rebase)1445_storage": {
        "encoding": "inplace",
        "label": "struct Rebase",
        "members": [
          {
            "astId": 1442,
            "contract": "contracts/CauldronV3.sol:CauldronV3",
            "label": "elastic",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1444,
            "contract": "contracts/CauldronV3.sol:CauldronV3",
            "label": "base",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}