{
  "address": "0x88e9cB153df9b8c46Bd0c99081Fc5E6C67149863",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "LogAddRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "LogBridgeToRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "LogSetOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "addMSpellRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ratios",
          "type": "uint256[]"
        }
      ],
      "name": "bridgeMim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isActiveChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "recipients",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22b59d60abfcea81423b580f190ded27b57f8013c5789c5d29b38c855363c189",
  "receipt": {
    "to": null,
    "from": "0xb4EfdA6DAf5ef75D08869A0f9C0213278fb43b6C",
    "contractAddress": "0x88e9cB153df9b8c46Bd0c99081Fc5E6C67149863",
    "transactionIndex": 204,
    "gasUsed": "1471734",
    "logsBloom": "0x
    "blockHash": "0x633d3f8df235751e215d20514a82835b7a156d8e60fd111968dbb2ac91c673f3",
    "transactionHash": "0x22b59d60abfcea81423b580f190ded27b57f8013c5789c5d29b38c855363c189",
    "logs": [
      {
        "transactionIndex": 204,
        "blockNumber": 14412927,
        "transactionHash": "0x22b59d60abfcea81423b580f190ded27b57f8013c5789c5d29b38c855363c189",
        "address": "0x88e9cB153df9b8c46Bd0c99081Fc5E6C67149863",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b4efda6daf5ef75d08869a0f9c0213278fb43b6c"
        ],
        "data": "0x",
        "logIndex": 351,
        "blockHash": "0x633d3f8df235751e215d20514a82835b7a156d8e60fd111968dbb2ac91c673f3"
      },
      {
        "transactionIndex": 204,
        "blockNumber": 14412927,
        "transactionHash": "0x22b59d60abfcea81423b580f190ded27b57f8013c5789c5d29b38c855363c189",
        "address": "0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000088e9cb153df9b8c46bd0c99081fc5e6c67149863",
          "0x000000000000000000000000bbc4a8d076f4b1888fec42581b6fc58d242cf2d5"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 352,
        "blockHash": "0x633d3f8df235751e215d20514a82835b7a156d8e60fd111968dbb2ac91c673f3"
      }
    ],
    "blockNumber": 14412927,
    "cumulativeGasUsed": "19496047",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b428354140b859546e070856acd16d7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"LogAddRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"LogBridgeToRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogSetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"addMSpellRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ratios\",\"type\":\"uint256[]\"}],\"name\":\"bridgeMim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isActiveChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bridgeMim(uint256[])\":{\"params\":{\"ratios\":\"ratio in bps, 1 is 0.01%, 10_000 is 100%\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LogSetOperator(address,bool)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mspell/mSpellSender.sol\":\"mSpellSender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x058e0708ffdd2b04a17b96b5775d9fab8daa19d3cd37d26ce6c923679bf9cc9a\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50f187c86835070ec519acffcc259cd7900fdb85cb53333210fba9491eb65eca\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x2da850128806ffcf4a5910538f76e56d4f315b643af5ebeb6e4c8ca2a21c5408\",\"license\":\"MIT\"},\"contracts/mspell/mSpellSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport \\\"../libraries/BoringOwnable.sol\\\";\\n\\ninterface AnyswapRouter {\\n    function anySwapOutUnderlying(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        uint256 toChainID\\n    ) external;\\n}\\n\\ncontract mSpellSender is BoringOwnable {\\n    using SafeTransferLib for ERC20;\\n\\n    /// EVENTS\\n    event LogSetOperator(address indexed operator, bool status);\\n    event LogAddRecipient(address indexed recipient, uint256 chainId);\\n    event LogBridgeToRecipient(address indexed recipient, uint256 amount, uint256 chainId);\\n\\n    /// CONSTANTS\\n    ERC20 private constant MIM = ERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\\n    address private constant ANY_MIM = 0xbbc4A8d076F4B1888fec42581B6fc58d242CF2D5;\\n    AnyswapRouter private constant ANYSWAP_ROUTER = AnyswapRouter(0x6b7a87899490EcE95443e979cA9485CBE7E71522);\\n\\n    struct MSpellRecipients {\\n        address recipient;\\n        uint256 chainId;\\n    }\\n\\n    MSpellRecipients[] public recipients;\\n    mapping(uint256 => bool) public isActiveChain;\\n    mapping(address => bool) public isOperator;\\n\\n    modifier onlyOperator() {\\n        require(isOperator[msg.sender], \\\"only operator\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        MIM.approve(ANY_MIM, type(uint256).max);\\n    }\\n\\n    /// @param ratios ratio in bps, 1 is 0.01%, 10_000 is 100%\\n    function bridgeMim(uint256[] memory ratios) external onlyOperator {\\n        require(ratios.length == recipients.length, \\\"ratios length mismatch\\\");\\n\\n        uint256 summedRatio;\\n        uint256 totalAmount = MIM.balanceOf(address(this));\\n\\n        for (uint256 i = 0; i < ratios.length; i++) {\\n            summedRatio += ratios[i];\\n        }\\n\\n        for (uint256 i = 0; i < ratios.length; i++) {\\n            uint256 amount = (totalAmount * ratios[i]) / summedRatio;\\n            if (amount > 0) {\\n                if(recipients[i].chainId != 1) {\\n                    ANYSWAP_ROUTER.anySwapOutUnderlying(ANY_MIM, recipients[i].recipient, amount, recipients[i].chainId);\\n                } else {\\n                    MIM.transfer(recipients[i].recipient, amount);\\n                }\\n                emit LogBridgeToRecipient(recipients[i].recipient, amount, recipients[i].chainId);\\n            }\\n        }\\n    }\\n\\n    function addMSpellRecipient(address recipient, uint256 chainId) external onlyOwner {\\n        require(!isActiveChain[chainId], \\\"chainId already added\\\");\\n\\n        isActiveChain[chainId] = true;\\n        recipients.push(MSpellRecipients(recipient, chainId));\\n        emit LogAddRecipient(recipient, chainId);\\n    }\\n\\n    function setOperator(address operator, bool status) external onlyOwner {\\n        isOperator[operator] = status;\\n        emit LogSetOperator(operator, status);\\n    }\\n}\\n\",\"keccak256\":\"0xac84496435870f9519382022a5ae96d44bb638df36b1931750ab91c832fe720e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a37399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff1663095ea7b373bbc4a8d076f4b1888fec42581b6fc58d242cf2d57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040162000132929190620001df565b6020604051808303816000875af115801562000152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017891906200024e565b5062000280565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ac826200017f565b9050919050565b620001be816200019f565b82525050565b6000819050919050565b620001d981620001c4565b82525050565b6000604082019050620001f66000830185620001b3565b620002056020830184620001ce565b9392505050565b600080fd5b60008115159050919050565b620002288162000211565b81146200023457600080fd5b50565b60008151905062000248816200021d565b92915050565b6000602082840312156200026757620002666200020c565b5b6000620002778482850162000237565b91505092915050565b6118a780620002906000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639299c11e116100665780639299c11e14610133578063d1bc76a11461014f578063d877f07914610180578063e30c39781461019c578063ee3cd721146101ba5761009e565b8063078dfbe7146100a35780634e71e0c8146100bf578063558a7297146100c95780636d70f7ae146100e55780638da5cb5b14610115575b600080fd5b6100bd60048036038101906100b89190610f83565b6101ea565b005b6100c761043e565b005b6100e360048036038101906100de9190610fd6565b6105d2565b005b6100ff60048036038101906100fa9190611016565b610709565b60405161010c9190611052565b60405180910390f35b61011d610729565b60405161012a919061107c565b60405180910390f35b61014d60048036038101906101489190611226565b61074d565b005b6101696004803603810190610164919061126f565b610c29565b6040516101779291906112ab565b60405180910390f35b61019a600480360381019061019591906112d4565b610c7d565b005b6101a4610e93565b6040516101b1919061107c565b60405180910390f35b6101d460048036038101906101cf919061126f565b610eb9565b6040516101e19190611052565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026f90611371565b60405180910390fd5b81156103f757600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806102b75750805b6102f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ed906113dd565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610439565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ca90611449565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611371565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f93e5d6cb35b685fc6ad29826c16b672bdafd1df5b405459f5a33039c94f14dff826040516106fd9190611052565b60405180910390a25050565b60046020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d0906114b5565b60405180910390fd5b600280549050815114610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890611521565b60405180910390fd5b6000807399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610871919061107c565b602060405180830381865afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190611556565b905060005b83518110156108fb578381815181106108d3576108d2611583565b5b6020026020010151836108e691906115e1565b925080806108f390611637565b9150506108b7565b5060005b8351811015610c235760008385838151811061091e5761091d611583565b5b6020026020010151846109319190611680565b61093b9190611709565b90506000811115610c0f5760016002838154811061095c5761095b611583565b5b90600052602060002090600202016001015414610a7b57736b7a87899490ece95443e979ca9485cbe7e7152273ffffffffffffffffffffffffffffffffffffffff1663edbdf5e273bbc4a8d076f4b1888fec42581b6fc58d242cf2d5600285815481106109cc576109cb611583565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460028781548110610a1357610a12611583565b5b9060005260206000209060020201600101546040518563ffffffff1660e01b8152600401610a44949392919061173a565b600060405180830381600087803b158015610a5e57600080fd5b505af1158015610a72573d6000803e3d6000fd5b50505050610b54565b7399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60028481548110610abf57610abe611583565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610b0f9291906112ab565b6020604051808303816000875af1158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b529190611794565b505b60028281548110610b6857610b67611583565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fceaf82a0ff5bb3694b4434c66eff6741465c1a502542e441113e2f554cfe71568260028581548110610be657610be5611583565b5b906000526020600020906002020160010154604051610c069291906117c1565b60405180910390a25b508080610c1b90611637565b9150506108ff565b50505050565b60028181548110610c3957600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0290611371565b60405180910390fd5b6003600082815260200190815260200160002060009054906101000a900460ff1615610d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6390611836565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff021916908315150217905550600260405180604001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550508173ffffffffffffffffffffffffffffffffffffffff167f6f854dd3349576c51e096779d2c5801bd2e775255e7105e31e50d3e344bb79a282604051610e879190611856565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1882610eed565b9050919050565b610f2881610f0d565b8114610f3357600080fd5b50565b600081359050610f4581610f1f565b92915050565b60008115159050919050565b610f6081610f4b565b8114610f6b57600080fd5b50565b600081359050610f7d81610f57565b92915050565b600080600060608486031215610f9c57610f9b610ee3565b5b6000610faa86828701610f36565b9350506020610fbb86828701610f6e565b9250506040610fcc86828701610f6e565b9150509250925092565b60008060408385031215610fed57610fec610ee3565b5b6000610ffb85828601610f36565b925050602061100c85828601610f6e565b9150509250929050565b60006020828403121561102c5761102b610ee3565b5b600061103a84828501610f36565b91505092915050565b61104c81610f4b565b82525050565b60006020820190506110676000830184611043565b92915050565b61107681610f0d565b82525050565b6000602082019050611091600083018461106d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110e58261109c565b810181811067ffffffffffffffff82111715611104576111036110ad565b5b80604052505050565b6000611117610ed9565b905061112382826110dc565b919050565b600067ffffffffffffffff821115611143576111426110ad565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61116c81611159565b811461117757600080fd5b50565b60008135905061118981611163565b92915050565b60006111a261119d84611128565b61110d565b905080838252602082019050602084028301858111156111c5576111c4611154565b5b835b818110156111ee57806111da888261117a565b8452602084019350506020810190506111c7565b5050509392505050565b600082601f83011261120d5761120c611097565b5b813561121d84826020860161118f565b91505092915050565b60006020828403121561123c5761123b610ee3565b5b600082013567ffffffffffffffff81111561125a57611259610ee8565b5b611266848285016111f8565b91505092915050565b60006020828403121561128557611284610ee3565b5b60006112938482850161117a565b91505092915050565b6112a581611159565b82525050565b60006040820190506112c0600083018561106d565b6112cd602083018461129c565b9392505050565b600080604083850312156112eb576112ea610ee3565b5b60006112f985828601610f36565b925050602061130a8582860161117a565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061135b602083611314565b915061136682611325565b602082019050919050565b6000602082019050818103600083015261138a8161134e565b9050919050565b7f4f776e61626c653a207a65726f20616464726573730000000000000000000000600082015250565b60006113c7601583611314565b91506113d282611391565b602082019050919050565b600060208201905081810360008301526113f6816113ba565b9050919050565b7f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572600082015250565b6000611433602083611314565b915061143e826113fd565b602082019050919050565b6000602082019050818103600083015261146281611426565b9050919050565b7f6f6e6c79206f70657261746f7200000000000000000000000000000000000000600082015250565b600061149f600d83611314565b91506114aa82611469565b602082019050919050565b600060208201905081810360008301526114ce81611492565b9050919050565b7f726174696f73206c656e677468206d69736d6174636800000000000000000000600082015250565b600061150b601683611314565b9150611516826114d5565b602082019050919050565b6000602082019050818103600083015261153a816114fe565b9050919050565b60008151905061155081611163565b92915050565b60006020828403121561156c5761156b610ee3565b5b600061157a84828501611541565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115ec82611159565b91506115f783611159565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561162c5761162b6115b2565b5b828201905092915050565b600061164282611159565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611675576116746115b2565b5b600182019050919050565b600061168b82611159565b915061169683611159565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116cf576116ce6115b2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061171482611159565b915061171f83611159565b92508261172f5761172e6116da565b5b828204905092915050565b600060808201905061174f600083018761106d565b61175c602083018661106d565b611769604083018561129c565b611776606083018461129c565b95945050505050565b60008151905061178e81610f57565b92915050565b6000602082840312156117aa576117a9610ee3565b5b60006117b88482850161177f565b91505092915050565b60006040820190506117d6600083018561129c565b6117e3602083018461129c565b9392505050565b7f636861696e496420616c72656164792061646465640000000000000000000000600082015250565b6000611820601583611314565b915061182b826117ea565b602082019050919050565b6000602082019050818103600083015261184f81611813565b9050919050565b600060208201905061186b600083018461129c565b9291505056fea2646970667358221220527cf26bd854666c558694ebb913ec77e6b7f8597df78f07dde689b8275e329f64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80639299c11e116100665780639299c11e14610133578063d1bc76a11461014f578063d877f07914610180578063e30c39781461019c578063ee3cd721146101ba5761009e565b8063078dfbe7146100a35780634e71e0c8146100bf578063558a7297146100c95780636d70f7ae146100e55780638da5cb5b14610115575b600080fd5b6100bd60048036038101906100b89190610f83565b6101ea565b005b6100c761043e565b005b6100e360048036038101906100de9190610fd6565b6105d2565b005b6100ff60048036038101906100fa9190611016565b610709565b60405161010c9190611052565b60405180910390f35b61011d610729565b60405161012a919061107c565b60405180910390f35b61014d60048036038101906101489190611226565b61074d565b005b6101696004803603810190610164919061126f565b610c29565b6040516101779291906112ab565b60405180910390f35b61019a600480360381019061019591906112d4565b610c7d565b005b6101a4610e93565b6040516101b1919061107c565b60405180910390f35b6101d460048036038101906101cf919061126f565b610eb9565b6040516101e19190611052565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026f90611371565b60405180910390fd5b81156103f757600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806102b75750805b6102f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ed906113dd565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610439565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ca90611449565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611371565b60405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f93e5d6cb35b685fc6ad29826c16b672bdafd1df5b405459f5a33039c94f14dff826040516106fd9190611052565b60405180910390a25050565b60046020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d0906114b5565b60405180910390fd5b600280549050815114610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890611521565b60405180910390fd5b6000807399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610871919061107c565b602060405180830381865afa15801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190611556565b905060005b83518110156108fb578381815181106108d3576108d2611583565b5b6020026020010151836108e691906115e1565b925080806108f390611637565b9150506108b7565b5060005b8351811015610c235760008385838151811061091e5761091d611583565b5b6020026020010151846109319190611680565b61093b9190611709565b90506000811115610c0f5760016002838154811061095c5761095b611583565b5b90600052602060002090600202016001015414610a7b57736b7a87899490ece95443e979ca9485cbe7e7152273ffffffffffffffffffffffffffffffffffffffff1663edbdf5e273bbc4a8d076f4b1888fec42581b6fc58d242cf2d5600285815481106109cc576109cb611583565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460028781548110610a1357610a12611583565b5b9060005260206000209060020201600101546040518563ffffffff1660e01b8152600401610a44949392919061173a565b600060405180830381600087803b158015610a5e57600080fd5b505af1158015610a72573d6000803e3d6000fd5b50505050610b54565b7399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60028481548110610abf57610abe611583565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610b0f9291906112ab565b6020604051808303816000875af1158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b529190611794565b505b60028281548110610b6857610b67611583565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fceaf82a0ff5bb3694b4434c66eff6741465c1a502542e441113e2f554cfe71568260028581548110610be657610be5611583565b5b906000526020600020906002020160010154604051610c069291906117c1565b60405180910390a25b508080610c1b90611637565b9150506108ff565b50505050565b60028181548110610c3957600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0290611371565b60405180910390fd5b6003600082815260200190815260200160002060009054906101000a900460ff1615610d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6390611836565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff021916908315150217905550600260405180604001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550508173ffffffffffffffffffffffffffffffffffffffff167f6f854dd3349576c51e096779d2c5801bd2e775255e7105e31e50d3e344bb79a282604051610e879190611856565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900460ff1681565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1882610eed565b9050919050565b610f2881610f0d565b8114610f3357600080fd5b50565b600081359050610f4581610f1f565b92915050565b60008115159050919050565b610f6081610f4b565b8114610f6b57600080fd5b50565b600081359050610f7d81610f57565b92915050565b600080600060608486031215610f9c57610f9b610ee3565b5b6000610faa86828701610f36565b9350506020610fbb86828701610f6e565b9250506040610fcc86828701610f6e565b9150509250925092565b60008060408385031215610fed57610fec610ee3565b5b6000610ffb85828601610f36565b925050602061100c85828601610f6e565b9150509250929050565b60006020828403121561102c5761102b610ee3565b5b600061103a84828501610f36565b91505092915050565b61104c81610f4b565b82525050565b60006020820190506110676000830184611043565b92915050565b61107681610f0d565b82525050565b6000602082019050611091600083018461106d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110e58261109c565b810181811067ffffffffffffffff82111715611104576111036110ad565b5b80604052505050565b6000611117610ed9565b905061112382826110dc565b919050565b600067ffffffffffffffff821115611143576111426110ad565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61116c81611159565b811461117757600080fd5b50565b60008135905061118981611163565b92915050565b60006111a261119d84611128565b61110d565b905080838252602082019050602084028301858111156111c5576111c4611154565b5b835b818110156111ee57806111da888261117a565b8452602084019350506020810190506111c7565b5050509392505050565b600082601f83011261120d5761120c611097565b5b813561121d84826020860161118f565b91505092915050565b60006020828403121561123c5761123b610ee3565b5b600082013567ffffffffffffffff81111561125a57611259610ee8565b5b611266848285016111f8565b91505092915050565b60006020828403121561128557611284610ee3565b5b60006112938482850161117a565b91505092915050565b6112a581611159565b82525050565b60006040820190506112c0600083018561106d565b6112cd602083018461129c565b9392505050565b600080604083850312156112eb576112ea610ee3565b5b60006112f985828601610f36565b925050602061130a8582860161117a565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061135b602083611314565b915061136682611325565b602082019050919050565b6000602082019050818103600083015261138a8161134e565b9050919050565b7f4f776e61626c653a207a65726f20616464726573730000000000000000000000600082015250565b60006113c7601583611314565b91506113d282611391565b602082019050919050565b600060208201905081810360008301526113f6816113ba565b9050919050565b7f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572600082015250565b6000611433602083611314565b915061143e826113fd565b602082019050919050565b6000602082019050818103600083015261146281611426565b9050919050565b7f6f6e6c79206f70657261746f7200000000000000000000000000000000000000600082015250565b600061149f600d83611314565b91506114aa82611469565b602082019050919050565b600060208201905081810360008301526114ce81611492565b9050919050565b7f726174696f73206c656e677468206d69736d6174636800000000000000000000600082015250565b600061150b601683611314565b9150611516826114d5565b602082019050919050565b6000602082019050818103600083015261153a816114fe565b9050919050565b60008151905061155081611163565b92915050565b60006020828403121561156c5761156b610ee3565b5b600061157a84828501611541565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115ec82611159565b91506115f783611159565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561162c5761162b6115b2565b5b828201905092915050565b600061164282611159565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611675576116746115b2565b5b600182019050919050565b600061168b82611159565b915061169683611159565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116cf576116ce6115b2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061171482611159565b915061171f83611159565b92508261172f5761172e6116da565b5b828204905092915050565b600060808201905061174f600083018761106d565b61175c602083018661106d565b611769604083018561129c565b611776606083018461129c565b95945050505050565b60008151905061178e81610f57565b92915050565b6000602082840312156117aa576117a9610ee3565b5b60006117b88482850161177f565b91505092915050565b60006040820190506117d6600083018561129c565b6117e3602083018461129c565b9392505050565b7f636861696e496420616c72656164792061646465640000000000000000000000600082015250565b6000611820601583611314565b915061182b826117ea565b602082019050919050565b6000602082019050818103600083015261184f81611813565b9050919050565b600060208201905061186b600083018461129c565b9291505056fea2646970667358221220527cf26bd854666c558694ebb913ec77e6b7f8597df78f07dde689b8275e329f64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bridgeMim(uint256[])": {
        "params": {
          "ratios": "ratio in bps, 1 is 0.01%, 10_000 is 100%"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogSetOperator(address,bool)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2100,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2102,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5147,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "recipients",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(MSpellRecipients)5143_storage)dyn_storage"
      },
      {
        "astId": 5151,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "isActiveChain",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 5155,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "isOperator",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MSpellRecipients)5143_storage)dyn_storage": {
        "base": "t_struct(MSpellRecipients)5143_storage",
        "encoding": "dynamic_array",
        "label": "struct mSpellSender.MSpellRecipients[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(MSpellRecipients)5143_storage": {
        "encoding": "inplace",
        "label": "struct mSpellSender.MSpellRecipients",
        "members": [
          {
            "astId": 5140,
            "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5142,
            "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
            "label": "chainId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}