{
  "address": "0xf780Dec6C8f7B4a14858FE3CCD64E4CC1F8F3e12",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotNoon",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPastNoon",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NotUpdated",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainIdLZ",
          "type": "uint256"
        }
      ],
      "name": "LogAddRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "LogBridgeToRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_purchaser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_treasuryPercentage",
          "type": "uint256"
        }
      ],
      "name": "LogChangePurchaser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "LogSetOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainIdLZ",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        }
      ],
      "name": "LogSetReporter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "LogSpellStakedReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chainIdLZ",
          "type": "uint256"
        }
      ],
      "name": "addMSpellRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainIdLZ",
          "type": "uint256"
        }
      ],
      "name": "addReporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeMim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_purchaser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryPercentage",
          "type": "uint256"
        }
      ],
      "name": "changePurchaser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isActiveChain",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "isActive",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "position",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mSpellReporter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "recipients",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "chainIdLZ",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "lastUpdated",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "amountStaked",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sspellBuyBack",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferWithdrawer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x78dbe1f6dada41d16036e2798570810da82cb21ac5c6e914af42d41ec3bb2f2e",
  "receipt": {
    "to": null,
    "from": "0xb4EfdA6DAf5ef75D08869A0f9C0213278fb43b6C",
    "contractAddress": "0xf780Dec6C8f7B4a14858FE3CCD64E4CC1F8F3e12",
    "transactionIndex": 81,
    "gasUsed": "2903784",
    "logsBloom": "0x00000000000000000000000000000020000000000000000000c00000000000000000000000000020000000000000000000000000000000000000000000200000000000000000000000000000000000000001000000000000000000080000000000004080020000000000000000000800000000000000000000000100000000400000200000000000000000000000000000000000000000000000000000000000020000000000000000000002001000000100000000000000000000000000000000000000000000000000000400000000000000000000000004000000000020000018000000000000000000000000000000000004000000000000000000000000",
    "blockHash": "0x67e282637af87bfcd1d663e130e948bbd300c3f0e60f58efb3d98e6dd41752f8",
    "transactionHash": "0x78dbe1f6dada41d16036e2798570810da82cb21ac5c6e914af42d41ec3bb2f2e",
    "logs": [
      {
        "transactionIndex": 81,
        "blockNumber": 14476618,
        "transactionHash": "0x78dbe1f6dada41d16036e2798570810da82cb21ac5c6e914af42d41ec3bb2f2e",
        "address": "0xf780Dec6C8f7B4a14858FE3CCD64E4CC1F8F3e12",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b4efda6daf5ef75d08869a0f9c0213278fb43b6c"
        ],
        "data": "0x",
        "logIndex": 118,
        "blockHash": "0x67e282637af87bfcd1d663e130e948bbd300c3f0e60f58efb3d98e6dd41752f8"
      },
      {
        "transactionIndex": 81,
        "blockNumber": 14476618,
        "transactionHash": "0x78dbe1f6dada41d16036e2798570810da82cb21ac5c6e914af42d41ec3bb2f2e",
        "address": "0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000f780dec6c8f7b4a14858fe3ccd64e4cc1f8f3e12",
          "0x000000000000000000000000bbc4a8d076f4b1888fec42581b6fc58d242cf2d5"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 119,
        "blockHash": "0x67e282637af87bfcd1d663e130e948bbd300c3f0e60f58efb3d98e6dd41752f8"
      }
    ],
    "blockNumber": 14476618,
    "cumulativeGasUsed": "8144669",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1b9be3ac9fab54fdd6d9ff492a6a4ad2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotNoon\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPastNoon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NotUpdated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdLZ\",\"type\":\"uint256\"}],\"name\":\"LogAddRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"LogBridgeToRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_treasuryPercentage\",\"type\":\"uint256\"}],\"name\":\"LogChangePurchaser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogSetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdLZ\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"LogSetReporter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"LogSpellStakedReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainIdLZ\",\"type\":\"uint256\"}],\"name\":\"addMSpellRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainIdLZ\",\"type\":\"uint256\"}],\"name\":\"addReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeMim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchaser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryPercentage\",\"type\":\"uint256\"}],\"name\":\"changePurchaser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isActiveChain\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"isActive\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"position\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mSpellReporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"chainIdLZ\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"amountStaked\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sspellBuyBack\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferWithdrawer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LogSetOperator(address,bool)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mspell/mSpellSender.sol\":\"mSpellSender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= amount;\\n        }\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_PERMIT_SIGNATURE\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x058e0708ffdd2b04a17b96b5775d9fab8daa19d3cd37d26ce6c923679bf9cc9a\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\nlibrary SafeTransferLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 100 because the calldata length is 4 + 32 * 3.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool callStatus;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata to memory piece by piece:\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \\\"amount\\\" argument. No mask as it's a full 32 byte value.\\n\\n            // Call the token and store if it succeeded or not.\\n            // We use 68 because the calldata length is 4 + 32 * 2.\\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\\n        }\\n\\n        require(didLastOptionalReturnCallSucceed(callStatus), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\\n        assembly {\\n            // Get how many bytes the call returned.\\n            let returnDataSize := returndatasize()\\n\\n            // If the call reverted:\\n            if iszero(callStatus) {\\n                // Copy the revert message into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Revert with the same message.\\n                revert(0, returnDataSize)\\n            }\\n\\n            switch returnDataSize\\n            case 32 {\\n                // Copy the return data into memory.\\n                returndatacopy(0, 0, returnDataSize)\\n\\n                // Set success to whether it returned true.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            case 0 {\\n                // There was no return data.\\n                success := 1\\n            }\\n            default {\\n                // It returned some malformed input.\\n                success := 0\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50f187c86835070ec519acffcc259cd7900fdb85cb53333210fba9491eb65eca\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xfc70adbccff46f55614fe8ddcd6966a7cbae0bfcbe787e58cb1a327a5e8bfdf6\",\"license\":\"MIT\"},\"contracts/libraries/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x2da850128806ffcf4a5910538f76e56d4f315b643af5ebeb6e4c8ca2a21c5408\",\"license\":\"MIT\"},\"contracts/mspell/mSpellSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\nimport \\\"../libraries/BoringOwnable.sol\\\";\\n// Thank you Bokky\\nimport \\\"../libraries/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ninterface AnyswapRouter {\\n    function anySwapOutUnderlying(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        uint256 toChainID\\n    ) external;\\n}\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\\ninterface IWithdrawer {\\n    function rescueTokens(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external ;\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) external;\\n}\\n\\ninterface IMSpell {\\n    function updateReward() external;\\n}\\ncontract mSpellSender is BoringOwnable, ILayerZeroReceiver {\\n    using SafeTransferLib for ERC20;\\n\\n    /// EVENTS\\n    event LogSetOperator(address indexed operator, bool status);\\n    event LogAddRecipient(address indexed recipient, uint256 chainId, uint256 chainIdLZ);\\n    event LogBridgeToRecipient(address indexed recipient, uint256 amount, uint256 chainId);\\n    event LogSpellStakedReceived(uint16 srcChainId, address indexed fromAddress, uint32 timestamp, uint128 amount);\\n    event LogSetReporter(uint256 chainIdLZ, address indexed reporter);\\n    event LogChangePurchaser(address _purchaser, address _treasury, uint _treasuryPercentage);\\n\\n    /// CONSTANTS\\n    ERC20 private constant MIM = ERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\\n    ERC20 private constant SPELL = ERC20(0x090185f2135308BaD17527004364eBcC2D37e5F6);\\n    address private constant SSPELL = 0x26FA3fFFB6EfE8c1E69103aCb4044C26B9A106a9;\\n    address private constant ANY_MIM = 0xbbc4A8d076F4B1888fec42581B6fc58d242CF2D5;\\n    AnyswapRouter private constant ANYSWAP_ROUTER = AnyswapRouter(0x6b7a87899490EcE95443e979cA9485CBE7E71522);\\n    address private constant ENDPOINT = 0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675;\\n\\n    IWithdrawer private constant withdrawer = IWithdrawer(0xB2c3A9c577068479B1E5119f6B7da98d25Ba48f4);\\n    address public sspellBuyBack = 0xfddfE525054efaAD204600d00CA86ADb1Cc2ea8a;\\n    address public treasury = 0xDF2C270f610Dc35d8fFDA5B453E74db5471E126B;\\n    uint public treasuryPercentage = 25;\\n    uint private constant PRECISION = 100;\\n\\n    struct MSpellRecipients {\\n        address recipient;\\n        uint32 chainId;\\n        uint32 chainIdLZ;\\n        uint32 lastUpdated;\\n        uint128 amountStaked;\\n    }\\n\\n    struct ActiveChain {\\n        uint8 isActive;\\n        uint32 position;\\n    }\\n\\n    MSpellRecipients[] public recipients;\\n    mapping(uint256 => ActiveChain) public isActiveChain;\\n    mapping(uint256 => address) public mSpellReporter;\\n    mapping(address => bool) public isOperator;\\n\\n    error NotNoon();\\n    error NotPastNoon();\\n    error NotUpdated(uint256);\\n\\n    modifier onlyOperator() {\\n        require(isOperator[msg.sender], \\\"only operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyNoon {\\n        uint256 hour = block.timestamp / 1 hours % 24;\\n        if (hour != 12) {\\n            revert NotNoon();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyPastNoon {\\n        uint256 hour = block.timestamp / 1 hours % 24;\\n        if (hour != 13) {\\n            revert NotPastNoon();\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        MIM.approve(ANY_MIM, type(uint256).max);\\n    }\\n\\n    function bridgeMim() external onlyPastNoon {\\n        uint256 summedRatio;\\n        uint256 totalAmount = MIM.balanceOf(address(withdrawer));\\n        uint256 amountToBeDistributed = totalAmount - totalAmount * treasuryPercentage / PRECISION;\\n\\n        withdrawer.rescueTokens(MIM, address(this), amountToBeDistributed);\\n        withdrawer.rescueTokens(MIM, treasury, totalAmount * treasuryPercentage / PRECISION);\\n\\n        uint256 currentDay = BokkyPooBahsDateTimeLibrary.getDay(block.timestamp);\\n        uint256 sspellAmount = SPELL.balanceOf(SSPELL);\\n        uint256 mspellAmount;\\n        uint256 length = recipients.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if(recipients[i].chainId != 1) {\\n                summedRatio += recipients[i].amountStaked;\\n                if(BokkyPooBahsDateTimeLibrary.getDay(uint256(recipients[i].lastUpdated)) != currentDay) {\\n                    revert NotUpdated(recipients[i].chainId);\\n                }\\n            } else {\\n                mspellAmount = SPELL.balanceOf(recipients[i].recipient);\\n                summedRatio += mspellAmount + sspellAmount;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            if (recipients[i].chainId != 1) {\\n                uint256 amount = (amountToBeDistributed * recipients[i].amountStaked) / summedRatio;\\n                if (amount > 0 ) {\\n                    ANYSWAP_ROUTER.anySwapOutUnderlying(ANY_MIM, recipients[i].recipient, amount, recipients[i].chainId);\\n                    emit LogBridgeToRecipient(recipients[i].recipient, amount, recipients[i].chainId);\\n                }\\n            } else {\\n                uint256 amountMSpell = (amountToBeDistributed * mspellAmount) / summedRatio;\\n                uint256 amountsSpell = (amountToBeDistributed * sspellAmount) / summedRatio;\\n\\n                MIM.transfer(recipients[i].recipient, amountMSpell);\\n                IMSpell(recipients[i].recipient).updateReward();\\n                MIM.transfer(sspellBuyBack, amountsSpell);\\n            }\\n        }\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64, bytes calldata _payload) external onlyNoon {\\n        require(msg.sender == ENDPOINT);\\n        uint position = isActiveChain[uint256(_srcChainId)].position;\\n        MSpellRecipients storage recipient = recipients[position];\\n        address fromAddress;\\n        assembly {\\n            fromAddress := mload(add(_srcAddress, 20))\\n        }\\n        require(fromAddress == mSpellReporter[uint256(_srcChainId)]);\\n        (uint32 timestamp, uint128 amount) = abi.decode(_payload, (uint32, uint128));\\n        recipient.amountStaked = amount;\\n        recipient.lastUpdated = timestamp;\\n        emit LogSpellStakedReceived(_srcChainId, fromAddress, timestamp, amount);\\n    }\\n\\n    function addMSpellRecipient(address recipient, uint256 chainId, uint256 chainIdLZ) external onlyOwner {\\n        require(isActiveChain[chainIdLZ].isActive == 0, \\\"chainId already added\\\");\\n        uint256 position = recipients.length; \\n        isActiveChain[chainIdLZ] = ActiveChain(1, uint32(position));\\n        recipients.push(MSpellRecipients(recipient, uint32(chainId), uint32(chainIdLZ), 0, 0));\\n        emit LogAddRecipient(recipient, chainId, chainIdLZ);\\n    }\\n\\n    function setOperator(address operator, bool status) external onlyOwner {\\n        isOperator[operator] = status;\\n        emit LogSetOperator(operator, status);\\n    }\\n\\n    function addReporter(address reporter, uint256 chainIdLZ) external onlyOwner {\\n        mSpellReporter[chainIdLZ] = reporter;\\n        emit LogSetReporter(chainIdLZ, reporter);\\n    }\\n\\n    function transferWithdrawer(address newOwner) external onlyOwner {\\n        withdrawer.transferOwnership(newOwner, true, false);\\n    }\\n\\n    function changePurchaser(address _purchaser, address _treasury, uint _treasuryPercentage) external onlyOwner {\\n        sspellBuyBack = _purchaser;\\n        treasury = _treasury;\\n        treasuryPercentage = _treasuryPercentage;\\n        emit LogChangePurchaser( _purchaser,  _treasury,  _treasuryPercentage);\\n    }\\n}\\n\",\"keccak256\":\"0x7475a7f5136a1cd8b5cba3a9c315d370cdb1d5fca27ce5581a661fcd6b24b073\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405273fddfe525054efaad204600d00ca86adb1cc2ea8a600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073df2c270f610dc35d8ffda5b453e74db5471e126b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506019600455348015620000c057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a37399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff1663095ea7b373bbc4a8d076f4b1888fec42581b6fc58d242cf2d57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620001e19291906200028e565b6020604051808303816000875af115801562000201573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002279190620002fd565b506200032f565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200025b826200022e565b9050919050565b6200026d816200024e565b82525050565b6000819050919050565b620002888162000273565b82525050565b6000604082019050620002a5600083018562000262565b620002b460208301846200027d565b9392505050565b600080fd5b60008115159050919050565b620002d781620002c0565b8114620002e357600080fd5b50565b600081519050620002f781620002cc565b92915050565b600060208284031215620003165762000315620002bb565b5b60006200032684828501620002e6565b91505092915050565b61315f806200033f6000396000f3fe608060405234801561001057600080fd5b50600436106101155760003560e01c80636d70f7ae116100a2578063d1bc76a111610071578063d1bc76a11461027e578063e30c3978146102b2578063e909e181146102d0578063e9f850cf14610300578063ee3cd7211461031c57610115565b80636d70f7ae146102085780637ab560831461023857806385bffc84146102565780638da5cb5b1461026057610115565b80634e71e0c8116100e95780634e71e0c81461018a578063558a72971461019457806359030dbb146101b05780635e4523ae146101cc57806361d027b3146101ea57610115565b80621d35671461011a578063078dfbe7146101365780630daf9c1e1461015257806336df3eae1461016e575b600080fd5b610134600480360381019061012f9190612284565b61034d565b005b610150600480360381019061014b91906123be565b610597565b005b61016c60048036038101906101679190612411565b6107eb565b005b61018860048036038101906101839190612474565b610901565b005b610192610c60565b005b6101ae60048036038101906101a991906124c7565b610df4565b005b6101ca60048036038101906101c59190612507565b610f2b565b005b6101d461105d565b6040516101e19190612556565b60405180910390f35b6101f2611083565b6040516101ff9190612556565b60405180910390f35b610222600480360381019061021d9190612411565b6110a9565b60405161022f9190612580565b60405180910390f35b6102406110c9565b60405161024d91906125aa565b60405180910390f35b61025e6110cf565b005b610268611bc3565b6040516102759190612556565b60405180910390f35b610298600480360381019061029391906125c5565b611be7565b6040516102a995949392919061263c565b60405180910390f35b6102ba611c99565b6040516102c79190612556565b60405180910390f35b6102ea60048036038101906102e591906125c5565b611cbf565b6040516102f79190612556565b60405180910390f35b61031a6004803603810190610315919061268f565b611cf2565b005b610336600480360381019061033191906125c5565b611e49565b6040516103449291906126fe565b60405180910390f35b60006018610e104261035f9190612785565b61036991906127b6565b9050600c81146103a5576040517f3ea9114000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7366a71dcef29a0ffbdbe3c6a460a3b5bc225cd67573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f157600080fd5b6000600660008861ffff16815260200190815260200160002060000160019054906101000a900463ffffffff1663ffffffff16905060006005828154811061043c5761043b6127e7565b5b90600052602060002090600202019050600060148801519050600760008a61ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104c457600080fd5b60008087878101906104d6919061286e565b91509150808460010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508184600001601c6101000a81548163ffffffff021916908363ffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff167fe0d8ef8074a6e02ddc0b4a702390e047ac21fd4c63687002b6846bb780287a568c8484604051610582939291906128bd565b60405180910390a25050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90612951565b60405180910390fd5b81156107a457600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806106645750805b6106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a906129bd565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107e6565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087090612951565b60405180910390fd5b73b2c3a9c577068479b1e5119f6b7da98d25ba48f473ffffffffffffffffffffffffffffffffffffffff1663078dfbe782600160006040518463ffffffff1660e01b81526004016108cc939291906129dd565b600060405180830381600087803b1580156108e657600080fd5b505af11580156108fa573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098690612951565b60405180910390fd5b60006006600083815260200190815260200160002060000160009054906101000a900460ff1660ff16146109f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ef90612a60565b60405180910390fd5b600060058054905090506040518060400160405280600160ff1681526020018263ffffffff168152506006600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555090505060056040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1681526020018463ffffffff168152602001600063ffffffff16815260200160006fffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050508373ffffffffffffffffffffffffffffffffffffffff167fb64102a4611dd2eb58cfdb000b0fdd03770ae5c3220bd030b06b9a65004af28f8484604051610c52929190612a80565b60405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cec90612af5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7990612951565b60405180910390fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f93e5d6cb35b685fc6ad29826c16b672bdafd1df5b405459f5a33039c94f14dff82604051610f1f9190612580565b60405180910390a25050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb090612951565b60405180910390fd5b816007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f8419ea90414db87493e1e23bbc2be8cc81cb16d1e3190f150fc86773930a63228260405161105191906125aa565b60405180910390a25050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915054906101000a900460ff1681565b60045481565b60006018610e10426110e19190612785565b6110eb91906127b6565b9050600d8114611127576040517f5897b5fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000807399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff166370a0823173b2c3a9c577068479b1e5119f6b7da98d25ba48f46040518263ffffffff1660e01b815260040161118b9190612556565b602060405180830381865afa1580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190612b2a565b905060006064600454836111e09190612b57565b6111ea9190612785565b826111f59190612bb1565b905073b2c3a9c577068479b1e5119f6b7da98d25ba48f473ffffffffffffffffffffffffffffffffffffffff1663cea9d26f7399d8a9c45b2eca8864373a26d1459e3dff1e17f330846040518463ffffffff1660e01b815260040161125c93929190612c44565b600060405180830381600087803b15801561127657600080fd5b505af115801561128a573d6000803e3d6000fd5b5050505073b2c3a9c577068479b1e5119f6b7da98d25ba48f473ffffffffffffffffffffffffffffffffffffffff1663cea9d26f7399d8a9c45b2eca8864373a26d1459e3dff1e17f3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166064600454876113069190612b57565b6113109190612785565b6040518463ffffffff1660e01b815260040161132e93929190612c44565b600060405180830381600087803b15801561134857600080fd5b505af115801561135c573d6000803e3d6000fd5b50505050600061136b42611e8a565b9050600073090185f2135308bad17527004364ebcc2d37e5f673ffffffffffffffffffffffffffffffffffffffff166370a082317326fa3fffb6efe8c1e69103acb4044c26b9a106a96040518263ffffffff1660e01b81526004016113d09190612556565b602060405180830381865afa1580156113ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114119190612b2a565b9050600080600580549050905060005b818110156116905760016005828154811061143f5761143e6127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff1663ffffffff161461158e57600581815481106114805761147f6127e7565b5b906000526020600020906002020160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16886114cb9190612c7b565b975084611512600583815481106114e5576114e46127e7565b5b9060005260206000209060020201600001601c9054906101000a900463ffffffff1663ffffffff16611e8a565b14611589576005818154811061152b5761152a6127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff166040517f5c7a1e9c0000000000000000000000000000000000000000000000000000000081526004016115809190612d02565b60405180910390fd5b61167d565b73090185f2135308bad17527004364ebcc2d37e5f673ffffffffffffffffffffffffffffffffffffffff166370a08231600583815481106115d2576115d16127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016116209190612556565b602060405180830381865afa15801561163d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116619190612b2a565b9250838361166f9190612c7b565b8861167a9190612c7b565b97505b808061168890612d1d565b915050611421565b5060005b81811015611bb8576001600582815481106116b2576116b16127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff1663ffffffff161461193a57600088600583815481106116f6576116f56127e7565b5b906000526020600020906002020160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16886117419190612b57565b61174b9190612785565b9050600081111561193457736b7a87899490ece95443e979ca9485cbe7e7152273ffffffffffffffffffffffffffffffffffffffff1663edbdf5e273bbc4a8d076f4b1888fec42581b6fc58d242cf2d5600585815481106117af576117ae6127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600587815481106117f6576117f56127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff166040518563ffffffff1660e01b81526004016118379493929190612d66565b600060405180830381600087803b15801561185157600080fd5b505af1158015611865573d6000803e3d6000fd5b505050506005828154811061187d5761187c6127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fceaf82a0ff5bb3694b4434c66eff6741465c1a502542e441113e2f554cfe715682600585815481106118fb576118fa6127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff1660405161192b929190612dab565b60405180910390a25b50611ba5565b60008884886119499190612b57565b6119539190612785565b905060008986896119649190612b57565b61196e9190612785565b90507399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600585815481106119b4576119b36127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611a04929190612dd4565b6020604051808303816000875af1158015611a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a479190612e12565b5060058381548110611a5c57611a5b6127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f36c0a726040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ad557600080fd5b505af1158015611ae9573d6000803e3d6000fd5b505050507399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b5e929190612dd4565b6020604051808303816000875af1158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba19190612e12565b5050505b8080611bb090612d1d565b915050611694565b505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058181548110611bf757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900463ffffffff16908060000160189054906101000a900463ffffffff169080600001601c9054906101000a900463ffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16905085565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7790612951565b60405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004819055507fe56c270b94c3acf065cbe14b25675de866cd9381a298b6d30d7c5526b317cbac838383604051611e3c93929190612e3f565b60405180910390a1505050565b60066020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900463ffffffff16905082565b6000611ea36201518083611e9e9190612785565b611eb1565b909150905080915050919050565b600080600080849050600062253d8c62010bd983611ecf9190612e80565b611ed99190612e80565b9050600062023ab1826004611eee9190612f14565b611ef8919061302b565b9050600460038262023ab1611f0d9190612f14565b611f179190612e80565b611f21919061302b565b82611f2c9190613095565b9150600062164b09600184611f419190612e80565b610fa0611f4e9190612f14565b611f58919061302b565b9050601f6004826105b5611f6c9190612f14565b611f76919061302b565b84611f819190613095565b611f8b9190612e80565b9250600061098f846050611f9f9190612f14565b611fa9919061302b565b9050600060508261098f611fbd9190612f14565b611fc7919061302b565b85611fd29190613095565b9050600b82611fe1919061302b565b945084600c611ff09190612f14565b600283611ffd9190612e80565b6120079190613095565b915084836031866120189190613095565b60646120249190612f14565b61202e9190612e80565b6120389190612e80565b92508298508197508096505050505050509193909250565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b61207b81612064565b811461208657600080fd5b50565b60008135905061209881612072565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120f1826120a8565b810181811067ffffffffffffffff821117156121105761210f6120b9565b5b80604052505050565b6000612123612050565b905061212f82826120e8565b919050565b600067ffffffffffffffff82111561214f5761214e6120b9565b5b612158826120a8565b9050602081019050919050565b82818337600083830152505050565b600061218761218284612134565b612119565b9050828152602081018484840111156121a3576121a26120a3565b5b6121ae848285612165565b509392505050565b600082601f8301126121cb576121ca61209e565b5b81356121db848260208601612174565b91505092915050565b600067ffffffffffffffff82169050919050565b612201816121e4565b811461220c57600080fd5b50565b60008135905061221e816121f8565b92915050565b600080fd5b600080fd5b60008083601f8401126122445761224361209e565b5b8235905067ffffffffffffffff81111561226157612260612224565b5b60208301915083600182028301111561227d5761227c612229565b5b9250929050565b6000806000806000608086880312156122a05761229f61205a565b5b60006122ae88828901612089565b955050602086013567ffffffffffffffff8111156122cf576122ce61205f565b5b6122db888289016121b6565b94505060406122ec8882890161220f565b935050606086013567ffffffffffffffff81111561230d5761230c61205f565b5b6123198882890161222e565b92509250509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061235382612328565b9050919050565b61236381612348565b811461236e57600080fd5b50565b6000813590506123808161235a565b92915050565b60008115159050919050565b61239b81612386565b81146123a657600080fd5b50565b6000813590506123b881612392565b92915050565b6000806000606084860312156123d7576123d661205a565b5b60006123e586828701612371565b93505060206123f6868287016123a9565b9250506040612407868287016123a9565b9150509250925092565b6000602082840312156124275761242661205a565b5b600061243584828501612371565b91505092915050565b6000819050919050565b6124518161243e565b811461245c57600080fd5b50565b60008135905061246e81612448565b92915050565b60008060006060848603121561248d5761248c61205a565b5b600061249b86828701612371565b93505060206124ac8682870161245f565b92505060406124bd8682870161245f565b9150509250925092565b600080604083850312156124de576124dd61205a565b5b60006124ec85828601612371565b92505060206124fd858286016123a9565b9150509250929050565b6000806040838503121561251e5761251d61205a565b5b600061252c85828601612371565b925050602061253d8582860161245f565b9150509250929050565b61255081612348565b82525050565b600060208201905061256b6000830184612547565b92915050565b61257a81612386565b82525050565b60006020820190506125956000830184612571565b92915050565b6125a48161243e565b82525050565b60006020820190506125bf600083018461259b565b92915050565b6000602082840312156125db576125da61205a565b5b60006125e98482850161245f565b91505092915050565b600063ffffffff82169050919050565b61260b816125f2565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61263681612611565b82525050565b600060a0820190506126516000830188612547565b61265e6020830187612602565b61266b6040830186612602565b6126786060830185612602565b612685608083018461262d565b9695505050505050565b6000806000606084860312156126a8576126a761205a565b5b60006126b686828701612371565b93505060206126c786828701612371565b92505060406126d88682870161245f565b9150509250925092565b600060ff82169050919050565b6126f8816126e2565b82525050565b600060408201905061271360008301856126ef565b6127206020830184612602565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127908261243e565b915061279b8361243e565b9250826127ab576127aa612727565b5b828204905092915050565b60006127c18261243e565b91506127cc8361243e565b9250826127dc576127db612727565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61281f816125f2565b811461282a57600080fd5b50565b60008135905061283c81612816565b92915050565b61284b81612611565b811461285657600080fd5b50565b60008135905061286881612842565b92915050565b600080604083850312156128855761288461205a565b5b60006128938582860161282d565b92505060206128a485828601612859565b9150509250929050565b6128b781612064565b82525050565b60006060820190506128d260008301866128ae565b6128df6020830185612602565b6128ec604083018461262d565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061293b6020836128f4565b915061294682612905565b602082019050919050565b6000602082019050818103600083015261296a8161292e565b9050919050565b7f4f776e61626c653a207a65726f20616464726573730000000000000000000000600082015250565b60006129a76015836128f4565b91506129b282612971565b602082019050919050565b600060208201905081810360008301526129d68161299a565b9050919050565b60006060820190506129f26000830186612547565b6129ff6020830185612571565b612a0c6040830184612571565b949350505050565b7f636861696e496420616c72656164792061646465640000000000000000000000600082015250565b6000612a4a6015836128f4565b9150612a5582612a14565b602082019050919050565b60006020820190508181036000830152612a7981612a3d565b9050919050565b6000604082019050612a95600083018561259b565b612aa2602083018461259b565b9392505050565b7f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572600082015250565b6000612adf6020836128f4565b9150612aea82612aa9565b602082019050919050565b60006020820190508181036000830152612b0e81612ad2565b9050919050565b600081519050612b2481612448565b92915050565b600060208284031215612b4057612b3f61205a565b5b6000612b4e84828501612b15565b91505092915050565b6000612b628261243e565b9150612b6d8361243e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ba657612ba5612756565b5b828202905092915050565b6000612bbc8261243e565b9150612bc78361243e565b925082821015612bda57612bd9612756565b5b828203905092915050565b6000819050919050565b6000612c0a612c05612c0084612328565b612be5565b612328565b9050919050565b6000612c1c82612bef565b9050919050565b6000612c2e82612c11565b9050919050565b612c3e81612c23565b82525050565b6000606082019050612c596000830186612c35565b612c666020830185612547565b612c73604083018461259b565b949350505050565b6000612c868261243e565b9150612c918361243e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612cc657612cc5612756565b5b828201905092915050565b6000612cec612ce7612ce2846125f2565b612be5565b61243e565b9050919050565b612cfc81612cd1565b82525050565b6000602082019050612d176000830184612cf3565b92915050565b6000612d288261243e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d5b57612d5a612756565b5b600182019050919050565b6000608082019050612d7b6000830187612547565b612d886020830186612547565b612d95604083018561259b565b612da26060830184612cf3565b95945050505050565b6000604082019050612dc0600083018561259b565b612dcd6020830184612cf3565b9392505050565b6000604082019050612de96000830185612547565b612df6602083018461259b565b9392505050565b600081519050612e0c81612392565b92915050565b600060208284031215612e2857612e2761205a565b5b6000612e3684828501612dfd565b91505092915050565b6000606082019050612e546000830186612547565b612e616020830185612547565b612e6e604083018461259b565b949350505050565b6000819050919050565b6000612e8b82612e76565b9150612e9683612e76565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615612ed157612ed0612756565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615612f0957612f08612756565b5b828201905092915050565b6000612f1f82612e76565b9150612f2a83612e76565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612f6957612f68612756565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612fa657612fa5612756565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612fe357612fe2612756565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156130205761301f612756565b5b828202905092915050565b600061303682612e76565b915061304183612e76565b92508261305157613050612727565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561308a57613089612756565b5b828205905092915050565b60006130a082612e76565b91506130ab83612e76565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156130e6576130e5612756565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561311e5761311d612756565b5b82820390509291505056fea264697066735822122014ef606f56231d6d2bf80554bb72d01685f6c758d7a7037b753ab141abf9009b64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101155760003560e01c80636d70f7ae116100a2578063d1bc76a111610071578063d1bc76a11461027e578063e30c3978146102b2578063e909e181146102d0578063e9f850cf14610300578063ee3cd7211461031c57610115565b80636d70f7ae146102085780637ab560831461023857806385bffc84146102565780638da5cb5b1461026057610115565b80634e71e0c8116100e95780634e71e0c81461018a578063558a72971461019457806359030dbb146101b05780635e4523ae146101cc57806361d027b3146101ea57610115565b80621d35671461011a578063078dfbe7146101365780630daf9c1e1461015257806336df3eae1461016e575b600080fd5b610134600480360381019061012f9190612284565b61034d565b005b610150600480360381019061014b91906123be565b610597565b005b61016c60048036038101906101679190612411565b6107eb565b005b61018860048036038101906101839190612474565b610901565b005b610192610c60565b005b6101ae60048036038101906101a991906124c7565b610df4565b005b6101ca60048036038101906101c59190612507565b610f2b565b005b6101d461105d565b6040516101e19190612556565b60405180910390f35b6101f2611083565b6040516101ff9190612556565b60405180910390f35b610222600480360381019061021d9190612411565b6110a9565b60405161022f9190612580565b60405180910390f35b6102406110c9565b60405161024d91906125aa565b60405180910390f35b61025e6110cf565b005b610268611bc3565b6040516102759190612556565b60405180910390f35b610298600480360381019061029391906125c5565b611be7565b6040516102a995949392919061263c565b60405180910390f35b6102ba611c99565b6040516102c79190612556565b60405180910390f35b6102ea60048036038101906102e591906125c5565b611cbf565b6040516102f79190612556565b60405180910390f35b61031a6004803603810190610315919061268f565b611cf2565b005b610336600480360381019061033191906125c5565b611e49565b6040516103449291906126fe565b60405180910390f35b60006018610e104261035f9190612785565b61036991906127b6565b9050600c81146103a5576040517f3ea9114000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7366a71dcef29a0ffbdbe3c6a460a3b5bc225cd67573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f157600080fd5b6000600660008861ffff16815260200190815260200160002060000160019054906101000a900463ffffffff1663ffffffff16905060006005828154811061043c5761043b6127e7565b5b90600052602060002090600202019050600060148801519050600760008a61ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104c457600080fd5b60008087878101906104d6919061286e565b91509150808460010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508184600001601c6101000a81548163ffffffff021916908363ffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff167fe0d8ef8074a6e02ddc0b4a702390e047ac21fd4c63687002b6846bb780287a568c8484604051610582939291906128bd565b60405180910390a25050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c90612951565b60405180910390fd5b81156107a457600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415806106645750805b6106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a906129bd565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107e6565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087090612951565b60405180910390fd5b73b2c3a9c577068479b1e5119f6b7da98d25ba48f473ffffffffffffffffffffffffffffffffffffffff1663078dfbe782600160006040518463ffffffff1660e01b81526004016108cc939291906129dd565b600060405180830381600087803b1580156108e657600080fd5b505af11580156108fa573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098690612951565b60405180910390fd5b60006006600083815260200190815260200160002060000160009054906101000a900460ff1660ff16146109f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ef90612a60565b60405180910390fd5b600060058054905090506040518060400160405280600160ff1681526020018263ffffffff168152506006600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548163ffffffff021916908363ffffffff16021790555090505060056040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018563ffffffff1681526020018463ffffffff168152602001600063ffffffff16815260200160006fffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050508373ffffffffffffffffffffffffffffffffffffffff167fb64102a4611dd2eb58cfdb000b0fdd03770ae5c3220bd030b06b9a65004af28f8484604051610c52929190612a80565b60405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cec90612af5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7990612951565b60405180910390fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f93e5d6cb35b685fc6ad29826c16b672bdafd1df5b405459f5a33039c94f14dff82604051610f1f9190612580565b60405180910390a25050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb090612951565b60405180910390fd5b816007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f8419ea90414db87493e1e23bbc2be8cc81cb16d1e3190f150fc86773930a63228260405161105191906125aa565b60405180910390a25050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60086020528060005260406000206000915054906101000a900460ff1681565b60045481565b60006018610e10426110e19190612785565b6110eb91906127b6565b9050600d8114611127576040517f5897b5fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000807399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff166370a0823173b2c3a9c577068479b1e5119f6b7da98d25ba48f46040518263ffffffff1660e01b815260040161118b9190612556565b602060405180830381865afa1580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190612b2a565b905060006064600454836111e09190612b57565b6111ea9190612785565b826111f59190612bb1565b905073b2c3a9c577068479b1e5119f6b7da98d25ba48f473ffffffffffffffffffffffffffffffffffffffff1663cea9d26f7399d8a9c45b2eca8864373a26d1459e3dff1e17f330846040518463ffffffff1660e01b815260040161125c93929190612c44565b600060405180830381600087803b15801561127657600080fd5b505af115801561128a573d6000803e3d6000fd5b5050505073b2c3a9c577068479b1e5119f6b7da98d25ba48f473ffffffffffffffffffffffffffffffffffffffff1663cea9d26f7399d8a9c45b2eca8864373a26d1459e3dff1e17f3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166064600454876113069190612b57565b6113109190612785565b6040518463ffffffff1660e01b815260040161132e93929190612c44565b600060405180830381600087803b15801561134857600080fd5b505af115801561135c573d6000803e3d6000fd5b50505050600061136b42611e8a565b9050600073090185f2135308bad17527004364ebcc2d37e5f673ffffffffffffffffffffffffffffffffffffffff166370a082317326fa3fffb6efe8c1e69103acb4044c26b9a106a96040518263ffffffff1660e01b81526004016113d09190612556565b602060405180830381865afa1580156113ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114119190612b2a565b9050600080600580549050905060005b818110156116905760016005828154811061143f5761143e6127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff1663ffffffff161461158e57600581815481106114805761147f6127e7565b5b906000526020600020906002020160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16886114cb9190612c7b565b975084611512600583815481106114e5576114e46127e7565b5b9060005260206000209060020201600001601c9054906101000a900463ffffffff1663ffffffff16611e8a565b14611589576005818154811061152b5761152a6127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff166040517f5c7a1e9c0000000000000000000000000000000000000000000000000000000081526004016115809190612d02565b60405180910390fd5b61167d565b73090185f2135308bad17527004364ebcc2d37e5f673ffffffffffffffffffffffffffffffffffffffff166370a08231600583815481106115d2576115d16127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016116209190612556565b602060405180830381865afa15801561163d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116619190612b2a565b9250838361166f9190612c7b565b8861167a9190612c7b565b97505b808061168890612d1d565b915050611421565b5060005b81811015611bb8576001600582815481106116b2576116b16127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff1663ffffffff161461193a57600088600583815481106116f6576116f56127e7565b5b906000526020600020906002020160010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16886117419190612b57565b61174b9190612785565b9050600081111561193457736b7a87899490ece95443e979ca9485cbe7e7152273ffffffffffffffffffffffffffffffffffffffff1663edbdf5e273bbc4a8d076f4b1888fec42581b6fc58d242cf2d5600585815481106117af576117ae6127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600587815481106117f6576117f56127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff166040518563ffffffff1660e01b81526004016118379493929190612d66565b600060405180830381600087803b15801561185157600080fd5b505af1158015611865573d6000803e3d6000fd5b505050506005828154811061187d5761187c6127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fceaf82a0ff5bb3694b4434c66eff6741465c1a502542e441113e2f554cfe715682600585815481106118fb576118fa6127e7565b5b906000526020600020906002020160000160149054906101000a900463ffffffff1660405161192b929190612dab565b60405180910390a25b50611ba5565b60008884886119499190612b57565b6119539190612785565b905060008986896119649190612b57565b61196e9190612785565b90507399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600585815481106119b4576119b36127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611a04929190612dd4565b6020604051808303816000875af1158015611a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a479190612e12565b5060058381548110611a5c57611a5b6127e7565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f36c0a726040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611ad557600080fd5b505af1158015611ae9573d6000803e3d6000fd5b505050507399d8a9c45b2eca8864373a26d1459e3dff1e17f373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b5e929190612dd4565b6020604051808303816000875af1158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba19190612e12565b5050505b8080611bb090612d1d565b915050611694565b505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058181548110611bf757600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900463ffffffff16908060000160189054906101000a900463ffffffff169080600001601c9054906101000a900463ffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16905085565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7790612951565b60405180910390fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004819055507fe56c270b94c3acf065cbe14b25675de866cd9381a298b6d30d7c5526b317cbac838383604051611e3c93929190612e3f565b60405180910390a1505050565b60066020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900463ffffffff16905082565b6000611ea36201518083611e9e9190612785565b611eb1565b909150905080915050919050565b600080600080849050600062253d8c62010bd983611ecf9190612e80565b611ed99190612e80565b9050600062023ab1826004611eee9190612f14565b611ef8919061302b565b9050600460038262023ab1611f0d9190612f14565b611f179190612e80565b611f21919061302b565b82611f2c9190613095565b9150600062164b09600184611f419190612e80565b610fa0611f4e9190612f14565b611f58919061302b565b9050601f6004826105b5611f6c9190612f14565b611f76919061302b565b84611f819190613095565b611f8b9190612e80565b9250600061098f846050611f9f9190612f14565b611fa9919061302b565b9050600060508261098f611fbd9190612f14565b611fc7919061302b565b85611fd29190613095565b9050600b82611fe1919061302b565b945084600c611ff09190612f14565b600283611ffd9190612e80565b6120079190613095565b915084836031866120189190613095565b60646120249190612f14565b61202e9190612e80565b6120389190612e80565b92508298508197508096505050505050509193909250565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b61207b81612064565b811461208657600080fd5b50565b60008135905061209881612072565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120f1826120a8565b810181811067ffffffffffffffff821117156121105761210f6120b9565b5b80604052505050565b6000612123612050565b905061212f82826120e8565b919050565b600067ffffffffffffffff82111561214f5761214e6120b9565b5b612158826120a8565b9050602081019050919050565b82818337600083830152505050565b600061218761218284612134565b612119565b9050828152602081018484840111156121a3576121a26120a3565b5b6121ae848285612165565b509392505050565b600082601f8301126121cb576121ca61209e565b5b81356121db848260208601612174565b91505092915050565b600067ffffffffffffffff82169050919050565b612201816121e4565b811461220c57600080fd5b50565b60008135905061221e816121f8565b92915050565b600080fd5b600080fd5b60008083601f8401126122445761224361209e565b5b8235905067ffffffffffffffff81111561226157612260612224565b5b60208301915083600182028301111561227d5761227c612229565b5b9250929050565b6000806000806000608086880312156122a05761229f61205a565b5b60006122ae88828901612089565b955050602086013567ffffffffffffffff8111156122cf576122ce61205f565b5b6122db888289016121b6565b94505060406122ec8882890161220f565b935050606086013567ffffffffffffffff81111561230d5761230c61205f565b5b6123198882890161222e565b92509250509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061235382612328565b9050919050565b61236381612348565b811461236e57600080fd5b50565b6000813590506123808161235a565b92915050565b60008115159050919050565b61239b81612386565b81146123a657600080fd5b50565b6000813590506123b881612392565b92915050565b6000806000606084860312156123d7576123d661205a565b5b60006123e586828701612371565b93505060206123f6868287016123a9565b9250506040612407868287016123a9565b9150509250925092565b6000602082840312156124275761242661205a565b5b600061243584828501612371565b91505092915050565b6000819050919050565b6124518161243e565b811461245c57600080fd5b50565b60008135905061246e81612448565b92915050565b60008060006060848603121561248d5761248c61205a565b5b600061249b86828701612371565b93505060206124ac8682870161245f565b92505060406124bd8682870161245f565b9150509250925092565b600080604083850312156124de576124dd61205a565b5b60006124ec85828601612371565b92505060206124fd858286016123a9565b9150509250929050565b6000806040838503121561251e5761251d61205a565b5b600061252c85828601612371565b925050602061253d8582860161245f565b9150509250929050565b61255081612348565b82525050565b600060208201905061256b6000830184612547565b92915050565b61257a81612386565b82525050565b60006020820190506125956000830184612571565b92915050565b6125a48161243e565b82525050565b60006020820190506125bf600083018461259b565b92915050565b6000602082840312156125db576125da61205a565b5b60006125e98482850161245f565b91505092915050565b600063ffffffff82169050919050565b61260b816125f2565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61263681612611565b82525050565b600060a0820190506126516000830188612547565b61265e6020830187612602565b61266b6040830186612602565b6126786060830185612602565b612685608083018461262d565b9695505050505050565b6000806000606084860312156126a8576126a761205a565b5b60006126b686828701612371565b93505060206126c786828701612371565b92505060406126d88682870161245f565b9150509250925092565b600060ff82169050919050565b6126f8816126e2565b82525050565b600060408201905061271360008301856126ef565b6127206020830184612602565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127908261243e565b915061279b8361243e565b9250826127ab576127aa612727565b5b828204905092915050565b60006127c18261243e565b91506127cc8361243e565b9250826127dc576127db612727565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61281f816125f2565b811461282a57600080fd5b50565b60008135905061283c81612816565b92915050565b61284b81612611565b811461285657600080fd5b50565b60008135905061286881612842565b92915050565b600080604083850312156128855761288461205a565b5b60006128938582860161282d565b92505060206128a485828601612859565b9150509250929050565b6128b781612064565b82525050565b60006060820190506128d260008301866128ae565b6128df6020830185612602565b6128ec604083018461262d565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061293b6020836128f4565b915061294682612905565b602082019050919050565b6000602082019050818103600083015261296a8161292e565b9050919050565b7f4f776e61626c653a207a65726f20616464726573730000000000000000000000600082015250565b60006129a76015836128f4565b91506129b282612971565b602082019050919050565b600060208201905081810360008301526129d68161299a565b9050919050565b60006060820190506129f26000830186612547565b6129ff6020830185612571565b612a0c6040830184612571565b949350505050565b7f636861696e496420616c72656164792061646465640000000000000000000000600082015250565b6000612a4a6015836128f4565b9150612a5582612a14565b602082019050919050565b60006020820190508181036000830152612a7981612a3d565b9050919050565b6000604082019050612a95600083018561259b565b612aa2602083018461259b565b9392505050565b7f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572600082015250565b6000612adf6020836128f4565b9150612aea82612aa9565b602082019050919050565b60006020820190508181036000830152612b0e81612ad2565b9050919050565b600081519050612b2481612448565b92915050565b600060208284031215612b4057612b3f61205a565b5b6000612b4e84828501612b15565b91505092915050565b6000612b628261243e565b9150612b6d8361243e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ba657612ba5612756565b5b828202905092915050565b6000612bbc8261243e565b9150612bc78361243e565b925082821015612bda57612bd9612756565b5b828203905092915050565b6000819050919050565b6000612c0a612c05612c0084612328565b612be5565b612328565b9050919050565b6000612c1c82612bef565b9050919050565b6000612c2e82612c11565b9050919050565b612c3e81612c23565b82525050565b6000606082019050612c596000830186612c35565b612c666020830185612547565b612c73604083018461259b565b949350505050565b6000612c868261243e565b9150612c918361243e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612cc657612cc5612756565b5b828201905092915050565b6000612cec612ce7612ce2846125f2565b612be5565b61243e565b9050919050565b612cfc81612cd1565b82525050565b6000602082019050612d176000830184612cf3565b92915050565b6000612d288261243e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d5b57612d5a612756565b5b600182019050919050565b6000608082019050612d7b6000830187612547565b612d886020830186612547565b612d95604083018561259b565b612da26060830184612cf3565b95945050505050565b6000604082019050612dc0600083018561259b565b612dcd6020830184612cf3565b9392505050565b6000604082019050612de96000830185612547565b612df6602083018461259b565b9392505050565b600081519050612e0c81612392565b92915050565b600060208284031215612e2857612e2761205a565b5b6000612e3684828501612dfd565b91505092915050565b6000606082019050612e546000830186612547565b612e616020830185612547565b612e6e604083018461259b565b949350505050565b6000819050919050565b6000612e8b82612e76565b9150612e9683612e76565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615612ed157612ed0612756565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615612f0957612f08612756565b5b828201905092915050565b6000612f1f82612e76565b9150612f2a83612e76565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612f6957612f68612756565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612fa657612fa5612756565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612fe357612fe2612756565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156130205761301f612756565b5b828202905092915050565b600061303682612e76565b915061304183612e76565b92508261305157613050612727565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561308a57613089612756565b5b828205905092915050565b60006130a082612e76565b91506130ab83612e76565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156130e6576130e5612756565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561311e5761311d612756565b5b82820390509291505056fea264697066735822122014ef606f56231d6d2bf80554bb72d01685f6c758d7a7037b753ab141abf9009b64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogSetOperator(address,bool)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1980,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1982,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2251,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "sspellBuyBack",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2254,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2257,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "treasuryPercentage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2280,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "recipients",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(MSpellRecipients)2271_storage)dyn_storage"
      },
      {
        "astId": 2285,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "isActiveChain",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(ActiveChain)2276_storage)"
      },
      {
        "astId": 2289,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "mSpellReporter",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2293,
        "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
        "label": "isOperator",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MSpellRecipients)2271_storage)dyn_storage": {
        "base": "t_struct(MSpellRecipients)2271_storage",
        "encoding": "dynamic_array",
        "label": "struct mSpellSender.MSpellRecipients[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ActiveChain)2276_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct mSpellSender.ActiveChain)",
        "numberOfBytes": "32",
        "value": "t_struct(ActiveChain)2276_storage"
      },
      "t_struct(ActiveChain)2276_storage": {
        "encoding": "inplace",
        "label": "struct mSpellSender.ActiveChain",
        "members": [
          {
            "astId": 2273,
            "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2275,
            "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
            "label": "position",
            "offset": 1,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MSpellRecipients)2271_storage": {
        "encoding": "inplace",
        "label": "struct mSpellSender.MSpellRecipients",
        "members": [
          {
            "astId": 2262,
            "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2264,
            "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
            "label": "chainId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2266,
            "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
            "label": "chainIdLZ",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2268,
            "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
            "label": "lastUpdated",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2270,
            "contract": "contracts/mspell/mSpellSender.sol:mSpellSender",
            "label": "amountStaked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}