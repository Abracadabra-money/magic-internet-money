{
  "address": "0x761ea6bF41cB31B4090be183F0A70Fe2b9A7c6BD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "bentoBox_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "LogFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "LogLend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "LogRemoveCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LogRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "LogRequestLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "LogUpdateLoanParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeShare",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "t",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "aprBPS",
          "type": "uint16"
        }
      ],
      "name": "calculateInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "cook",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value2",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentBatchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesEarnedShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "contract INFTSeller",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "excessRecipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skimShortage",
          "type": "bool"
        }
      ],
      "name": "flashRepay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "anyTokenId",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureParams",
          "name": "signature",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "contract INFTBuyer",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skimShortage",
          "type": "bool"
        }
      ],
      "name": "flashRequestAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementBatchId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "accepted",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterContract",
      "outputs": [
        {
          "internalType": "contract NFTPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "skimCollateral",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "anyTokenId",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureParams",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "requestAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        }
      ],
      "name": "requestLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "skimFunds",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureParams",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "takeCollateralAndLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLoan",
      "outputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLoanParams",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "valuation",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "annualInterestBPS",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "updateLoanParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf032753fdb285b7ac6428a612e6856b1657c98b9103c4e0f30c5a818444be7b",
  "receipt": {
    "to": null,
    "from": "0x3609D20FC8Ba02Bb653593162028cf0D1c172892",
    "contractAddress": "0x761ea6bF41cB31B4090be183F0A70Fe2b9A7c6BD",
    "transactionIndex": 62,
    "gasUsed": "4450694",
    "logsBloom": "0x
    "blockHash": "0x0c06d8f138e2f00490c23659c216167a571913354b84fdaa555bcd2c860adab3",
    "transactionHash": "0xaf032753fdb285b7ac6428a612e6856b1657c98b9103c4e0f30c5a818444be7b",
    "logs": [
      {
        "transactionIndex": 62,
        "blockNumber": 35181475,
        "transactionHash": "0xaf032753fdb285b7ac6428a612e6856b1657c98b9103c4e0f30c5a818444be7b",
        "address": "0x761ea6bF41cB31B4090be183F0A70Fe2b9A7c6BD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003609d20fc8ba02bb653593162028cf0d1c172892"
        ],
        "data": "0x",
        "logIndex": 349,
        "blockHash": "0x0c06d8f138e2f00490c23659c216167a571913354b84fdaa555bcd2c860adab3"
      },
      {
        "transactionIndex": 62,
        "blockNumber": 35181475,
        "transactionHash": "0xaf032753fdb285b7ac6428a612e6856b1657c98b9103c4e0f30c5a818444be7b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003609d20fc8ba02bb653593162028cf0d1c172892",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001dea19fdcde94080000000000000000000000000000000000000000000000009123200ab271fc00000000000000000000000000000000000000000000004d6fb91b284a5d52b5d40000000000000000000000000000000000000000000000008f447e6ad59367f8000000000000000000000000000000000000000000004d6fbaf9c9ea3a3149dc",
        "logIndex": 350,
        "blockHash": "0x0c06d8f138e2f00490c23659c216167a571913354b84fdaa555bcd2c860adab3"
      }
    ],
    "blockNumber": 35181475,
    "cumulativeGasUsed": "16693238",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe56F37Ef2e54ECaA41a9675da1c3445736d60B42"
  ],
  "numDeployments": 1,
  "solcInputHash": "d80bb09544df78f0214f896a01fc8507",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"bentoBox_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"LogFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"LogLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LogRemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LogRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"LogRequestLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"LogUpdateLoanParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeShare\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"t\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"aprBPS\",\"type\":\"uint16\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"cook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentBatchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEarnedShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract INFTSeller\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"excessRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skimShortage\",\"type\":\"bool\"}],\"name\":\"flashRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"anyTokenId\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureParams\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"contract INFTBuyer\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skimShortage\",\"type\":\"bool\"}],\"name\":\"flashRequestAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementBatchId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"accepted\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterContract\",\"outputs\":[{\"internalType\":\"contract NFTPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"skimCollateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"anyTokenId\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureParams\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"requestAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"}],\"name\":\"requestLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"skimFunds\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureParams\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"takeCollateralAndLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLoanParams\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"updateLoanParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.\",\"kind\":\"dev\",\"methods\":{\"calculateInterest(uint256,uint64,uint16)\":{\"params\":{\"aprBPS\":\"Annual rate in basis points (1/10_000)\",\"principal\":\"Amount owed in wei\",\"t\":\"Duration in seconds\"}},\"cook(uint8[],uint256[],bytes[])\":{\"params\":{\"actions\":\"An array with a sequence of actions to execute (see ACTION_ declarations).\",\"datas\":\"A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\",\"values\":\"A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\"},\"returns\":{\"value1\":\"May contain the first positioned return value of the last executed action (if applicable).\",\"value2\":\"May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\"}},\"flashRepay(uint256,uint256,address,address,bool)\":{\"params\":{\"excessRecipient\":\"Receives any funds left over after repaying, if any\",\"price\":\"Sale price of the token, in wei\",\"seller\":\"INFTSeller contract that will perform the sale\",\"skimShortage\":\"True if any extra funds required have already been Bento-transfered to the contract. Take care to send enough; interest accumulates by the second.\",\"tokenId\":\"Token ID of the loan in question.\"}},\"flashRequestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,(uint256,uint8,bytes32,bytes32),uint256,address,bool)\":{\"params\":{\"anyTokenId\":\"Set if lender agreed to any token. Must have tokenId 0 in signature.\",\"borrower\":\"Receives the funds (and excess if token is cheaper)\",\"buyer\":\"INFTBuyer contract that will purchase the token\",\"lender\":\"Lender, whose BentoBox balance the funds will come from\",\"params\":\"Loan parameters requested, and signed by the lender\",\"price\":\"Price of token (in wei), sent to buyer contract\",\"signature\":\"(deadline, v, r, s) of signature. (See docs)\",\"skimShortage\":\"True if any funds needed in excess of the loan have already been Bento-transfered to the contract\",\"tokenId\":\"ID of the token that will function as collateral\"}},\"lend(uint256,(uint128,uint64,uint16),bool)\":{\"params\":{\"accepted\":\"Loan parameters as the lender saw them, for security\",\"skim\":\"True if the funds have been Bento-transferred to the contract\",\"tokenId\":\"ID of the token that will function as collateral\"}},\"removeCollateral(uint256,address)\":{\"params\":{\"to\":\"The receiver of the token.\",\"tokenId\":\"The token\"}},\"repay(uint256,uint256,address,bool)\":{\"params\":{\"principal\":\"How much of the principal to repay. Saturates at the full loan value. Zero also taken to mean 100%.\",\"skim\":\"True if the funds have already been Bento-transfered to the contract. Take care to send enough; interest accumulates by the second.\",\"to\":\"Recipient of the returned collateral. Can be anyone if msg.sender is the borrower, otherwise the borrower.\",\"tokenId\":\"Token ID of the loan in question.\"}},\"requestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,bool,(uint256,uint8,bytes32,bytes32))\":{\"params\":{\"anyTokenId\":\"Set if lender agreed to any token. Must have tokenId 0 in signature.\",\"borrower\":\"Receives the funds and the option to repay\",\"lender\":\"Lender, whose BentoBox balance the funds will come from\",\"params\":\"Loan parameters requested, and signed by the lender\",\"signature\":\"(deadline, v, r, s) of signature. (See docs)\",\"skimCollateral\":\"True if the collateral has already been transferred\",\"tokenId\":\"ID of the token that will function as collateral\"}},\"requestLoan(uint256,(uint128,uint64,uint16),address,bool)\":{\"params\":{\"params\":\"Loan conditions on offer\",\"skim\":\"True if the token has already been transferred\",\"to\":\"Address to receive the loan, or option to withdraw collateral\",\"tokenId\":\"ID of the NFT\"}},\"setFeeTo(address)\":{\"params\":{\"newFeeTo\":\"The address of the receiver.\"}},\"takeCollateralAndLend(uint256,address,(uint128,uint64,uint16),bool,(uint256,uint8,bytes32,bytes32))\":{\"params\":{\"borrower\":\"Address that provides collateral and receives the loan\",\"params\":\"Loan terms offered, and signed by the borrower\",\"signature\":\"(deadline, v, r, s) of signature. (See docs)\",\"skimFunds\":\"True if the funds have been Bento-transferred to the contract\",\"tokenId\":\"ID of the token that will function as collateral\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}},\"updateLoanParams(uint256,(uint128,uint64,uint16))\":{\"params\":{\"params\":\"The desired new loan parameters\",\"tokenId\":\"The token ID of the loan in question\"}}},\"title\":\"NFTPair\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"constructor\":\"The constructor is only used for the initial master contract.Subsequent clones are initialised via `init`.\",\"cook(uint8[],uint256[],bytes[])\":{\"notice\":\"Executes a set of actions and allows composability (contract calls) to other contracts.\"},\"flashRepay(uint256,uint256,address,address,bool)\":{\"notice\":\"Repay a loan in full, by selling the token in the same transaction. Must be the borrower.\"},\"flashRequestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,(uint256,uint8,bytes32,bytes32),uint256,address,bool)\":{\"notice\":\"Request and immediately borrow from a pre-committed lender, while buying the collateral in the same transaction.Caller provides extra funds if needed; loan can go to a different address.\"},\"init(bytes)\":{\"notice\":\"De facto constructor for clone contracts\"},\"lend(uint256,(uint128,uint64,uint16),bool)\":{\"notice\":\"Lends with the parameters specified by the borrower.\"},\"removeCollateral(uint256,address)\":{\"notice\":\"Removes `tokenId` as collateral and transfers it to `to`.This destroys the loan.\"},\"repay(uint256,uint256,address,bool)\":{\"notice\":\"Repay a loan in part or in full\"},\"requestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,bool,(uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Caller provides collateral; loan can go to a different address.\"},\"requestLoan(uint256,(uint128,uint64,uint16),address,bool)\":{\"notice\":\"Deposit an NFT as collateral and request a loan against it\"},\"setFeeTo(address)\":{\"notice\":\"Sets the beneficiary of fees accrued in liquidations. MasterContract Only Admin function.\"},\"takeCollateralAndLend(uint256,address,(uint128,uint64,uint16),bool,(uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Take collateral from a pre-commited borrower and lend against itCollateral must come from the borrower, not a third party.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"withdrawFees()\":{\"notice\":\"Withdraws the fees accumulated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTPair.sol\":\"NFTPair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":690},\"remappings\":[]},\"sources\":{\"boring-solidity-old/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x59c37af347115dfbdddb0f455d5493910b03b5fa0eb837e23dc34a594f52e9cf\",\"license\":\"MIT\"},\"boring-solidity-old/contracts/Domain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Based on code and smartness by Ross Campbell and Keno\\n// Uses immutable to store the domain separator to reduce gas usage\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\npragma solidity >=0.6.12;\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract Domain {\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n\\n    // solhint-disable var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\\n    }\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _domainSeparator() internal view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));\\n    }\\n}\\n\",\"keccak256\":\"0x697c8e1ddf68c7b9228899d9992a6e84380909d552eab5c93f91fec0af32dfaa\",\"license\":\"MIT\"},\"boring-solidity-old/contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./Domain.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n// solhint-disable not-rely-on-time\\n\\n// Data part taken out for building of contracts that receive delegate calls\\ncontract ERC20Data {\\n    /// @notice owner > balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    /// @notice owner > spender > allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    /// @notice owner > nonce mapping. Used in `permit`.\\n    mapping(address => uint256) public nonces;\\n}\\n\\nabstract contract ERC20 is IERC20, Domain {\\n    /// @notice owner > balance mapping.\\n    mapping(address => uint256) public override balanceOf;\\n    /// @notice owner > spender > allowance mapping.\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n    /// @notice owner > nonce mapping. Used in `permit`.\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\\n    /// @param to The address to move the tokens.\\n    /// @param amount of the tokens to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transfer(address to, uint256 amount) public returns (bool) {\\n        // If `amount` is 0, or `msg.sender` is `to` nothing happens\\n        if (amount != 0 || msg.sender == to) {\\n            uint256 srcBalance = balanceOf[msg.sender];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n            if (msg.sender != to) {\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so low balance calls safe some gas\\n\\n                balanceOf[msg.sender] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount;\\n            }\\n        }\\n        emit Transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\\n    /// @param from Address to draw tokens from.\\n    /// @param to The address to move the tokens.\\n    /// @param amount The token amount to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (bool) {\\n        // If `amount` is 0, or `from` is `to` nothing happens\\n        if (amount != 0) {\\n            uint256 srcBalance = balanceOf[from];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n\\n            if (from != to) {\\n                uint256 spenderAllowance = allowance[from][msg.sender];\\n                // If allowance is infinite, don't decrease it to save on gas (breaks with EIP-20).\\n                if (spenderAllowance != type(uint256).max) {\\n                    require(spenderAllowance >= amount, \\\"ERC20: allowance too low\\\");\\n                    allowance[from][msg.sender] = spenderAllowance - amount; // Underflow is checked\\n                }\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so other failed calls safe some gas\\n\\n                balanceOf[from] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount;\\n            }\\n        }\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Approves `amount` from sender to be spend by `spender`.\\n    /// @param spender Address of the party that can draw from msg.sender's account.\\n    /// @param amount The maximum collective amount that `spender` can draw.\\n    /// @return (bool) Returns True if approved.\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparator();\\n    }\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /// @notice Approves `value` from `owner_` to be spend by `spender`.\\n    /// @param owner_ Address of the owner.\\n    /// @param spender The address of the spender that gets approved to draw from `owner_`.\\n    /// @param value The maximum collective amount that `spender` can draw.\\n    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\\n    function permit(\\n        address owner_,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(owner_ != address(0), \\\"ERC20: Owner cannot be 0\\\");\\n        require(block.timestamp < deadline, \\\"ERC20: Expired\\\");\\n        require(\\n            ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline))), v, r, s) ==\\n                owner_,\\n            \\\"ERC20: Invalid Signature\\\"\\n        );\\n        allowance[owner_][spender] = value;\\n        emit Approval(owner_, spender, value);\\n    }\\n}\\n\\ncontract ERC20WithSupply is IERC20, ERC20 {\\n    uint256 public override totalSupply;\\n\\n    function _mint(address user, uint256 amount) internal {\\n        uint256 newTotalSupply = totalSupply + amount;\\n        require(newTotalSupply >= totalSupply, \\\"Mint overflow\\\");\\n        totalSupply = newTotalSupply;\\n        balanceOf[user] += amount;\\n        emit Transfer(address(0), user, amount);\\n    }\\n\\n    function _burn(address user, uint256 amount) internal {\\n        require(balanceOf[user] >= amount, \\\"Burn too much\\\");\\n        totalSupply -= amount;\\n        balanceOf[user] -= amount;\\n        emit Transfer(user, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe3e170c71b4cc2a58df6dad6c5c7a70350e6603f9977f13611811389df9457c7\",\"license\":\"MIT\"},\"boring-solidity-old/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4329bb91b4846f395b10cbf383d39761467ef0e7fe0ef642a4bee70652fa9470\",\"license\":\"MIT\"},\"boring-solidity-old/contracts/interfaces/IMasterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.6.12;\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\",\"keccak256\":\"0x10128203e1f9ea55cdfd0935b895822f6591d1a571f7d8fb1398eb4a297437a9\",\"license\":\"MIT\"},\"boring-solidity-old/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to The address of the user to check.\\n    /// @return amount The token amount.\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\n        amount = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x92d8e100a8d817ea6da8bbdc964ccd5c003ca63c6a2eb36008146a9c7efe2f36\",\"license\":\"MIT\"},\"boring-solidity-old/contracts/libraries/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.6.12 < 0.8.0;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa4a351f557dc6e8a5bc9aa5e9404f416814dda1d33b90bfbbbbaf7cb0090bb1c\",\"license\":\"MIT\"},\"boring-solidity-old/contracts/libraries/BoringRebase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.6.12 < 0.8.0;\\nimport \\\"./BoringMath.sol\\\";\\nimport \\\"./Rebase.sol\\\";\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\",\"keccak256\":\"0x31d6d241f054b771037748c1ee621ef7b1f3205c9375ed1fcb8a5568d9c3547f\",\"license\":\"MIT\"},\"boring-solidity-old/contracts/libraries/Rebase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.6.12;\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\",\"keccak256\":\"0x1b5b95bb9ca1d64a81f6f53f46b1a9de01fc50bdc70feb2f9e3f77871d793513\",\"license\":\"MIT\"},\"contracts/NFTPair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// Private Pool (NFT collateral)\\n\\n//    (                (   (\\n//    )\\\\      )    (   )\\\\  )\\\\ )  (\\n//  (((_)  ( /(   ))\\\\ ((_)(()/(  )(    (    (\\n//  )\\\\___  )(_)) /((_) _   ((_))(()\\\\   )\\\\   )\\\\ )\\n// ((/ __|((_)_ (_))( | |  _| |  ((_) ((_) _(_/(\\n//  | (__ / _` || || || |/ _` | | '_|/ _ \\\\| ' \\\\))\\n//   \\\\___|\\\\__,_| \\\\_,_||_|\\\\__,_| |_|  \\\\___/|_||_|\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to:\\n// @0xKeno - for all his invaluable contributions\\n// @burger_crypto - for the idea of trying to let the LPs benefit from liquidations\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"boring-solidity-old/contracts/libraries/BoringMath.sol\\\";\\nimport \\\"boring-solidity-old/contracts/BoringOwnable.sol\\\";\\nimport \\\"boring-solidity-old/contracts/libraries/BoringRebase.sol\\\";\\nimport \\\"boring-solidity-old/contracts/Domain.sol\\\";\\nimport \\\"boring-solidity-old/contracts/interfaces/IMasterContract.sol\\\";\\nimport \\\"boring-solidity-old/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"./interfaces/IBentoBoxV1Interface.sol\\\";\\nimport \\\"./interfaces/IERC721.sol\\\";\\nimport \\\"./interfaces/ILendingClub.sol\\\";\\nimport {INFTBuyer} from \\\"./interfaces/INFTBuyer.sol\\\";\\nimport {INFTSeller} from \\\"./interfaces/INFTSeller.sol\\\";\\nimport \\\"./interfaces/INFTPair.sol\\\";\\n\\n/// @title NFTPair\\n/// @dev This contract allows contract calls to any contract (except BentoBox)\\n/// from arbitrary callers thus, don't trust calls from this contract in any circumstances.\\ncontract NFTPair is BoringOwnable, Domain, IMasterContract {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using RebaseLibrary for Rebase;\\n    using BoringERC20 for IERC20;\\n\\n    event LogRequestLoan(address indexed borrower, uint256 indexed tokenId, TokenLoanParams params);\\n    event LogUpdateLoanParams(uint256 indexed tokenId, TokenLoanParams params);\\n    // This automatically clears the associated loan, if any\\n    event LogRemoveCollateral(uint256 indexed tokenId, address recipient);\\n    // Details are in the loan request\\n    event LogLend(address indexed lender, address indexed borrower, uint256 indexed tokenId, TokenLoanParams params);\\n    event LogRepay(address indexed from, uint256 indexed tokenId);\\n    event LogFeeTo(address indexed newFeeTo);\\n    event LogWithdrawFees(address indexed feeTo, uint256 feeShare);\\n\\n    // Immutables (for MasterContract and all clones)\\n    IBentoBoxV1 public immutable bentoBox;\\n    NFTPair public immutable masterContract;\\n\\n    // MasterContract variables\\n    address public feeTo;\\n\\n    // Per clone variables\\n    // Clone init settings\\n    IERC721 public collateral;\\n    IERC20 public asset;\\n\\n    // A note on terminology:\\n    // \\\"Shares\\\" are BentoBox shares.\\n\\n    // Track assets we own. Used to allow skimming the excesss.\\n    uint256 public feesEarnedShare;\\n\\n    // Per token settings.\\n    mapping(uint256 => TokenLoanParams) public tokenLoanParams;\\n\\n    uint8 private constant LOAN_INITIAL = 0;\\n    uint8 private constant LOAN_REQUESTED = 1;\\n    uint8 private constant LOAN_OUTSTANDING = 2;\\n    struct TokenLoan {\\n        address borrower;\\n        address lender;\\n        uint64 startTime;\\n        uint8 status;\\n    }\\n    mapping(uint256 => TokenLoan) public tokenLoan;\\n\\n    // Do not go over 100% on either of these..\\n    uint256 private constant PROTOCOL_FEE_BPS = 1000;\\n    uint256 private constant OPEN_FEE_BPS = 100;\\n    uint256 private constant BPS = 10_000;\\n    uint256 private constant YEAR_BPS = 3600 * 24 * 365 * 10_000;\\n\\n    // Highest order term in the Maclaurin series for exp used by\\n    // `calculateInterest`.\\n    // Intuitive interpretation: interest continuously accrues on the principal.\\n    // That interest, in turn, earns \\\"second-order\\\" interest-on-interest, which\\n    // itself earns \\\"third-order\\\" interest, etc. This constant determines how\\n    // far we take this until we stop counting.\\n    //\\n    // The error, in terms of the interest rate, is at least\\n    //\\n    //            ----- n                        ----- Infinity\\n    //             \\\\           x^k                \\\\              x^k\\n    //      e^x -   )          ---   , which is    )             --- ,\\n    //             /            k!                /               k!\\n    //            ----- k = 1       k            ----- k = n + 1\\n    //\\n    // where n = COMPOUND_INTEREST_TERMS, and x = rt is the total amount of\\n    // interest that is owed at rate r over time t. It makes no difference if\\n    // this is, say, 5%/year for 10 years, or 50% in one year; the calculation\\n    // is the same. Why \\\"at least\\\"? There are also rounding errors. See\\n    // `calculateInterest` for more detail.\\n    // The factorial in the denominator \\\"wins\\\"; for all reasonable (and quite\\n    // a few unreasonable) interest rates, the lower-order terms contribute the\\n    // most to the total. The following table lists some of the calculated\\n    // approximations for different values of n, along with the \\\"true\\\" result:\\n    //\\n    // Total:         10%    20%    50%    100%    200%      500%       1000%\\n    // -----------------------------------------------------------------------\\n    // n = 1:         10.0%  20.0%  50.0%  100.0%  200.0%    500.0%     1000.0%\\n    // n = 2:         10.5%  22.0%  62.5%  150.0%  400.0%   1750.0%     6000.0%\\n    // n = 3:         10.5%  22.1%  64.6%  166.7%  533.3%   3833.3%    22666.7%\\n    // n = 4:         10.5%  22.1%  64.8%  170.8%  600.0%   6437.5%    64333.3%\\n    // n = 5:         10.5%  22.1%  64.9%  171.7%  626.7%   9041.7%   147666.7%\\n    // n = 6:         10.5%  22.1%  64.9%  171.8%  635.6%  11211.8%   286555.6%\\n    // n = 7:         10.5%  22.1%  64.9%  171.8%  638.1%  12761.9%   484968.3%\\n    // n = 8:         10.5%  22.1%  64.9%  171.8%  638.7%  13730.7%   732984.1%\\n    // n = 9:         10.5%  22.1%  64.9%  171.8%  638.9%  14268.9%  1008557.3%\\n    // n = 10:        10.5%  22.1%  64.9%  171.8%  638.9%  14538.1%  1284130.5%\\n    //\\n    // (n=Infinity):  10.5%  22.1%  64.9%  171.8%  638.9%  14741.3%  2202546.6%\\n    //\\n    // For instance, calculating the compounding effects of 200% in \\\"total\\\"\\n    // interest to the sixth order results in 635.6%, whereas the true result\\n    // is 638.9%.\\n    // At 500% that difference is a little more dramatic, but it is still in\\n    // the same ballpark -- and of little practical consequence unless the\\n    // collateral can be expected to go up more than 112 times in value.\\n    // Still, for volatile tokens, or an asset that is somehow known to be very\\n    // inflationary, use a different number.\\n    // Zero (no interest at all) is ignored and treated as one (linear only).\\n    uint8 private constant COMPOUND_INTEREST_TERMS = 6;\\n\\n    // For signed lend / borrow requests:\\n    mapping(address => uint256) public currentBatchIds;\\n\\n    /// @notice The constructor is only used for the initial master contract.\\n    /// @notice Subsequent clones are initialised via `init`.\\n    constructor(IBentoBoxV1 bentoBox_) public {\\n        bentoBox = bentoBox_;\\n        masterContract = this;\\n    }\\n\\n    /// @notice De facto constructor for clone contracts\\n    function init(bytes calldata data) external payable override {\\n        require(address(collateral) == address(0), \\\"NFTPair: already initialized\\\");\\n        (collateral, asset) = abi.decode(data, (IERC721, IERC20));\\n        require(address(collateral) != address(0), \\\"NFTPair: bad pair\\\");\\n    }\\n\\n    /// @param tokenId The token ID of the loan in question\\n    /// @param params The desired new loan parameters\\n    function updateLoanParams(uint256 tokenId, TokenLoanParams memory params) external {\\n        TokenLoan memory loan = tokenLoan[tokenId];\\n        if (loan.status == LOAN_OUTSTANDING) {\\n            // The lender can change terms so long as the changes are strictly\\n            // the same or better for the borrower:\\n            require(msg.sender == loan.lender, \\\"NFTPair: not the lender\\\");\\n            TokenLoanParams memory cur = tokenLoanParams[tokenId];\\n            require(\\n                params.duration >= cur.duration && params.valuation <= cur.valuation && params.annualInterestBPS <= cur.annualInterestBPS,\\n                \\\"NFTPair: worse params\\\"\\n            );\\n        } else if (loan.status == LOAN_REQUESTED) {\\n            // The borrower has already deposited the collateral and can\\n            // change whatever they like\\n            require(msg.sender == loan.borrower, \\\"NFTPair: not the borrower\\\");\\n        } else {\\n            // The loan has not been taken out yet; the borrower needs to\\n            // provide collateral.\\n            revert(\\\"NFTPair: no collateral\\\");\\n        }\\n        tokenLoanParams[tokenId] = params;\\n        emit LogUpdateLoanParams(tokenId, params);\\n    }\\n\\n    /// @notice It is the caller's responsibility to ensure skimmed tokens get accounted for somehow so they cannot be used twice.\\n    /// @notice It is the caller's responsibility to ensure `provider` consented to the specific transfer. (EIR-721 approval is not good enough).\\n    function _requireCollateral(\\n        address provider,\\n        uint256 tokenId,\\n        bool skim\\n    ) private {\\n        if (skim) {\\n            require(collateral.ownerOf(tokenId) == address(this), \\\"NFTPair: skim failed\\\");\\n        } else {\\n            collateral.transferFrom(provider, address(this), tokenId);\\n        }\\n    }\\n\\n    /// @notice Deposit an NFT as collateral and request a loan against it\\n    /// @param tokenId ID of the NFT\\n    /// @param to Address to receive the loan, or option to withdraw collateral\\n    /// @param params Loan conditions on offer\\n    /// @param skim True if the token has already been transferred\\n    function requestLoan(\\n        uint256 tokenId,\\n        TokenLoanParams memory params,\\n        address to,\\n        bool skim\\n    ) public {\\n        // Edge case: valuation can be zero. That effectively gifts the NFT and\\n        // is therefore a bad idea, but does not break the contract.\\n        TokenLoan memory loan = tokenLoan[tokenId];\\n        require(loan.status == LOAN_INITIAL, \\\"NFTPair: loan exists\\\");\\n\\n        loan.borrower = to;\\n        loan.status = LOAN_REQUESTED;\\n        tokenLoan[tokenId] = loan;\\n        tokenLoanParams[tokenId] = params;\\n\\n        emit LogRequestLoan(to, tokenId, params);\\n        // Skimming is safe:\\n        // - This method both requires loan state to be LOAN_INITIAL and sets\\n        //   it to something else. Every other use of _requireCollateral must\\n        //   uphold this same requirement; see to it.\\n        _requireCollateral(msg.sender, tokenId, skim);\\n    }\\n\\n    /// @dev Assumes all checks have been done\\n    function _finalizeLoan(uint256 tokenId, address collateralTo) private {\\n        delete tokenLoan[tokenId];\\n        delete tokenLoanParams[tokenId];\\n        collateral.transferFrom(address(this), collateralTo, tokenId);\\n    }\\n\\n    /// @notice Removes `tokenId` as collateral and transfers it to `to`.\\n    /// @notice This destroys the loan.\\n    /// @param tokenId The token\\n    /// @param to The receiver of the token.\\n    function removeCollateral(uint256 tokenId, address to) public {\\n        TokenLoan memory loan = tokenLoan[tokenId];\\n        if (loan.status == LOAN_REQUESTED) {\\n            // We are withdrawing collateral that is not in use:\\n            require(msg.sender == loan.borrower, \\\"NFTPair: not the borrower\\\");\\n        } else if (loan.status == LOAN_OUTSTANDING) {\\n            // We are seizing collateral as the lender. The loan has to be\\n            // expired and not paid off:\\n            require(to == loan.lender || msg.sender == loan.lender, \\\"NFTPair: not the lender\\\");\\n            require(\\n                // Addition is safe: both summands are smaller than 256 bits\\n                uint256(loan.startTime) + tokenLoanParams[tokenId].duration < block.timestamp,\\n                \\\"NFTPair: not expired\\\"\\n            );\\n        }\\n        // If there somehow is collateral but no accompanying loan, then anyone\\n        // can claim it by first requesting a loan with `skim` set to true, and\\n        // then withdrawing. So we might as well allow it here..\\n        _finalizeLoan(tokenId, to);\\n        emit LogRemoveCollateral(tokenId, to);\\n    }\\n\\n    ///@notice Assumes the lender has agreed to the loan.\\n    ///@param borrower Receives the option to repay and get the collateral back\\n    ///@param initialRecipient Receives the initial funds\\n    function _lend(\\n        address lender,\\n        address borrower,\\n        address initialRecipient,\\n        uint256 tokenId,\\n        TokenLoanParams memory params,\\n        bool skim\\n    ) internal returns (uint256 borrowerShare) {\\n        uint256 totalShare = bentoBox.toShare(asset, params.valuation, false);\\n        // No overflow: at most 128 + 16 bits (fits in BentoBox)\\n        uint256 openFeeShare = (totalShare * OPEN_FEE_BPS) / BPS;\\n        uint256 protocolFeeShare = (openFeeShare * PROTOCOL_FEE_BPS) / BPS;\\n\\n        if (skim) {\\n            require(\\n                bentoBox.balanceOf(asset, address(this)) >= (totalShare - openFeeShare + protocolFeeShare + feesEarnedShare),\\n                \\\"NFTPair: skim too much\\\"\\n            );\\n        } else {\\n            bentoBox.transfer(asset, lender, address(this), totalShare - openFeeShare + protocolFeeShare);\\n        }\\n        // No underflow: follows from OPEN_FEE_BPS <= BPS\\n        borrowerShare = totalShare - openFeeShare;\\n        bentoBox.transfer(asset, address(this), initialRecipient, borrowerShare);\\n        // No overflow: addends (and result) must fit in BentoBox\\n        feesEarnedShare += protocolFeeShare;\\n\\n        TokenLoan memory loan;\\n        loan.lender = lender;\\n        loan.borrower = borrower;\\n        loan.status = LOAN_OUTSTANDING;\\n        loan.startTime = uint64(block.timestamp); // Do not use in 12e10 years..\\n        tokenLoan[tokenId] = loan;\\n\\n        emit LogLend(lender, borrower, tokenId, params);\\n    }\\n\\n    /// @notice Lends with the parameters specified by the borrower.\\n    /// @param tokenId ID of the token that will function as collateral\\n    /// @param accepted Loan parameters as the lender saw them, for security\\n    /// @param skim True if the funds have been Bento-transferred to the contract\\n    function lend(\\n        uint256 tokenId,\\n        TokenLoanParams memory accepted,\\n        bool skim\\n    ) public {\\n        TokenLoan memory loan = tokenLoan[tokenId];\\n        require(loan.status == LOAN_REQUESTED, \\\"NFTPair: not available\\\");\\n        TokenLoanParams memory requested = tokenLoanParams[tokenId];\\n\\n        // Valuation has to be an exact match, everything else must be at least\\n        // as good for the lender as `accepted`.\\n        require(\\n            requested.valuation == accepted.valuation &&\\n                requested.duration <= accepted.duration &&\\n                requested.annualInterestBPS >= accepted.annualInterestBPS,\\n            \\\"NFTPair: bad params\\\"\\n        );\\n        _lend(msg.sender, loan.borrower, loan.borrower, tokenId, requested, skim);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparator();\\n    }\\n\\n    // NOTE on signature hashes: the domain separator only guarantees that the\\n    // chain ID and master contract are a match, so we explicitly include the\\n    // clone address\\n\\n    // keccak256(\\\"Lend(address contract,uint256 tokenId,bool anyTokenId,uint128 valuation,uint64 duration,uint16 annualInterestBPS,uint256 batchId,uint256 deadline)\\\")\\n    bytes32 private constant LEND_SIGNATURE_HASH = 0x51bdf8c1d18fdb31c98b3fa9c0eafb21834eebc55f0e77bd59fa99bc434ddf92;\\n\\n    // keccak256(\\\"Borrow(address contract,uint256 tokenId,uint128 valuation,uint64 duration,uint16 annualInterestBPS,uint256 batchId,uint256 deadline)\\\")\\n    bytes32 private constant BORROW_SIGNATURE_HASH = 0x31609c8787e5709f4c4e0d7c6f3239ad028b96968335012bb862a64361421ef9;\\n\\n    /// @notice Request and immediately borrow from a pre-committed lender\\n\\n    /// @notice Caller provides collateral; loan can go to a different address.\\n    /// @param tokenId ID of the token that will function as collateral\\n    /// @param lender Lender, whose BentoBox balance the funds will come from\\n    /// @param borrower Receives the funds and the option to repay\\n    /// @param params Loan parameters requested, and signed by the lender\\n    /// @param skimCollateral True if the collateral has already been transferred\\n    /// @param anyTokenId Set if lender agreed to any token. Must have tokenId 0 in signature.\\n    /// @param signature (deadline, v, r, s) of signature. (See docs)\\n    function requestAndBorrow(\\n        uint256 tokenId,\\n        address lender,\\n        address borrower,\\n        TokenLoanParams memory params,\\n        bool skimCollateral,\\n        bool anyTokenId,\\n        SignatureParams memory signature\\n    ) public {\\n        _requireSignedLendParams(lender, tokenId, params, anyTokenId, signature);\\n        _lend(lender, borrower, borrower, tokenId, params, false);\\n        // Skimming is safe:\\n        // - This method both requires loan state to be LOAN_INITIAL and sets\\n        //   it to something else. Every other use of _requireCollateral must\\n        //   uphold this same requirement; see to it.\\n        //   (The check is in `_requireSignedLendParams()`)\\n        _requireCollateral(msg.sender, tokenId, skimCollateral);\\n    }\\n\\n    /// @notice Request and immediately borrow from a pre-committed lender, while buying the collateral in the same transaction.\\n    /// @notice Caller provides extra funds if needed; loan can go to a different address.\\n    /// @param tokenId ID of the token that will function as collateral\\n    /// @param lender Lender, whose BentoBox balance the funds will come from\\n    /// @param borrower Receives the funds (and excess if token is cheaper)\\n    /// @param params Loan parameters requested, and signed by the lender\\n    /// @param anyTokenId Set if lender agreed to any token. Must have tokenId 0 in signature.\\n    /// @param signature (deadline, v, r, s) of signature. (See docs)\\n    /// @param price Price of token (in wei), sent to buyer contract\\n    /// @param buyer INFTBuyer contract that will purchase the token\\n    /// @param skimShortage True if any funds needed in excess of the loan have already been Bento-transfered to the contract\\n    function flashRequestAndBorrow(\\n        uint256 tokenId,\\n        address lender,\\n        address borrower,\\n        TokenLoanParams memory params,\\n        bool anyTokenId,\\n        SignatureParams memory signature,\\n        uint256 price,\\n        INFTBuyer buyer,\\n        bool skimShortage\\n    ) external {\\n        _requireSignedLendParams(lender, tokenId, params, anyTokenId, signature);\\n        // Round up: this is how many Bento-shares it will take to withdraw\\n        // `price` tokens\\n        uint256 priceShare = bentoBox.toShare(asset, price, true);\\n        // Bento-shares received by taking out the loan. They are sent to the\\n        // buyer contract for skimming.\\n        // TODO: Allow Bento-withdrawing instead?\\n        uint256 borrowerShare = _lend(lender, borrower, address(this), tokenId, params, false);\\n        // At this point the contract has `borrowerShare` extra shares. If this\\n        // is too much, then the borrower gets the excess. If this is not\\n        // enough, we either take the rest from msg.sender, or have the amount\\n        // skimmed.\\n        if (borrowerShare > priceShare) {\\n            bentoBox.transfer(asset, address(this), borrower, borrowerShare - priceShare);\\n        } else if (borrowerShare < priceShare) {\\n            if (skimShortage) {\\n                // We have `borrowerShare`, but need `priceShare`:\\n                require(bentoBox.balanceOf(asset, address(this)) >= (priceShare + feesEarnedShare), \\\"NFTPair: skim too much\\\");\\n            } else {\\n                // We need the difference:\\n                bentoBox.transfer(asset, msg.sender, address(this), priceShare - borrowerShare);\\n            }\\n        }\\n        // The share amount taken will be exactly `priceShare`, and the token\\n        // amount will be exactly `price`. If we passed `priceShare` instead,\\n        // the token amount given could be different.\\n        bentoBox.withdraw(asset, address(this), address(buyer), price, 0);\\n\\n        // External call is safe: At this point, the state of the contract is\\n        // unusual only in that it has issued a loan against the token that has\\n        // not been delivered yet. Any interaction that does not involve this\\n        // loan/token is no different from outside this call. Taking out a new\\n        // loan is not possible. Repaying the loan is, but requires that:\\n        // a) the buyer either is, or has the token sent to, the borrower;\\n        // b) the token is sent to the contract first -- `_repayBefore()` will\\n        //    try to transfer it away.\\n        // By (b) in particular, the buyer contract cannot exploit this\\n        // situation.\\n        buyer.buy(asset, price, collateral, tokenId, address(this));\\n        require(collateral.ownerOf(tokenId) == address(this), \\\"NFTPair: buyer failed\\\");\\n    }\\n\\n    function _requireSignedLendParams(\\n        address lender,\\n        uint256 tokenId,\\n        TokenLoanParams memory params,\\n        bool anyTokenId,\\n        SignatureParams memory signature\\n    ) private {\\n        if (signature.v == 0 && signature.r == bytes32(0) && signature.s == bytes32(0)) {\\n            require(\\n                ILendingClub(lender).willLend(\\n                    tokenId,\\n                    params.valuation,\\n                    params.duration,\\n                    params.annualInterestBPS,\\n                    // Oracle-specific values, not relevant here:\\n                    0,\\n                    INFTOracle(address(0))\\n                ),\\n                \\\"NFTPair: LendingClub refused\\\"\\n            );\\n        } else {\\n            require(block.timestamp <= signature.deadline, \\\"NFTPair: signature expired\\\");\\n            uint256 batchId = currentBatchIds[lender];\\n            bytes32 dataHash = keccak256(\\n                abi.encode(\\n                    LEND_SIGNATURE_HASH,\\n                    address(this),\\n                    anyTokenId ? 0 : tokenId,\\n                    anyTokenId,\\n                    params.valuation,\\n                    params.duration,\\n                    params.annualInterestBPS,\\n                    batchId,\\n                    signature.deadline\\n                )\\n            );\\n            require(ecrecover(_getDigest(dataHash), signature.v, signature.r, signature.s) == lender, \\\"NFTPair: signature invalid\\\");\\n        }\\n\\n        require(tokenLoan[tokenId].status == LOAN_INITIAL, \\\"NFTPair: loan exists\\\");\\n        tokenLoanParams[tokenId] = params;\\n    }\\n\\n    function _requireSignedBorrowParams(\\n        address borrower,\\n        uint256 tokenId,\\n        TokenLoanParams memory params,\\n        SignatureParams memory signature\\n    ) private {\\n        require(block.timestamp <= signature.deadline, \\\"NFTPair: signature expired\\\");\\n        uint256 batchId = currentBatchIds[borrower];\\n        bytes32 dataHash = keccak256(\\n            abi.encode(\\n                BORROW_SIGNATURE_HASH,\\n                address(this),\\n                tokenId,\\n                params.valuation,\\n                params.duration,\\n                params.annualInterestBPS,\\n                batchId,\\n                signature.deadline\\n            )\\n        );\\n        require(ecrecover(_getDigest(dataHash), signature.v, signature.r, signature.s) == borrower, \\\"NFTPair: signature invalid\\\");\\n        require(tokenLoan[tokenId].status == LOAN_INITIAL, \\\"NFTPair: loan exists\\\");\\n        tokenLoanParams[tokenId] = params;\\n    }\\n\\n    /// @notice Take collateral from a pre-commited borrower and lend against it\\n    /// @notice Collateral must come from the borrower, not a third party.\\n    /// @param tokenId ID of the token that will function as collateral\\n    /// @param borrower Address that provides collateral and receives the loan\\n    /// @param params Loan terms offered, and signed by the borrower\\n    /// @param skimFunds True if the funds have been Bento-transferred to the contract\\n    /// @param signature (deadline, v, r, s) of signature. (See docs)\\n    function takeCollateralAndLend(\\n        uint256 tokenId,\\n        address borrower,\\n        TokenLoanParams memory params,\\n        bool skimFunds,\\n        SignatureParams memory signature\\n    ) public {\\n        _requireSignedBorrowParams(borrower, tokenId, params, signature);\\n        _lend(msg.sender, borrower, borrower, tokenId, params, skimFunds);\\n        // Skimming is safe:\\n        // - This method both requires loan state to be LOAN_INITIAL and sets\\n        //   it to something else. Every other use of _requireCollateral must\\n        //   uphold this same requirement; see to it.\\n        //   (The check is in `_requireSignedBorrowParams()`)\\n        // Taking collateral from someone other than msg.sender is safe: the\\n        // borrower signed a message giving permission.\\n        _requireCollateral(borrower, tokenId, false);\\n    }\\n\\n    // Invalidates all outstanding signatures for msg.sender\\n    function incrementBatchId() external {\\n        currentBatchIds[msg.sender] += 1;\\n    }\\n\\n    // Approximates continuous compounding. Uses Horner's method to evaluate\\n    // the truncated Maclaurin series for exp - 1, accumulating rounding\\n    // errors along the way. The following is always guaranteed:\\n    //\\n    //   principal * time * apr <= result <= principal * (e^(time * apr) - 1),\\n    //\\n    // where time = t/YEAR, up to at most the rounding error obtained in\\n    // calculating linear interest.\\n    //\\n    // If the theoretical result that we are approximating (the rightmost part\\n    // of the above inquality) fits in 128 bits, then the function is\\n    // guaranteed not to revert (unless n > 250, which is way too high).\\n    // If even the linear interest (leftmost part of the inequality) does not\\n    // the function will revert.\\n    // Otherwise, the function may revert, return a reasonable result, or\\n    // return a very inaccurate result. Even then the above inequality is\\n    // respected.\\n    /// @param principal Amount owed in wei\\n    /// @param t Duration in seconds\\n    /// @param aprBPS Annual rate in basis points (1/10_000)\\n    function calculateInterest(\\n        uint256 principal,\\n        uint64 t,\\n        uint16 aprBPS\\n    ) public pure returns (uint256 interest) {\\n        // (NOTE: n is hardcoded as COMPOUND_INTEREST_TERMS)\\n        //\\n        // We calculate\\n        //\\n        //  ----- n                                       ----- n\\n        //   \\\\           principal * (t * aprBPS)^k        \\\\\\n        //    )          --------------------------   =:    )          term_k\\n        //   /                k! * YEAR_BPS^k              /\\n        //  ----- k = 1                                   ----- k = 1\\n        //\\n        // which approaches, but never exceeds the \\\"theoretical\\\" result,\\n        //\\n        //          M := principal * [ exp (t * aprBPS / YEAR_BPS) - 1 ]\\n        //\\n        // as n goes to infinity. We use the fact that\\n        //\\n        //               principal * (t * aprBPS)^(k-1) * (t * aprBPS)\\n        //      term_k = ---------------------------------------------\\n        //                  (k-1)! * k * YEAR_BPS^(k-1) * YEAR_BPS\\n        //\\n        //                             t * aprBPS\\n        //             = term_{k-1} * ------------                          (*)\\n        //                            k * YEAR_BPS\\n        //\\n        // to calculate the terms one by one. The principal affords us the\\n        // precision to carry out the division without resorting to fixed-point\\n        // math. Any rounding error is downward, which we consider acceptable.\\n        //\\n        // Since all numbers involved are positive, each term is certainly\\n        // bounded above by M. From (*) we see that any intermediate results\\n        // are at most\\n        //\\n        //                      denom_k := k * YEAR_BPS.\\n        //\\n        // times M. Since YEAR_BPS fits in 38 bits, denom_k fits in 46 bits,\\n        // which proves that all calculations will certainly not overflow if M\\n        // fits in 128 bits.\\n        //\\n        // If M does not fit, then the intermediate results for some term may\\n        // eventually overflow, but this cannot happen at the first term, and\\n        // neither can the total overflow because it uses checked math.\\n        //\\n        // This constitutes a guarantee of specified behavior when M >= 2^128.\\n        uint256 x = uint256(t) * aprBPS;\\n        uint256 term_k = (principal * x) / YEAR_BPS;\\n        uint256 denom_k = YEAR_BPS;\\n\\n        interest = term_k;\\n        for (uint256 k = 2; k <= COMPOUND_INTEREST_TERMS; k++) {\\n            denom_k += YEAR_BPS;\\n            term_k = (term_k * x) / denom_k;\\n            interest = interest.add(term_k); // <- Only overflow check we need\\n        }\\n\\n        if (interest >= 2**128) {\\n            revert(\\\"NFTPair: Interest unpayable\\\");\\n        }\\n    }\\n\\n    function _repayBefore(\\n        uint256 tokenId,\\n        uint256 principal,\\n        address to,\\n        bool skim\\n    )\\n        private\\n        returns (\\n            uint256 totalShare,\\n            uint256 totalAmount,\\n            uint256 feeShare,\\n            address lender\\n        )\\n    {\\n        TokenLoan memory loan = tokenLoan[tokenId];\\n        require(loan.status == LOAN_OUTSTANDING, \\\"NFTPair: no loan\\\");\\n        require(msg.sender == loan.borrower || to == loan.borrower, \\\"NFTPair: not borrower\\\");\\n\\n        TokenLoanParams memory loanParams = tokenLoanParams[tokenId];\\n        require(\\n            // Addition is safe: both summands are smaller than 256 bits\\n            uint256(loan.startTime) + loanParams.duration >= block.timestamp,\\n            \\\"NFTPair: loan expired\\\"\\n        );\\n\\n        if (principal == 0 || principal >= loanParams.valuation) {\\n            principal = loanParams.valuation;\\n            // Not following checks-effects-interaction: we are already not\\n            // doing that by splitting `repay()` like this; we'll have to trust\\n            // the collateral contract if we are to support flash repayments.\\n            _finalizeLoan(tokenId, to);\\n            emit LogRepay(skim ? address(this) : msg.sender, tokenId);\\n        } else {\\n            // Math and cast are safe: 0 < principal < loanParams.valuation\\n            loanParams.valuation = uint128(loanParams.valuation - principal);\\n            tokenLoanParams[tokenId] = loanParams;\\n            emit LogUpdateLoanParams(tokenId, loanParams);\\n        }\\n\\n        // No underflow: loan.startTime is only ever set to a block timestamp\\n        // Cast is safe (principal): is LTE loan.valuation\\n        // Cast is safe: if this overflows, then all loans have expired anyway\\n        uint256 interest = calculateInterest(uint128(principal), uint64(block.timestamp - loan.startTime), loanParams.annualInterestBPS);\\n        // No overflow: multiplicands fit in 128 and 16 bits\\n        uint256 fee = (interest * PROTOCOL_FEE_BPS) / BPS;\\n        // No overflon: both terms are 128 bits\\n        totalAmount = principal + interest;\\n\\n        Rebase memory bentoBoxTotals = bentoBox.totals(asset);\\n\\n        totalShare = bentoBoxTotals.toBase(totalAmount, true);\\n        feeShare = bentoBoxTotals.toBase(fee, false);\\n        lender = loan.lender;\\n    }\\n\\n    function _repayAfter(\\n        address lender,\\n        uint256 totalShare,\\n        uint256 feeShare,\\n        bool skim\\n    ) private {\\n        // No overflow: `totalShare - feeShare` is 90% of `totalShare`, and\\n        // if that exceeds 128 bits the BentoBox transfer will revert. It\\n        // follows that `totalShare` fits in 129 bits, and `feesEarnedShare`\\n        // fits in 128 as it represents a BentoBox balance.\\n        // Skimming is safe: the amount gets transferred to the lender later,\\n        // and therefore cannot be skimmed twice.\\n        IERC20 asset_ = asset;\\n        if (skim) {\\n            require(bentoBox.balanceOf(asset_, address(this)) >= (totalShare + feesEarnedShare), \\\"NFTPair: skim too much\\\");\\n        } else {\\n            bentoBox.transfer(asset_, msg.sender, address(this), totalShare);\\n        }\\n        // No overflow: result fits in BentoBox\\n        feesEarnedShare += feeShare;\\n        // No underflow: `feeShare` is 10% of part of `totalShare`\\n        bentoBox.transfer(asset_, address(this), lender, totalShare - feeShare);\\n    }\\n\\n    /// @notice Repay a loan in part or in full\\n    /// @param tokenId Token ID of the loan in question.\\n    /// @param principal How much of the principal to repay. Saturates at the full loan value. Zero also taken to mean 100%.\\n    /// @param to Recipient of the returned collateral. Can be anyone if msg.sender is the borrower, otherwise the borrower.\\n    /// @param skim True if the funds have already been Bento-transfered to the contract. Take care to send enough; interest accumulates by the second.\\n    function repay(\\n        uint256 tokenId,\\n        uint256 principal,\\n        address to,\\n        bool skim\\n    ) external {\\n        (uint256 totalShare, , uint256 feeShare, address lender) = _repayBefore(tokenId, principal, to, skim);\\n        _repayAfter(lender, totalShare, feeShare, skim);\\n    }\\n\\n    /// @notice Repay a loan in full, by selling the token in the same transaction. Must be the borrower.\\n    /// @param tokenId Token ID of the loan in question.\\n    /// @param price Sale price of the token, in wei\\n    /// @param seller INFTSeller contract that will perform the sale\\n    /// @param excessRecipient Receives any funds left over after repaying, if any\\n    /// @param skimShortage True if any extra funds required have already been Bento-transfered to the contract. Take care to send enough; interest accumulates by the second.\\n    function flashRepay(\\n        uint256 tokenId,\\n        uint256 price,\\n        INFTSeller seller,\\n        address excessRecipient,\\n        bool skimShortage\\n    ) external {\\n        (uint256 totalShare, , uint256 feeShare, address lender) = _repayBefore(tokenId, 0, address(seller), false);\\n\\n        // External call is safe: At this point the loan is already gone, the\\n        // seller has the token, and an amount must be paid via skimming or the\\n        // entire transaction reverts.\\n        // Other than being owed the money, the contract is in a valid state,\\n        // and once payment is received it is \\\"accounted for\\\" by being sent\\n        // away (in `_repayAfter()`), so that it cannot be reused for skimming.\\n        // Relying on return value is safe: if the amount reported is too high,\\n        // then either `_repayAfter()` will fail, or the funds were sitting in\\n        // the contract's BentoBox balance unaccounted for, and could be freely\\n        // skimmed for another purpose anyway.\\n        IERC20 asset_ = asset;\\n        uint256 priceShare = seller.sell(collateral, tokenId, asset_, price, address(this));\\n        if (priceShare < totalShare) {\\n            // No overflow: `totalShare` fits or `_repayAfter()` reverts. See\\n            // comments there for proof.\\n            // If we are skimming, then we defer the check to `_repayAfter()`,\\n            // which checks that the full amount (`totalShare`) has been sent.\\n            if (!skimShortage) {\\n                bentoBox.transfer(asset_, msg.sender, address(this), totalShare - priceShare);\\n            }\\n        } else if (priceShare > totalShare) {\\n            bentoBox.transfer(asset_, address(this), excessRecipient, priceShare - totalShare);\\n        }\\n        _repayAfter(lender, totalShare, feeShare, true);\\n    }\\n\\n    /// @notice Withdraws the fees accumulated.\\n    function withdrawFees() public {\\n        address to = masterContract.feeTo();\\n\\n        uint256 _share = feesEarnedShare;\\n        if (_share > 0) {\\n            bentoBox.transfer(asset, address(this), to, _share);\\n            feesEarnedShare = 0;\\n        }\\n\\n        emit LogWithdrawFees(to, _share);\\n    }\\n\\n    /// @notice Sets the beneficiary of fees accrued in liquidations.\\n    /// MasterContract Only Admin function.\\n    /// @param newFeeTo The address of the receiver.\\n    function setFeeTo(address newFeeTo) public onlyOwner {\\n        feeTo = newFeeTo;\\n        emit LogFeeTo(newFeeTo);\\n    }\\n\\n    //// Cook actions\\n\\n    // Information only\\n    uint8 internal constant ACTION_GET_AMOUNT_DUE = 1;\\n    uint8 internal constant ACTION_GET_SHARES_DUE = 2;\\n\\n    // End up owing collateral\\n    uint8 internal constant ACTION_REPAY = 3;\\n    uint8 internal constant ACTION_REMOVE_COLLATERAL = 4;\\n\\n    uint8 internal constant ACTION_REQUEST_LOAN = 12;\\n    uint8 internal constant ACTION_LEND = 13;\\n\\n    // Function on BentoBox\\n    uint8 internal constant ACTION_BENTO_DEPOSIT = 20;\\n    uint8 internal constant ACTION_BENTO_WITHDRAW = 21;\\n    uint8 internal constant ACTION_BENTO_TRANSFER = 22;\\n    uint8 internal constant ACTION_BENTO_TRANSFER_MULTIPLE = 23;\\n    uint8 internal constant ACTION_BENTO_SETAPPROVAL = 24;\\n\\n    // Any external call (except to BentoBox)\\n    uint8 internal constant ACTION_CALL = 30;\\n\\n    // Signed requests\\n    uint8 internal constant ACTION_REQUEST_AND_BORROW = 40;\\n    uint8 internal constant ACTION_TAKE_COLLATERAL_AND_LEND = 41;\\n\\n    int256 internal constant USE_VALUE1 = -1;\\n    int256 internal constant USE_VALUE2 = -2;\\n\\n    /// @dev Helper function for choosing the correct value (`value1` or `value2`) depending on `inNum`.\\n    function _num(\\n        int256 inNum,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal pure returns (uint256 outNum) {\\n        outNum = inNum >= 0 ? uint256(inNum) : (inNum == USE_VALUE1 ? value1 : value2);\\n    }\\n\\n    /// @dev Helper function for depositing into `bentoBox`.\\n    function _bentoDeposit(\\n        bytes memory data,\\n        uint256 value,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (uint256, uint256) {\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\n        amount = int256(_num(amount, value1, value2)); // Done this way to avoid stack too deep errors\\n        share = int256(_num(share, value1, value2));\\n        return bentoBox.deposit{value: value}(token, msg.sender, to, uint256(amount), uint256(share));\\n    }\\n\\n    /// @dev Helper function to withdraw from the `bentoBox`.\\n    function _bentoWithdraw(\\n        bytes memory data,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (uint256, uint256) {\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\n        return bentoBox.withdraw(token, msg.sender, to, _num(amount, value1, value2), _num(share, value1, value2));\\n    }\\n\\n    /// @dev Helper function to perform a contract call and eventually extracting revert messages on failure.\\n    /// Calls to `bentoBox` or `collateral` are not allowed for security reasons.\\n    /// This also means that calls made from this contract shall *not* be trusted.\\n    function _call(\\n        uint256 value,\\n        bytes memory data,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (bytes memory, uint8) {\\n        (address callee, bytes memory callData, bool useValue1, bool useValue2, uint8 returnValues) = abi.decode(\\n            data,\\n            (address, bytes, bool, bool, uint8)\\n        );\\n\\n        if (useValue1 && !useValue2) {\\n            callData = abi.encodePacked(callData, value1);\\n        } else if (!useValue1 && useValue2) {\\n            callData = abi.encodePacked(callData, value2);\\n        } else if (useValue1 && useValue2) {\\n            callData = abi.encodePacked(callData, value1, value2);\\n        }\\n\\n        require(callee != address(bentoBox) && callee != address(collateral) && callee != address(this), \\\"NFTPair: can't call\\\");\\n\\n        (bool success, bytes memory returnData) = callee.call{value: value}(callData);\\n        require(success, \\\"NFTPair: call failed\\\");\\n        return (returnData, returnValues);\\n    }\\n\\n    // (For the cook action)\\n    function _getAmountDue(uint256 tokenId) private view returns (uint256) {\\n        TokenLoanParams memory params = tokenLoanParams[tokenId];\\n        // No underflow: startTime is always set to some block timestamp\\n        uint256 principal = params.valuation;\\n        uint256 interest = calculateInterest(principal, uint64(block.timestamp - tokenLoan[tokenId].startTime), params.annualInterestBPS);\\n        // No overflow: both terms are 128 bits\\n        return principal + interest;\\n    }\\n\\n    function _cook(\\n        uint8[] calldata actions,\\n        uint256[] calldata values,\\n        bytes[] calldata datas,\\n        uint256 i,\\n        uint256[2] memory result\\n    ) private {\\n        for (; i < actions.length; i++) {\\n            uint8 action = actions[i];\\n            if (action == ACTION_GET_AMOUNT_DUE) {\\n                uint256 tokenId = abi.decode(datas[i], (uint256));\\n                result[0] = _getAmountDue(tokenId);\\n            } else if (action == ACTION_GET_SHARES_DUE) {\\n                uint256 tokenId = abi.decode(datas[i], (uint256));\\n                result[1] = _getAmountDue(tokenId);\\n                result[0] = bentoBox.toShare(asset, result[1], true);\\n            } else if (action == ACTION_REPAY) {\\n                uint256 tokenId;\\n                uint256 totalShare;\\n                uint256 feeShare;\\n                uint256 principal;\\n                address lender;\\n                bool skim;\\n                {\\n                    address to;\\n                    // No skimming, but it can sill be done\\n                    (tokenId, principal, to, skim) = abi.decode(datas[i], (uint256, uint256, address, bool));\\n                    (totalShare, result[1], feeShare, lender) = _repayBefore(tokenId, principal, to, skim);\\n                    // Delaying asset collection until after the rest of the\\n                    // cook is safe: after checking..  - `feesEarnedShare` is\\n                    // updated after the check - The rest (`totalShare -\\n                    // feeShare`) is transferred away It is therefore not\\n                    // possible to skim the same amount twice.\\n                    // (Reusing `i` slot for stack depth reasons)\\n                }\\n                result[0] = totalShare;\\n                _cook(actions, values, datas, ++i, result);\\n                _repayAfter(lender, totalShare, feeShare, skim);\\n                return;\\n            } else if (action == ACTION_REMOVE_COLLATERAL) {\\n                (uint256 tokenId, address to) = abi.decode(datas[i], (uint256, address));\\n                removeCollateral(tokenId, to);\\n            } else if (action == ACTION_REQUEST_LOAN) {\\n                (uint256 tokenId, TokenLoanParams memory params, address to, bool skim) = abi.decode(\\n                    datas[i],\\n                    (uint256, TokenLoanParams, address, bool)\\n                );\\n                requestLoan(tokenId, params, to, skim);\\n            } else if (action == ACTION_LEND) {\\n                (uint256 tokenId, TokenLoanParams memory params, bool skim) = abi.decode(datas[i], (uint256, TokenLoanParams, bool));\\n                lend(tokenId, params, skim);\\n            } else if (action == ACTION_BENTO_SETAPPROVAL) {\\n                (address user, address _masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) = abi.decode(\\n                    datas[i],\\n                    (address, address, bool, uint8, bytes32, bytes32)\\n                );\\n                bentoBox.setMasterContractApproval(user, _masterContract, approved, v, r, s);\\n            } else if (action == ACTION_BENTO_DEPOSIT) {\\n                (result[0], result[1]) = _bentoDeposit(datas[i], values[i], result[0], result[1]);\\n            } else if (action == ACTION_BENTO_WITHDRAW) {\\n                (result[0], result[1]) = _bentoWithdraw(datas[i], result[0], result[1]);\\n            } else if (action == ACTION_BENTO_TRANSFER) {\\n                (IERC20 token, address to, int256 share) = abi.decode(datas[i], (IERC20, address, int256));\\n                bentoBox.transfer(token, msg.sender, to, _num(share, result[0], result[1]));\\n            } else if (action == ACTION_BENTO_TRANSFER_MULTIPLE) {\\n                (IERC20 token, address[] memory tos, uint256[] memory shares) = abi.decode(datas[i], (IERC20, address[], uint256[]));\\n                bentoBox.transferMultiple(token, msg.sender, tos, shares);\\n            } else if (action == ACTION_CALL) {\\n                (bytes memory returnData, uint8 returnValues) = _call(values[i], datas[i], result[0], result[1]);\\n\\n                if (returnValues == 1) {\\n                    (result[0]) = abi.decode(returnData, (uint256));\\n                } else if (returnValues == 2) {\\n                    (result[0], result[1]) = abi.decode(returnData, (uint256, uint256));\\n                }\\n            } else if (action == ACTION_REQUEST_AND_BORROW) {\\n                bool skimCollateral;\\n                uint256 tokenId;\\n                {\\n                    address lender;\\n                    address borrower;\\n                    TokenLoanParams memory params;\\n                    bool anyTokenId;\\n                    SignatureParams memory signature;\\n                    (tokenId, lender, borrower, params, skimCollateral, anyTokenId, signature) = abi.decode(\\n                        datas[i],\\n                        (uint256, address, address, TokenLoanParams, bool, bool, SignatureParams)\\n                    );\\n                    _requireSignedLendParams(lender, tokenId, params, anyTokenId, signature);\\n                    _lend(lender, borrower, borrower, tokenId, params, false);\\n                }\\n                _cook(actions, values, datas, ++i, result);\\n                // Skimming is safe:\\n                // - This call both requires loan state to be LOAN_INITIAL and\\n                //   sets it to something else. Every other use of\\n                //   `_requireCollateral()` must uphold that same requirement;\\n                //   see to it.\\n                // Delaying until after the rest of the cook is safe:\\n                // - If the rest of the cook _also_ takes this collateral\\n                //   somehow -- either via skimming, or via just having it\\n                //   transferred in -- then it did so by opening a loan. But\\n                //   that is only possible if this one (that we are collecting\\n                //   the collateral for) got repaid in the mean time, which is\\n                //   a silly thing to do, but otherwise legitimate and not an\\n                //   exploit.\\n                _requireCollateral(msg.sender, tokenId, skimCollateral);\\n                return;\\n            } else if (action == ACTION_TAKE_COLLATERAL_AND_LEND) {\\n                (uint256 tokenId, address borrower, TokenLoanParams memory params, bool skimFunds, SignatureParams memory signature) = abi\\n                    .decode(datas[i], (uint256, address, TokenLoanParams, bool, SignatureParams));\\n                takeCollateralAndLend(tokenId, borrower, params, skimFunds, signature);\\n            }\\n        }\\n    }\\n\\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. ETH amounts to send along with the actions.\\n    /// Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    /// @return value1 May contain the first positioned return value of the last executed action (if applicable).\\n    /// @return value2 May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\\n    function cook(\\n        uint8[] calldata actions,\\n        uint256[] calldata values,\\n        bytes[] calldata datas\\n    ) external payable returns (uint256 value1, uint256 value2) {\\n        uint256[2] memory result;\\n        _cook(actions, values, datas, 0, result);\\n        return (result[0], result[1]);\\n    }\\n}\\n\",\"keccak256\":\"0xec697e4e0d77adc87233e793faed7651e8f73f52e72b6ee58cf3def8f392f455\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBentoBoxV1Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"boring-solidity-old/contracts/ERC20.sol\\\";\\nimport \\\"boring-solidity-old/contracts/libraries/Rebase.sol\\\";\\ninterface IBentoBoxV1 {\\n    function toAmount(\\n        address _token,\\n        uint256 _share,\\n        bool _roundUp\\n    ) external view returns (uint256);\\n\\n    function withdraw(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256, uint256);\\n\\n    function deposit(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256, uint256);\\n\\n\\n    function transfer(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function deploy(\\n        address masterContract,\\n        bytes calldata data,\\n        bool useCreate2\\n    ) external payable returns (address cloneAddress);\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function totals(IERC20) external view returns (Rebase memory asset);\\n\\n    function flashLoan(\\n        address borrower,\\n        address receiver,\\n        IERC20 token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function transferMultiple(\\n        IERC20 token,\\n        address from,\\n        address[] calldata tos,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n}\\n\",\"keccak256\":\"0x9e1b5cff7fa8e7aed3385a1734a404de08b6e2810994fbe7d71b8df80bcdbda8\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from OpenZeppelin contracts v3\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6226cf17c00fb74e051c231a2a6102fe1b0eeb58091fa94a6c61e7abed65b9ab\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from OpenZeppelin contracts v3\\n\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x1bd643478eaeda73ff6d4a3c03266992bf029e85a49cb3b518edfe2a0215ddc9\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingClub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TokenLoanParamsWithOracle.sol\\\";\\nimport {INFTOracle} from \\\"./INFTOracle.sol\\\";\\ninterface ILendingClub {\\n    // Per token settings.\\n    function willLend(\\n        uint256 tokenId,\\n        uint128 valuation,\\n        uint64 duration,\\n        uint16 annualInterestBPS,\\n        uint16 ltvBPS,\\n        INFTOracle oracle\\n    )\\n        external\\n        returns (bool);\\n\\n    function lendingConditions(address nftPair, uint256 tokenId)\\n        external\\n        view\\n        returns (TokenLoanParamsWithOracle[] memory);\\n}\\n\\n\",\"keccak256\":\"0xd341f5741e200be0f8bae9eab25699ca5cf54952b0028f4ea59d97439fc2e469\",\"license\":\"MIT\"},\"contracts/interfaces/INFTBuyer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\nimport \\\"boring-solidity-old/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./IBentoBoxV1Interface.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface INFTBuyer {\\n    // Must be ERC20-skimming (not Bento).\\n    // Must revert on failure.\\n    // Transfers the NFT to `recipient`.\\n    function buy(\\n        IERC20 fromAsset,\\n        uint256 fromAmount,\\n        IERC721 toContract,\\n        uint256 toTokenId,\\n        address recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7023e82aeac1087ca707cb2010246f069c289a98c6fb7081b268c8cbc2eed83f\",\"license\":\"MIT\"},\"contracts/interfaces/INFTOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface INFTOracle {\\n    /// @notice Get the latest exchange rate.\\n    /// @param pair address of the NFTPair calling the oracle\\n    /// @param tokenId tokenId of the NFT in question\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function get(address pair, uint256 tokenId) external returns (bool success, uint256 rate);\\n\\n    /// @notice Check the last exchange rate without any state changes.\\n    /// @param pair address of the NFTPair calling the oracle\\n    /// @param tokenId tokenId of the NFT in question\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peek(address pair, uint256 tokenId) external view returns (bool success, uint256 rate);\\n\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\n    /// @param pair address of the NFTPair calling the oracle\\n    /// @param tokenId tokenId of the NFT in question\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peekSpot(address pair, uint256 tokenId) external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0xe1749500add98160db195b8e17f16ce01e0410d864173d5af9622181dc4d0aec\",\"license\":\"MIT\"},\"contracts/interfaces/INFTPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.9.0;\\n\\nimport \\\"boring-solidity-old/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"./IBentoBoxV1Interface.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./SignatureParams.sol\\\";\\nimport \\\"./TokenLoanParams.sol\\\";\\n\\ninterface INFTPair {\\n    function collateral() external view returns (IERC721);\\n\\n    function asset() external view returns (IERC20);\\n\\n    function masterContract() external view returns (address);\\n\\n    function bentoBox() external view returns (IBentoBoxV1);\\n\\n    function removeCollateral(uint256 tokenId, address to) external;\\n}\\n\",\"keccak256\":\"0x4d8da9c7f687126a2c740e7b675345f34796fc359356f5bf723d5d3e85c75037\",\"license\":\"MIT\"},\"contracts/interfaces/INFTSeller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\nimport \\\"boring-solidity-old/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./IBentoBoxV1Interface.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\ninterface INFTSeller {\\n    // Must be ERC721-skimming. Proceeds go to `recipient`'s BentoBox account\\n    // Must revert on failure.\\n    function sell(\\n        IERC721 fromContract,\\n        uint256 fromTokenId,\\n        IERC20 toAsset,\\n        uint256 toAmount,\\n        address recipient\\n    ) external returns (uint256 toShares);\\n}\\n\",\"keccak256\":\"0x48dd4a443e84f1d9318a8828ee241c96c5b462414cd3fdde5fe75f4934c3f1d7\",\"license\":\"MIT\"},\"contracts/interfaces/SignatureParams.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <0.9.0;\\n\\nstruct SignatureParams {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\n\",\"keccak256\":\"0x3315c402b373e4d876045fcb7cab6a138b025df55aa220d12cfca59af8aaa442\",\"license\":\"MIT\"},\"contracts/interfaces/TokenLoanParams.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <0.9.0;\\n\\nstruct TokenLoanParams {\\n    uint128 valuation; // How much will you get? OK to owe until expiration.\\n    uint64 duration; // Length of loan in seconds\\n    uint16 annualInterestBPS; // Variable cost of taking out the loan\\n}\\n\",\"keccak256\":\"0xed03e36ddefdac7876c88bad58f4af1229bfeae2d74e7c6b83336b595cf303e4\",\"license\":\"MIT\"},\"contracts/interfaces/TokenLoanParamsWithOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <0.9.0;\\n\\nimport \\\"./INFTOracle.sol\\\";\\n\\nstruct TokenLoanParamsWithOracle {\\n    uint128 valuation; // How much will you get? OK to owe until expiration.\\n    uint64 duration; // Length of loan in seconds\\n    uint16 annualInterestBPS; // Variable cost of taking out the loan\\n    uint16 ltvBPS; // Required to avoid liquidation\\n    INFTOracle oracle; // Oracle used for price\\n}\\n\",\"keccak256\":\"0x7025591c6417ee9ba577be34bef9b4365b853901b164db509e7a218ddc4551b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162005133380380620051338339810160408190526200003591620000fd565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a34660a08190526200008581620000a7565b608052506001600160601b0319606091821b1660c05230901b60e0526200014c565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188230604051602001620000e0939291906200012d565b604051602081830303815290604052805190602001209050919050565b6000602082840312156200010f578081fd5b81516001600160a01b038116811462000126578182fd5b9392505050565b92835260208301919091526001600160a01b0316604082015260600190565b60805160a05160c05160601c60e05160601c614f336200020060003980610bb6528061141d525080610a775280610b0b5280610c6c5280610ec35280610f105280610fd45280611078528061113d52806111c85280611cce5280611da05280611e765280611f0352806121e652806122b1528061237652806124085280612ad45280612d575280612f5252806130305280613570528061364c52806137f9525080611f7e525080611fb35250614f336000f3fe6080604052600436106101c25760003560e01c80634e71e0c8116100f7578063a05a163711610095578063e30c397811610064578063e30c3978146104a6578063e7cf3f86146104bb578063f41f5e1e146104db578063f46901ed146104fb576101c2565b8063a05a16371461043c578063cd446e221461045c578063d41ddc9614610471578063d8dfeb4514610491576101c2565b806380e00478116100d157806380e00478146103c257806388fb3a50146103e25780638bea2242146103f75780638da5cb5b14610427576101c2565b80634e71e0c814610377578063656f3d641461038c5780636b2ace87146103ad576101c2565b80632e2f190111610164578063476343ee1161013e578063476343ee1461030f5780634d8085d2146103245780634dde3bce146103445780634ddf47d414610364576101c2565b80632e2f1901146102c55780633644e515146102e557806338d52e0f146102fa576101c2565b80631329b682116101a05780631329b682146102415780631b65fe041461025657806321fa31001461027657806324ba88ec146102a5576101c2565b8063017e7e58146101c7578063078dfbe7146101f2578063114c2cda14610214575b600080fd5b3480156101d357600080fd5b506101dc61051b565b6040516101e9919061443c565b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004613ccb565b61052a565b005b34801561022057600080fd5b5061023461022f366004614373565b610619565b6040516101e991906144e2565b34801561024d57600080fd5b5061023461069e565b34801561026257600080fd5b50610212610271366004614202565b6106a4565b34801561028257600080fd5b50610296610291366004614008565b610919565b6040516101e993929190614d6f565b3480156102b157600080fd5b506102126102c03660046142d7565b610953565b3480156102d157600080fd5b506102126102e0366004614315565b610980565b3480156102f157600080fd5b50610234610b94565b34801561030657600080fd5b506101dc610ba3565b34801561031b57600080fd5b50610212610bb2565b34801561033057600080fd5b5061021261033f3660046140e6565b610d24565b34801561035057600080fd5b5061021261035f36600461413e565b610d52565b610212610372366004613dc7565b610d7a565b34801561038357600080fd5b50610212610e01565b61039f61039a366004613d15565b610e8e565b6040516101e9929190614de9565b3480156103b957600080fd5b506101dc610ec1565b3480156103ce57600080fd5b506102126103dd366004614159565b610ee5565b3480156103ee57600080fd5b5061021261139e565b34801561040357600080fd5b50610417610412366004614008565b6113b6565b6040516101e994939291906144ad565b34801561043357600080fd5b506101dc6113fa565b34801561044857600080fd5b50610234610457366004613b50565b611409565b34801561046857600080fd5b506101dc61141b565b34801561047d57600080fd5b5061021261048c366004614038565b61143f565b34801561049d57600080fd5b506101dc6115c8565b3480156104b257600080fd5b506101dc6115d7565b3480156104c757600080fd5b506102126104d636600461422e565b6115e6565b3480156104e757600080fd5b506102126104f636600461427f565b6117e0565b34801561050757600080fd5b50610212610516366004613b50565b611946565b6002546001600160a01b031681565b6000546001600160a01b0316331461055d5760405162461bcd60e51b815260040161055490614a02565b60405180910390fd5b81156105f8576001600160a01b0383161515806105775750805b6105935760405162461bcd60e51b81526004016105549061484a565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055610614565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b64496cebb80061ffff821667ffffffffffffffff84160284810282900491829060025b600681116106705764496cebb80082019150818484028161065957fe5b04925061066685846119ba565b945060010161063c565b50600160801b84106106945760405162461bcd60e51b815260040161055490614c5b565b5050509392505050565b60055481565b6106ac613942565b50600082815260076020908152604091829020825160808101845281546001600160a01b03908116825260019092015491821692810192909252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16606082018190526002141561080c5780602001516001600160a01b0316336001600160a01b03161461074d5760405162461bcd60e51b815260040161055490614c24565b610755613969565b50600083815260066020908152604091829020825160608101845290546001600160801b0381168252600160801b810467ffffffffffffffff908116838501819052600160c01b90920461ffff169483019490945291850151909216108015906107ce5750805183516001600160801b03918216911611155b80156107ea5750806040015161ffff16836040015161ffff1611155b6108065760405162461bcd60e51b815260040161055490614813565b50610862565b606081015160ff166001141561084a5780516001600160a01b031633146108455760405162461bcd60e51b815260040161055490614b11565b610862565b60405162461bcd60e51b815260040161055490614bb6565b6000838152600660209081526040918290208451815492860151868501516001600160801b03199094166001600160801b039092169190911767ffffffffffffffff60801b1916600160801b67ffffffffffffffff909216919091021761ffff60c01b1916600160c01b61ffff909316929092029190911790555183907f4806b0411d30ea0d78ca288170b72377a6442c56e923371fa99dc2b62c4a7a0c9061090c908590614d37565b60405180910390a2505050565b6006602052600090815260409020546001600160801b03811690600160801b810467ffffffffffffffff1690600160c01b900461ffff1683565b6000806000610964878787876119e3565b9350935050925061097781848487611d87565b50505050505050565b60008060006109938860008860006119e3565b935093505092506000600460009054906101000a90046001600160a01b031690506000876001600160a01b031663f9cf7c21600360009054906101000a90046001600160a01b03168c858d306040518663ffffffff1660e01b81526004016109ff95949392919061473e565b602060405180830381600087803b158015610a1957600080fd5b505af1158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a519190614020565b905084811015610aec5785610ae757604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90610ab490859033903090878c03906004016145f7565b600060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b505050505b610b7b565b84811115610b7b57604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90610b4890859030908c908b8803906004016145f7565b600060405180830381600087803b158015610b6257600080fd5b505af1158015610b76573d6000803e3d6000fd5b505050505b610b888386866001611d87565b50505050505050505050565b6000610b9e611f79565b905090565b6004546001600160a01b031681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0d57600080fd5b505afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190613b6c565b6005549091508015610cdf5760048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc93610ca793921691309188918891016145f7565b600060405180830381600087803b158015610cc157600080fd5b505af1158015610cd5573d6000803e3d6000fd5b5050600060055550505b816001600160a01b03167fbe641c3ffc44b2d6c184f023fa4ed7bda4b6ffa71e03b3c98ae0c776da1f17e782604051610d1891906144e2565b60405180910390a25050565b610d3084868584611fd9565b610d3e3385868887876121c4565b50610d4b84866000612610565b5050505050565b610d5f8688868585612723565b610d6e8686878a8860006121c4565b50610977338885612610565b6003546001600160a01b031615610da35760405162461bcd60e51b815260040161055490614b48565b610daf81830183613f8e565b600480546001600160a01b03199081166001600160a01b039384161790915560038054909116928216929092179182905516610dfd5760405162461bcd60e51b815260040161055490614b7f565b5050565b6001546001600160a01b0316338114610e2c5760405162461bcd60e51b815260040161055490614aa5565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b600080610e99613989565b610eaa8989898989896000886129f5565b805160209091015190999098509650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ef2888a888888612723565b60048054604051636d289ce560e11b81526000926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363da5139ca93610f4c93919092169189916001910161471b565b60206040518083038186803b158015610f6457600080fd5b505afa158015610f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9c9190614020565b90506000610faf8a8a308e8c60006121c4565b9050818111156110485760048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc936110119392169130918f9189890391016145f7565b600060405180830381600087803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b505050506111ad565b818110156111ad5782156111225760055460048054604051633de222bb60e21b8152928501926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f7888aec936110af939216913091016145dd565b60206040518083038186803b1580156110c757600080fd5b505afa1580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff9190614020565b101561111d5760405162461bcd60e51b815260040161055490614ada565b6111ad565b60048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc9361117a9392169133913091888a0391016145f7565b600060405180830381600087803b15801561119457600080fd5b505af11580156111a8573d6000803e3d6000fd5b505050505b6004805460405163097da6d360e41b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116936397da6d30936112069392169130918a918c9160009101614621565b6040805180830381600087803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125791906142b4565b5050836001600160a01b03166333563d1b600460009054906101000a90046001600160a01b031687600360009054906101000a90046001600160a01b03168f306040518663ffffffff1660e01b81526004016112b795949392919061473e565b600060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b50506003546040516331a9108f60e11b81523093506001600160a01b039091169150636352211e9061131b908f906004016144e2565b60206040518083038186803b15801561133357600080fd5b505afa158015611347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136b9190613b6c565b6001600160a01b0316146113915760405162461bcd60e51b8152600401610554906149cb565b5050505050505050505050565b33600090815260086020526040902080546001019055565b600760205260009081526040902080546001909101546001600160a01b0391821691811690600160a01b810467ffffffffffffffff1690600160e01b900460ff1684565b6000546001600160a01b031681565b60086020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b611447613942565b50600082815260076020908152604091829020825160808101845281546001600160a01b03908116825260019283015490811693820193909352600160a01b830467ffffffffffffffff1693810193909352600160e01b90910460ff166060830181905214156114df5780516001600160a01b031633146114da5760405162461bcd60e51b815260040161055490614b11565b61158e565b606081015160ff166002141561158e5780602001516001600160a01b0316826001600160a01b03161480611528575080602001516001600160a01b0316336001600160a01b0316145b6115445760405162461bcd60e51b815260040161055490614c24565b60008381526006602052604090819020549082015142600160801b90920467ffffffffffffffff9081169116011061158e5760405162461bcd60e51b815260040161055490614cc9565b6115988383613298565b827f279c10f9827cdddd314534dd33cb906c270c3ac21cdd72ed94a1d534aca5a25a8360405161090c919061443c565b6003546001600160a01b031681565b6001546001600160a01b031681565b6115ee613942565b50600084815260076020908152604091829020825160808101845281546001600160a01b03908116825260019092015491821692810192909252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16606082018190521561166f5760405162461bcd60e51b815260040161055490614994565b6001600160a01b038381168083526001606084018181526000898152600760209081526040808320885181546001600160a01b0319908116918a16919091178255838a0151919096018054838b01519651971691909816177fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff95861602177fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b60ff90961695909502949094179095556006855282902088518154958a01518a8501516001600160801b03199097166001600160801b039092169190911767ffffffffffffffff60801b1916600160801b91909316029190911761ffff60c01b1916600160c01b61ffff909516949094029390931790925590518691907f605ebeabc91188a43baf9442070fc0c5ccae4fedaf3e6852cf28e395c11a7672906117cd908890614d37565b60405180910390a3610d4b338684612610565b6117e8613942565b50600083815260076020908152604091829020825160808101845281546001600160a01b03908116825260019283015490811693820193909352600160a01b830467ffffffffffffffff1693810193909352600160e01b90910460ff1660608301819052146118695760405162461bcd60e51b8152600401610554906147a5565b611871613969565b50600084815260066020908152604091829020825160608101845290546001600160801b03808216808452600160801b830467ffffffffffffffff1694840194909452600160c01b90910461ffff169382019390935285519092161480156118f55750836020015167ffffffffffffffff16816020015167ffffffffffffffff1611155b80156119115750836040015161ffff16816040015161ffff1610155b61192d5760405162461bcd60e51b8152600401610554906147dc565b815161193e903390808885886121c4565b505050505050565b6000546001600160a01b031633146119705760405162461bcd60e51b815260040161055490614a02565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fcf1d3f17e521c635e0d20b8acba94ba170afc041d0546d46dafa09d3c9c19eb390600090a250565b818101818110156119dd5760405162461bcd60e51b815260040161055490614926565b92915050565b6000806000806119f1613942565b50600088815260076020908152604091829020825160808101845281546001600160a01b03908116825260019092015491821692810192909252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1660608201819052600214611a745760405162461bcd60e51b81526004016105549061476e565b80516001600160a01b0316331480611a98575080516001600160a01b038881169116145b611ab45760405162461bcd60e51b815260040161055490614a37565b611abc613969565b50600089815260066020908152604091829020825160608101845290546001600160801b0381168252600160801b810467ffffffffffffffff908116938301849052600160c01b90910461ffff16828501529284015190924291169091011015611b385760405162461bcd60e51b8152600401610554906148ef565b881580611b4f575080516001600160801b03168910155b15611bb35780516001600160801b03169850611b6b8a89613298565b8987611b775733611b79565b305b6001600160a01b03167fcd300581542c5eab58e736a0b08b42cec829c4504d1c16af90f4630b27e30de360405160405180910390a3611c71565b80516001600160801b039081168a90038116825260008b8152600660209081526040918290208451815492860151848701516001600160801b0319909416919095161767ffffffffffffffff60801b1916600160801b67ffffffffffffffff909516949094029390931761ffff60c01b1916600160c01b61ffff9092169190910217909155518a907f4806b0411d30ea0d78ca288170b72377a6442c56e923371fa99dc2b62c4a7a0c90611c68908490614d37565b60405180910390a25b6000611c9b8a6001600160801b0316846040015167ffffffffffffffff1642038460400151610619565b8a8101965090506127106103e8820204611cb36139a7565b60048054604051634ffe34db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693634ffe34db93611d03939216910161443c565b604080518083038186803b158015611d1a57600080fd5b505afa158015611d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d529190613fc6565b9050611d6081896001613370565b9850611d6e81836000613370565b9650846020015195505050505050945094509450949050565b6004546001600160a01b03168115611e5f5760055484017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7888aec83306040518363ffffffff1660e01b8152600401611dec9291906145dd565b60206040518083038186803b158015611e0457600080fd5b505afa158015611e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3c9190614020565b1015611e5a5760405162461bcd60e51b815260040161055490614ada565b611ee4565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90611eb1908490339030908a906004016145f7565b600060405180830381600087803b158015611ecb57600080fd5b505af1158015611edf573d6000803e3d6000fd5b505050505b6005805484019055604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90611f4090849030908a90898b03906004016145f7565b600060405180830381600087803b158015611f5a57600080fd5b505af1158015611f6e573d6000803e3d6000fd5b505050505050505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114611fb157611fac8161340d565b611fd3565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b8051421115611ffa5760405162461bcd60e51b815260040161055490614881565b6001600160a01b0384166000908152600860209081526040808320548551868401518784015187519451939695612061957f31609c8787e5709f4c4e0d7c6f3239ad028b96968335012bb862a64361421ef99530958d959094909390928b9290910161454a565b604051602081830303815290604052805190602001209050856001600160a01b0316600161208e83613461565b856020015186604001518760600151604051600081526020016040526040516120ba94939291906145bf565b6020604051602081039080840390855afa1580156120dc573d6000803e3d6000fd5b505050602060405103516001600160a01b03161461210c5760405162461bcd60e51b815260040161055490614d00565b600085815260076020526040902060010154600160e01b900460ff16156121455760405162461bcd60e51b815260040161055490614994565b5050506000918252600660209081526040928390208251815492840151949093015161ffff16600160c01b0261ffff60c01b1967ffffffffffffffff909516600160801b0267ffffffffffffffff60801b196001600160801b039095166001600160801b03199094169390931793909316919091179290921617905550565b600480548351604051636d289ce560e11b815260009384936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca9461222194939092169290918791016146ef565b60206040518083038186803b15801561223957600080fd5b505afa15801561224d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122719190614020565b905061271060648202819004906103e8820204841561235b5760055460048054604051633de222bb60e21b81528587038501909301926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f7888aec936122e8939216913091016145dd565b60206040518083038186803b15801561230057600080fd5b505afa158015612314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123389190614020565b10156123565760405162461bcd60e51b815260040161055490614ada565b6123e8565b60048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc936123b5939216918f913091898b03890191016145f7565b600060405180830381600087803b1580156123cf57600080fd5b505af11580156123e3573d6000803e3d6000fd5b505050505b60048054604051633c6340f360e21b815284860396506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc936124439392169130918e918b91016145f7565b600060405180830381600087803b15801561245d57600080fd5b505af1158015612471573d6000803e3d6000fd5b50506005805484019055506124869050613942565b8a81602001906001600160a01b031690816001600160a01b0316815250508981600001906001600160a01b031690816001600160a01b0316815250506002816060019060ff16908160ff168152505042816040019067ffffffffffffffff16908167ffffffffffffffff168152505080600760008a815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550606082015181600101601c6101000a81548160ff021916908360ff160217905550905050878a6001600160a01b03168c6001600160a01b03167f467ddae58c15b853f7195fb0a53262b32d8e73bd10833023764e91a5d48256ba8a6040516125fa9190614d37565b60405180910390a4505050509695505050505050565b80156126c1576003546040516331a9108f60e11b815230916001600160a01b031690636352211e906126469086906004016144e2565b60206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126969190613b6c565b6001600160a01b0316146126bc5760405162461bcd60e51b815260040161055490614bed565b610614565b6003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906126f590869030908790600401614489565b600060405180830381600087803b15801561270f57600080fd5b505af1158015610977573d6000803e3d6000fd5b602081015160ff1615801561273a57506040810151155b801561274857506060810151155b156127fd57825160208401516040808601519051632022616360e01b81526001600160a01b0389169363202261639361278a938a936000908190600401614d9e565b602060405180830381600087803b1580156127a457600080fd5b505af11580156127b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dc9190613dab565b6127f85760405162461bcd60e51b81526004016105549061495d565b61293e565b805142111561281e5760405162461bcd60e51b815260040161055490614881565b6001600160a01b038516600090815260086020526040812054907f51bdf8c1d18fdb31c98b3fa9c0eafb21834eebc55f0e77bd59fa99bc434ddf9230856128655787612868565b60005b87516020808a01516040808c01518a519151612890989796958d959094938c929091016144eb565b604051602081830303815290604052805190602001209050866001600160a01b031660016128bd83613461565b856020015186604001518760600151604051600081526020016040526040516128e994939291906145bf565b6020604051602081039080840390855afa15801561290b573d6000803e3d6000fd5b505050602060405103516001600160a01b03161461293b5760405162461bcd60e51b815260040161055490614d00565b50505b600084815260076020526040902060010154600160e01b900460ff16156129775760405162461bcd60e51b815260040161055490614994565b50506000918252600660209081526040928390208251815492840151949093015161ffff16600160c01b0261ffff60c01b1967ffffffffffffffff909516600160801b0267ffffffffffffffff60801b196001600160801b039095166001600160801b03199094169390931793909316919091179290921617905550565b8682101561328e576000888884818110612a0b57fe5b9050602002016020810190612a2091906143bb565b905060ff811660011415612a6e576000858585818110612a3c57fe5b9050602002810190612a4e9190614df7565b810190612a5b9190614008565b9050612a6681613499565b835250613282565b60ff811660021415612b60576000858585818110612a8857fe5b9050602002810190612a9a9190614df7565b810190612aa79190614008565b9050612ab281613499565b6020840181905260048054604051636d289ce560e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca94612b1094929092169290916001910161471b565b60206040518083038186803b158015612b2857600080fd5b505afa158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a669190614020565b60ff811660031415612bfd5760008060008060008060008b8b8b818110612b8357fe5b9050602002810190612b959190614df7565b810190612ba291906142d7565b9299509095509092509050612bb9878583856119e3565b60208d0192909252828c5260019c909c019b9197509095509250612be590508f8f8f8f8f8f8f8f6129f5565b612bf182868684611d87565b5050505050505061328e565b60ff811660041415612c4c57600080868686818110612c1857fe5b9050602002810190612c2a9190614df7565b810190612c379190614038565b91509150612c45828261143f565b5050613282565b60ff8116600c1415612cad576000612c62613969565b600080888888818110612c7157fe5b9050602002810190612c839190614df7565b810190612c90919061422e565b9350935093509350612ca4848484846115e6565b50505050613282565b60ff8116600d1415612d09576000612cc3613969565b6000878787818110612cd157fe5b9050602002810190612ce39190614df7565b810190612cf0919061427f565b925092509250612d018383836117e0565b505050613282565b60ff811660181415612de8576000806000806000808a8a8a818110612d2a57fe5b9050602002810190612d3c9190614df7565b810190612d499190613b88565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0a47c938787878787876040518763ffffffff1660e01b8152600401612dab96959493929190614450565b600060405180830381600087803b158015612dc557600080fd5b505af1158015612dd9573d6000803e3d6000fd5b50505050505050505050613282565b60ff811660141415612e8a57612e7e858585818110612e0357fe5b9050602002810190612e159190614df7565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150879050818110612e5857fe5b9050602002013584600060028110612e6c57fe5b6020020151856001602002015161352f565b60208401528252613282565b60ff811660151415612f0557612e7e858585818110612ea557fe5b9050602002810190612eb79190614df7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508793509150612ef39050565b60200201518460016020020151613625565b60ff811660161415612fec576000806000878787818110612f2257fe5b9050602002810190612f349190614df7565b810190612f419190613e34565b919450925090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc843385612f93868b600060200201518c60016020020151613713565b6040518563ffffffff1660e01b8152600401612fb294939291906145f7565b600060405180830381600087803b158015612fcc57600080fd5b505af1158015612fe0573d6000803e3d6000fd5b50505050505050613282565b60ff81166017141561308057600060608087878781811061300957fe5b905060200281019061301b9190614df7565b8101906130289190613ebb565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fca8843843385856040518563ffffffff1660e01b8152600401612fb29493929190614655565b60ff8116601e141561316c576060600061311289898781811061309f57fe5b905060200201358888888181106130b257fe5b90506020028101906130c49190614df7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508a935091506131009050565b6020020151876001602002015161373b565b915091508060ff166001141561313d57818060200190518101906131369190614020565b8452612c45565b8060ff1660021415612c45578180602001905181019061315d91906142b4565b60208601528452506132829050565b60ff81166028141561321957600080600080613186613969565b6000613190613942565b8b8b8b81811061319c57fe5b90506020028101906131ae9190614df7565b8101906131bb919061405c565b919c50949a50929850909650945090925090506131db8587858585612723565b6131ea858586898760006121c4565b5050505050506132068b8b8b8b8b8b8b6001019b508b8b6129f5565b613211338284612610565b50505061328e565b60ff81166029141561328257600080613230613969565b600061323a613942565b89898981811061324657fe5b90506020028101906132589190614df7565b81019061326591906140e6565b9450945094509450945061327c8585858585610d24565b50505050505b506001909101906129f5565b5050505050505050565b600082815260076020908152604080832080546001600160a01b031916815560010180547fffffff000000000000000000000000000000000000000000000000000000000016905560069091529081902080547fffffffffffff000000000000000000000000000000000000000000000000000016905560035490516323b872dd60e01b81526001600160a01b03909116906323b872dd9061334290309085908790600401614489565b600060405180830381600087803b15801561335c57600080fd5b505af115801561193e573d6000803e3d6000fd5b82516000906001600160801b0316613389575081613406565b835160208501516001600160801b03918216916133a89186911661390b565b816133af57fe5b0490508180156133f357508284602001516001600160801b03166133e986600001516001600160801b03168461390b90919063ffffffff16565b816133f057fe5b04105b15613406576134038160016119ba565b90505b9392505050565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188230604051602001613444939291906145a0565b604051602081830303815290604052805190602001209050919050565b600060405180604001604052806002815260200161190160f01b815250613486611f79565b8360405160200161344493929190614415565b60006134a3613969565b506000828152600660209081526040808320815160608101835290546001600160801b038116808352600160801b820467ffffffffffffffff90811684870152600160c01b90920461ffff16838501908152888752600790955292852060010154935191949293613523928592600160a01b909204909116420390610619565b91909101949350505050565b6000806000806000808980602001905181019061354c9190613e74565b935093509350935061355f828989613713565b915061356c818989613713565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8a86338787876040518763ffffffff1660e01b81526004016135c3959493929190614621565b60408051808303818588803b1580156135db57600080fd5b505af11580156135ef573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061361491906142b4565b955095505050505094509492505050565b600080600080600080888060200190518101906136429190613e74565b93509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d30853386613687878e8e613713565b613692878f8f613713565b6040518663ffffffff1660e01b81526004016136b2959493929190614621565b6040805180830381600087803b1580156136cb57600080fd5b505af11580156136df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370391906142b4565b9550955050505050935093915050565b60008084121561373357600019841461372c578161372e565b825b613403565b509192915050565b6060600080606060008060008980602001905181019061375b9190613bf5565b94509450945094509450828015613770575081155b1561379e5783896040516020016137889291906143f3565b60405160208183030381529060405293506137f7565b821580156137a95750815b156137c15783886040516020016137889291906143f3565b8280156137cb5750815b156137f7578389896040516020016137e593929190614415565b60405160208183030381529060405293505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03161415801561384757506003546001600160a01b03868116911614155b801561385c57506001600160a01b0385163014155b6138785760405162461bcd60e51b815260040161055490614a6e565b60006060866001600160a01b03168d8760405161389591906143d7565b60006040518083038185875af1925050503d80600081146138d2576040519150601f19603f3d011682016040523d82523d6000602084013e6138d7565b606091505b5091509150816138f95760405162461bcd60e51b8152600401610554906148b8565b9c919b50909950505050505050505050565b60008115806139265750508082028282828161392357fe5b04145b6119dd5760405162461bcd60e51b815260040161055490614c92565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b60405180604001604052806002906020820280368337509192915050565b604080518082019091526000808252602082015290565b80356119dd81614eb3565b60008083601f8401126139da578182fd5b50813567ffffffffffffffff8111156139f1578182fd5b6020830191508360208083028501011115613a0b57600080fd5b9250929050565b600082601f830112613a22578081fd5b8135613a35613a3082614e63565b614e3c565b818152915060208083019084810181840286018201871015613a5657600080fd5b60005b84811015613a7557813584529282019290820190600101613a59565b505050505092915050565b80516119dd81614ecb565b600060808284031215613a9c578081fd5b613aa66080614e3c565b9050813581526020820135613aba81614eee565b80602083015250604082013560408201526060820135606082015292915050565b600060608284031215613aec578081fd5b613af66060614e3c565b90508135613b0381614ed9565b8152602082013567ffffffffffffffff81168114613b2057600080fd5b6020820152604082013561ffff81168114613b3a57600080fd5b604082015292915050565b80516119dd81614eee565b600060208284031215613b61578081fd5b813561340681614eb3565b600060208284031215613b7d578081fd5b815161340681614eb3565b60008060008060008060c08789031215613ba0578182fd5b8635613bab81614eb3565b95506020870135613bbb81614eb3565b94506040870135613bcb81614ecb565b93506060870135613bdb81614eee565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215613c0c578283fd5b8551613c1781614eb3565b602087015190955067ffffffffffffffff80821115613c34578485fd5b818801915088601f830112613c47578485fd5b815181811115613c55578586fd5b613c68601f8201601f1916602001614e3c565b9150808252896020828501011115613c7e578586fd5b613c8f816020840160208601614e83565b509450613ca190508760408801613a80565b9250613cb08760608801613a80565b9150613cbf8760808801613b45565b90509295509295909350565b600080600060608486031215613cdf578081fd5b8335613cea81614eb3565b92506020840135613cfa81614ecb565b91506040840135613d0a81614ecb565b809150509250925092565b60008060008060008060608789031215613d2d578384fd5b863567ffffffffffffffff80821115613d44578586fd5b613d508a838b016139c9565b90985096506020890135915080821115613d68578586fd5b613d748a838b016139c9565b90965094506040890135915080821115613d8c578384fd5b50613d9989828a016139c9565b979a9699509497509295939492505050565b600060208284031215613dbc578081fd5b815161340681614ecb565b60008060208385031215613dd9578182fd5b823567ffffffffffffffff80821115613df0578384fd5b818501915085601f830112613e03578384fd5b813581811115613e11578485fd5b866020828501011115613e22578485fd5b60209290920196919550909350505050565b600080600060608486031215613e48578081fd5b8335613e5381614eb3565b92506020840135613e6381614eb3565b929592945050506040919091013590565b60008060008060808587031215613e89578182fd5b8451613e9481614eb3565b6020860151909450613ea581614eb3565b6040860151606090960151949790965092505050565b600080600060608486031215613ecf578081fd5b8335613eda81614eb3565b925060208481013567ffffffffffffffff80821115613ef7578384fd5b818701915087601f830112613f0a578384fd5b8135613f18613a3082614e63565b81815284810190848601868402860187018c1015613f34578788fd5b8795505b83861015613f5e57613f4a8c826139be565b835260019590950194918601918601613f38565b50965050506040870135925080831115613f76578384fd5b5050613f8486828701613a12565b9150509250925092565b60008060408385031215613fa0578182fd5b8235613fab81614eb3565b91506020830135613fbb81614eb3565b809150509250929050565b600060408284031215613fd7578081fd5b613fe16040614e3c565b8251613fec81614ed9565b81526020830151613ffc81614ed9565b60208201529392505050565b600060208284031215614019578081fd5b5035919050565b600060208284031215614031578081fd5b5051919050565b6000806040838503121561404a578182fd5b823591506020830135613fbb81614eb3565b6000806000806000806000610180888a031215614077578485fd5b87359650602088013561408981614eb3565b9550604088013561409981614eb3565b94506140a88960608a01613adb565b935060c08801356140b881614ecb565b925060e08801356140c881614ecb565b91506140d8896101008a01613a8b565b905092959891949750929550565b600080600080600061014086880312156140fe578283fd5b85359450602086013561411081614eb3565b935061411f8760408801613adb565b925060a086013561412f81614ecb565b9150613cbf8760c08801613a8b565b6000806000806000806000610180888a031215614077578081fd5b60008060008060008060008060006101c08a8c031215614177578283fd5b8935985060208a013561418981614eb3565b975060408a013561419981614eb3565b96506141a88b60608c01613adb565b955060c08a01356141b881614ecb565b94506141c78b60e08c01613a8b565b93506101608a013592506101808a01356141e081614eb3565b91506101a08a01356141f181614ecb565b809150509295985092959850929598565b60008060808385031215614214578182fd5b823591506142258460208501613adb565b90509250929050565b60008060008060c08587031215614243578182fd5b843593506142548660208701613adb565b9250608085013561426481614eb3565b915060a085013561427481614ecb565b939692955090935050565b600080600060a08486031215614293578081fd5b833592506142a48560208601613adb565b91506080840135613d0a81614ecb565b600080604083850312156142c6578182fd5b505080516020909101519092909150565b600080600080608085870312156142ec578182fd5b8435935060208501359250604085013561430581614eb3565b9150606085013561427481614ecb565b600080600080600060a0868803121561432c578283fd5b8535945060208601359350604086013561434581614eb3565b9250606086013561435581614eb3565b9150608086013561436581614ecb565b809150509295509295909350565b600080600060608486031215614387578081fd5b83359250602084013567ffffffffffffffff811681146143a5578182fd5b9150604084013561ffff81168114613d0a578182fd5b6000602082840312156143cc578081fd5b813561340681614eee565b600082516143e9818460208701614e83565b9190910192915050565b60008351614405818460208801614e83565b9190910191825250602001919050565b60008451614427818460208901614e83565b91909101928352506020820152604001919050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03948516815292909316602083015267ffffffffffffffff16604082015260ff909116606082015260800190565b90815260200190565b9889526001600160a01b03979097166020890152604088019590955292151560608701526001600160801b0391909116608086015267ffffffffffffffff1660a085015261ffff1660c084015260e08301526101008201526101200190565b9788526001600160a01b0396909616602088015260408701949094526001600160801b0392909216606086015267ffffffffffffffff16608085015261ffff1660a084015260c083015260e08201526101000190565b92835260208301919091526001600160a01b0316604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6000608082016001600160a01b0380881684526020818816818601526080604086015282875180855260a0870191508289019450855b818110156146a957855185168352948301949183019160010161468b565b50508581036060870152865180825290820193509150808601845b838110156146e0578151855293820193908201906001016146c4565b50929998505050505050505050565b6001600160a01b039390931683526001600160801b039190911660208301521515604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b6001600160a01b039586168152602081019490945291841660408401526060830152909116608082015260a00190565b60208082526010908201527f4e4654506169723a206e6f206c6f616e00000000000000000000000000000000604082015260600190565b60208082526016908201527f4e4654506169723a206e6f7420617661696c61626c6500000000000000000000604082015260600190565b60208082526013908201527f4e4654506169723a2062616420706172616d7300000000000000000000000000604082015260600190565b60208082526015908201527f4e4654506169723a20776f72736520706172616d730000000000000000000000604082015260600190565b60208082526015908201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604082015260600190565b6020808252601a908201527f4e4654506169723a207369676e61747572652065787069726564000000000000604082015260600190565b60208082526014908201527f4e4654506169723a2063616c6c206661696c6564000000000000000000000000604082015260600190565b60208082526015908201527f4e4654506169723a206c6f616e20657870697265640000000000000000000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b6020808252601c908201527f4e4654506169723a204c656e64696e67436c7562207265667573656400000000604082015260600190565b60208082526014908201527f4e4654506169723a206c6f616e20657869737473000000000000000000000000604082015260600190565b60208082526015908201527f4e4654506169723a206275796572206661696c65640000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526015908201527f4e4654506169723a206e6f7420626f72726f7765720000000000000000000000604082015260600190565b60208082526013908201527f4e4654506169723a2063616e27742063616c6c00000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526016908201527f4e4654506169723a20736b696d20746f6f206d75636800000000000000000000604082015260600190565b60208082526019908201527f4e4654506169723a206e6f742074686520626f72726f77657200000000000000604082015260600190565b6020808252601c908201527f4e4654506169723a20616c726561647920696e697469616c697a656400000000604082015260600190565b60208082526011908201527f4e4654506169723a206261642070616972000000000000000000000000000000604082015260600190565b60208082526016908201527f4e4654506169723a206e6f20636f6c6c61746572616c00000000000000000000604082015260600190565b60208082526014908201527f4e4654506169723a20736b696d206661696c6564000000000000000000000000604082015260600190565b60208082526017908201527f4e4654506169723a206e6f7420746865206c656e646572000000000000000000604082015260600190565b6020808252601b908201527f4e4654506169723a20496e74657265737420756e70617961626c650000000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b60208082526014908201527f4e4654506169723a206e6f742065787069726564000000000000000000000000604082015260600190565b6020808252601a908201527f4e4654506169723a207369676e617475726520696e76616c6964000000000000604082015260600190565b81516001600160801b0316815260208083015167ffffffffffffffff169082015260409182015161ffff169181019190915260600190565b6001600160801b0393909316835267ffffffffffffffff91909116602083015261ffff16604082015260600190565b9586526001600160801b0394909416602086015267ffffffffffffffff92909216604085015261ffff90811660608501521660808301526001600160a01b031660a082015260c00190565b918252602082015260400190565b6000808335601e19843603018112614e0d578283fd5b83018035915067ffffffffffffffff821115614e27578283fd5b602001915036819003821315613a0b57600080fd5b60405181810167ffffffffffffffff81118282101715614e5b57600080fd5b604052919050565b600067ffffffffffffffff821115614e79578081fd5b5060209081020190565b60005b83811015614e9e578181015183820152602001614e86565b83811115614ead576000848401525b50505050565b6001600160a01b0381168114614ec857600080fd5b50565b8015158114614ec857600080fd5b6001600160801b0381168114614ec857600080fd5b60ff81168114614ec857600080fdfea264697066735822122063098d05dfebe7dc5c77a9fa69d89d02f91ce0be86e25ec26ed8d276f2cc2ab364736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80634e71e0c8116100f7578063a05a163711610095578063e30c397811610064578063e30c3978146104a6578063e7cf3f86146104bb578063f41f5e1e146104db578063f46901ed146104fb576101c2565b8063a05a16371461043c578063cd446e221461045c578063d41ddc9614610471578063d8dfeb4514610491576101c2565b806380e00478116100d157806380e00478146103c257806388fb3a50146103e25780638bea2242146103f75780638da5cb5b14610427576101c2565b80634e71e0c814610377578063656f3d641461038c5780636b2ace87146103ad576101c2565b80632e2f190111610164578063476343ee1161013e578063476343ee1461030f5780634d8085d2146103245780634dde3bce146103445780634ddf47d414610364576101c2565b80632e2f1901146102c55780633644e515146102e557806338d52e0f146102fa576101c2565b80631329b682116101a05780631329b682146102415780631b65fe041461025657806321fa31001461027657806324ba88ec146102a5576101c2565b8063017e7e58146101c7578063078dfbe7146101f2578063114c2cda14610214575b600080fd5b3480156101d357600080fd5b506101dc61051b565b6040516101e9919061443c565b60405180910390f35b3480156101fe57600080fd5b5061021261020d366004613ccb565b61052a565b005b34801561022057600080fd5b5061023461022f366004614373565b610619565b6040516101e991906144e2565b34801561024d57600080fd5b5061023461069e565b34801561026257600080fd5b50610212610271366004614202565b6106a4565b34801561028257600080fd5b50610296610291366004614008565b610919565b6040516101e993929190614d6f565b3480156102b157600080fd5b506102126102c03660046142d7565b610953565b3480156102d157600080fd5b506102126102e0366004614315565b610980565b3480156102f157600080fd5b50610234610b94565b34801561030657600080fd5b506101dc610ba3565b34801561031b57600080fd5b50610212610bb2565b34801561033057600080fd5b5061021261033f3660046140e6565b610d24565b34801561035057600080fd5b5061021261035f36600461413e565b610d52565b610212610372366004613dc7565b610d7a565b34801561038357600080fd5b50610212610e01565b61039f61039a366004613d15565b610e8e565b6040516101e9929190614de9565b3480156103b957600080fd5b506101dc610ec1565b3480156103ce57600080fd5b506102126103dd366004614159565b610ee5565b3480156103ee57600080fd5b5061021261139e565b34801561040357600080fd5b50610417610412366004614008565b6113b6565b6040516101e994939291906144ad565b34801561043357600080fd5b506101dc6113fa565b34801561044857600080fd5b50610234610457366004613b50565b611409565b34801561046857600080fd5b506101dc61141b565b34801561047d57600080fd5b5061021261048c366004614038565b61143f565b34801561049d57600080fd5b506101dc6115c8565b3480156104b257600080fd5b506101dc6115d7565b3480156104c757600080fd5b506102126104d636600461422e565b6115e6565b3480156104e757600080fd5b506102126104f636600461427f565b6117e0565b34801561050757600080fd5b50610212610516366004613b50565b611946565b6002546001600160a01b031681565b6000546001600160a01b0316331461055d5760405162461bcd60e51b815260040161055490614a02565b60405180910390fd5b81156105f8576001600160a01b0383161515806105775750805b6105935760405162461bcd60e51b81526004016105549061484a565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055610614565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b64496cebb80061ffff821667ffffffffffffffff84160284810282900491829060025b600681116106705764496cebb80082019150818484028161065957fe5b04925061066685846119ba565b945060010161063c565b50600160801b84106106945760405162461bcd60e51b815260040161055490614c5b565b5050509392505050565b60055481565b6106ac613942565b50600082815260076020908152604091829020825160808101845281546001600160a01b03908116825260019092015491821692810192909252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16606082018190526002141561080c5780602001516001600160a01b0316336001600160a01b03161461074d5760405162461bcd60e51b815260040161055490614c24565b610755613969565b50600083815260066020908152604091829020825160608101845290546001600160801b0381168252600160801b810467ffffffffffffffff908116838501819052600160c01b90920461ffff169483019490945291850151909216108015906107ce5750805183516001600160801b03918216911611155b80156107ea5750806040015161ffff16836040015161ffff1611155b6108065760405162461bcd60e51b815260040161055490614813565b50610862565b606081015160ff166001141561084a5780516001600160a01b031633146108455760405162461bcd60e51b815260040161055490614b11565b610862565b60405162461bcd60e51b815260040161055490614bb6565b6000838152600660209081526040918290208451815492860151868501516001600160801b03199094166001600160801b039092169190911767ffffffffffffffff60801b1916600160801b67ffffffffffffffff909216919091021761ffff60c01b1916600160c01b61ffff909316929092029190911790555183907f4806b0411d30ea0d78ca288170b72377a6442c56e923371fa99dc2b62c4a7a0c9061090c908590614d37565b60405180910390a2505050565b6006602052600090815260409020546001600160801b03811690600160801b810467ffffffffffffffff1690600160c01b900461ffff1683565b6000806000610964878787876119e3565b9350935050925061097781848487611d87565b50505050505050565b60008060006109938860008860006119e3565b935093505092506000600460009054906101000a90046001600160a01b031690506000876001600160a01b031663f9cf7c21600360009054906101000a90046001600160a01b03168c858d306040518663ffffffff1660e01b81526004016109ff95949392919061473e565b602060405180830381600087803b158015610a1957600080fd5b505af1158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a519190614020565b905084811015610aec5785610ae757604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90610ab490859033903090878c03906004016145f7565b600060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b505050505b610b7b565b84811115610b7b57604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90610b4890859030908c908b8803906004016145f7565b600060405180830381600087803b158015610b6257600080fd5b505af1158015610b76573d6000803e3d6000fd5b505050505b610b888386866001611d87565b50505050505050505050565b6000610b9e611f79565b905090565b6004546001600160a01b031681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0d57600080fd5b505afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190613b6c565b6005549091508015610cdf5760048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc93610ca793921691309188918891016145f7565b600060405180830381600087803b158015610cc157600080fd5b505af1158015610cd5573d6000803e3d6000fd5b5050600060055550505b816001600160a01b03167fbe641c3ffc44b2d6c184f023fa4ed7bda4b6ffa71e03b3c98ae0c776da1f17e782604051610d1891906144e2565b60405180910390a25050565b610d3084868584611fd9565b610d3e3385868887876121c4565b50610d4b84866000612610565b5050505050565b610d5f8688868585612723565b610d6e8686878a8860006121c4565b50610977338885612610565b6003546001600160a01b031615610da35760405162461bcd60e51b815260040161055490614b48565b610daf81830183613f8e565b600480546001600160a01b03199081166001600160a01b039384161790915560038054909116928216929092179182905516610dfd5760405162461bcd60e51b815260040161055490614b7f565b5050565b6001546001600160a01b0316338114610e2c5760405162461bcd60e51b815260040161055490614aa5565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b600080610e99613989565b610eaa8989898989896000886129f5565b805160209091015190999098509650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610ef2888a888888612723565b60048054604051636d289ce560e11b81526000926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363da5139ca93610f4c93919092169189916001910161471b565b60206040518083038186803b158015610f6457600080fd5b505afa158015610f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9c9190614020565b90506000610faf8a8a308e8c60006121c4565b9050818111156110485760048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc936110119392169130918f9189890391016145f7565b600060405180830381600087803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b505050506111ad565b818110156111ad5782156111225760055460048054604051633de222bb60e21b8152928501926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f7888aec936110af939216913091016145dd565b60206040518083038186803b1580156110c757600080fd5b505afa1580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff9190614020565b101561111d5760405162461bcd60e51b815260040161055490614ada565b6111ad565b60048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc9361117a9392169133913091888a0391016145f7565b600060405180830381600087803b15801561119457600080fd5b505af11580156111a8573d6000803e3d6000fd5b505050505b6004805460405163097da6d360e41b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116936397da6d30936112069392169130918a918c9160009101614621565b6040805180830381600087803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125791906142b4565b5050836001600160a01b03166333563d1b600460009054906101000a90046001600160a01b031687600360009054906101000a90046001600160a01b03168f306040518663ffffffff1660e01b81526004016112b795949392919061473e565b600060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b50506003546040516331a9108f60e11b81523093506001600160a01b039091169150636352211e9061131b908f906004016144e2565b60206040518083038186803b15801561133357600080fd5b505afa158015611347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136b9190613b6c565b6001600160a01b0316146113915760405162461bcd60e51b8152600401610554906149cb565b5050505050505050505050565b33600090815260086020526040902080546001019055565b600760205260009081526040902080546001909101546001600160a01b0391821691811690600160a01b810467ffffffffffffffff1690600160e01b900460ff1684565b6000546001600160a01b031681565b60086020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b611447613942565b50600082815260076020908152604091829020825160808101845281546001600160a01b03908116825260019283015490811693820193909352600160a01b830467ffffffffffffffff1693810193909352600160e01b90910460ff166060830181905214156114df5780516001600160a01b031633146114da5760405162461bcd60e51b815260040161055490614b11565b61158e565b606081015160ff166002141561158e5780602001516001600160a01b0316826001600160a01b03161480611528575080602001516001600160a01b0316336001600160a01b0316145b6115445760405162461bcd60e51b815260040161055490614c24565b60008381526006602052604090819020549082015142600160801b90920467ffffffffffffffff9081169116011061158e5760405162461bcd60e51b815260040161055490614cc9565b6115988383613298565b827f279c10f9827cdddd314534dd33cb906c270c3ac21cdd72ed94a1d534aca5a25a8360405161090c919061443c565b6003546001600160a01b031681565b6001546001600160a01b031681565b6115ee613942565b50600084815260076020908152604091829020825160808101845281546001600160a01b03908116825260019092015491821692810192909252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff16606082018190521561166f5760405162461bcd60e51b815260040161055490614994565b6001600160a01b038381168083526001606084018181526000898152600760209081526040808320885181546001600160a01b0319908116918a16919091178255838a0151919096018054838b01519651971691909816177fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff95861602177fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b60ff90961695909502949094179095556006855282902088518154958a01518a8501516001600160801b03199097166001600160801b039092169190911767ffffffffffffffff60801b1916600160801b91909316029190911761ffff60c01b1916600160c01b61ffff909516949094029390931790925590518691907f605ebeabc91188a43baf9442070fc0c5ccae4fedaf3e6852cf28e395c11a7672906117cd908890614d37565b60405180910390a3610d4b338684612610565b6117e8613942565b50600083815260076020908152604091829020825160808101845281546001600160a01b03908116825260019283015490811693820193909352600160a01b830467ffffffffffffffff1693810193909352600160e01b90910460ff1660608301819052146118695760405162461bcd60e51b8152600401610554906147a5565b611871613969565b50600084815260066020908152604091829020825160608101845290546001600160801b03808216808452600160801b830467ffffffffffffffff1694840194909452600160c01b90910461ffff169382019390935285519092161480156118f55750836020015167ffffffffffffffff16816020015167ffffffffffffffff1611155b80156119115750836040015161ffff16816040015161ffff1610155b61192d5760405162461bcd60e51b8152600401610554906147dc565b815161193e903390808885886121c4565b505050505050565b6000546001600160a01b031633146119705760405162461bcd60e51b815260040161055490614a02565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fcf1d3f17e521c635e0d20b8acba94ba170afc041d0546d46dafa09d3c9c19eb390600090a250565b818101818110156119dd5760405162461bcd60e51b815260040161055490614926565b92915050565b6000806000806119f1613942565b50600088815260076020908152604091829020825160808101845281546001600160a01b03908116825260019092015491821692810192909252600160a01b810467ffffffffffffffff1692820192909252600160e01b90910460ff1660608201819052600214611a745760405162461bcd60e51b81526004016105549061476e565b80516001600160a01b0316331480611a98575080516001600160a01b038881169116145b611ab45760405162461bcd60e51b815260040161055490614a37565b611abc613969565b50600089815260066020908152604091829020825160608101845290546001600160801b0381168252600160801b810467ffffffffffffffff908116938301849052600160c01b90910461ffff16828501529284015190924291169091011015611b385760405162461bcd60e51b8152600401610554906148ef565b881580611b4f575080516001600160801b03168910155b15611bb35780516001600160801b03169850611b6b8a89613298565b8987611b775733611b79565b305b6001600160a01b03167fcd300581542c5eab58e736a0b08b42cec829c4504d1c16af90f4630b27e30de360405160405180910390a3611c71565b80516001600160801b039081168a90038116825260008b8152600660209081526040918290208451815492860151848701516001600160801b0319909416919095161767ffffffffffffffff60801b1916600160801b67ffffffffffffffff909516949094029390931761ffff60c01b1916600160c01b61ffff9092169190910217909155518a907f4806b0411d30ea0d78ca288170b72377a6442c56e923371fa99dc2b62c4a7a0c90611c68908490614d37565b60405180910390a25b6000611c9b8a6001600160801b0316846040015167ffffffffffffffff1642038460400151610619565b8a8101965090506127106103e8820204611cb36139a7565b60048054604051634ffe34db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693634ffe34db93611d03939216910161443c565b604080518083038186803b158015611d1a57600080fd5b505afa158015611d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d529190613fc6565b9050611d6081896001613370565b9850611d6e81836000613370565b9650846020015195505050505050945094509450949050565b6004546001600160a01b03168115611e5f5760055484017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7888aec83306040518363ffffffff1660e01b8152600401611dec9291906145dd565b60206040518083038186803b158015611e0457600080fd5b505afa158015611e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3c9190614020565b1015611e5a5760405162461bcd60e51b815260040161055490614ada565b611ee4565b604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90611eb1908490339030908a906004016145f7565b600060405180830381600087803b158015611ecb57600080fd5b505af1158015611edf573d6000803e3d6000fd5b505050505b6005805484019055604051633c6340f360e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90611f4090849030908a90898b03906004016145f7565b600060405180830381600087803b158015611f5a57600080fd5b505af1158015611f6e573d6000803e3d6000fd5b505050505050505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114611fb157611fac8161340d565b611fd3565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b8051421115611ffa5760405162461bcd60e51b815260040161055490614881565b6001600160a01b0384166000908152600860209081526040808320548551868401518784015187519451939695612061957f31609c8787e5709f4c4e0d7c6f3239ad028b96968335012bb862a64361421ef99530958d959094909390928b9290910161454a565b604051602081830303815290604052805190602001209050856001600160a01b0316600161208e83613461565b856020015186604001518760600151604051600081526020016040526040516120ba94939291906145bf565b6020604051602081039080840390855afa1580156120dc573d6000803e3d6000fd5b505050602060405103516001600160a01b03161461210c5760405162461bcd60e51b815260040161055490614d00565b600085815260076020526040902060010154600160e01b900460ff16156121455760405162461bcd60e51b815260040161055490614994565b5050506000918252600660209081526040928390208251815492840151949093015161ffff16600160c01b0261ffff60c01b1967ffffffffffffffff909516600160801b0267ffffffffffffffff60801b196001600160801b039095166001600160801b03199094169390931793909316919091179290921617905550565b600480548351604051636d289ce560e11b815260009384936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca9461222194939092169290918791016146ef565b60206040518083038186803b15801561223957600080fd5b505afa15801561224d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122719190614020565b905061271060648202819004906103e8820204841561235b5760055460048054604051633de222bb60e21b81528587038501909301926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f7888aec936122e8939216913091016145dd565b60206040518083038186803b15801561230057600080fd5b505afa158015612314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123389190614020565b10156123565760405162461bcd60e51b815260040161055490614ada565b6123e8565b60048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc936123b5939216918f913091898b03890191016145f7565b600060405180830381600087803b1580156123cf57600080fd5b505af11580156123e3573d6000803e3d6000fd5b505050505b60048054604051633c6340f360e21b815284860396506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc936124439392169130918e918b91016145f7565b600060405180830381600087803b15801561245d57600080fd5b505af1158015612471573d6000803e3d6000fd5b50506005805484019055506124869050613942565b8a81602001906001600160a01b031690816001600160a01b0316815250508981600001906001600160a01b031690816001600160a01b0316815250506002816060019060ff16908160ff168152505042816040019067ffffffffffffffff16908167ffffffffffffffff168152505080600760008a815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550606082015181600101601c6101000a81548160ff021916908360ff160217905550905050878a6001600160a01b03168c6001600160a01b03167f467ddae58c15b853f7195fb0a53262b32d8e73bd10833023764e91a5d48256ba8a6040516125fa9190614d37565b60405180910390a4505050509695505050505050565b80156126c1576003546040516331a9108f60e11b815230916001600160a01b031690636352211e906126469086906004016144e2565b60206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126969190613b6c565b6001600160a01b0316146126bc5760405162461bcd60e51b815260040161055490614bed565b610614565b6003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906126f590869030908790600401614489565b600060405180830381600087803b15801561270f57600080fd5b505af1158015610977573d6000803e3d6000fd5b602081015160ff1615801561273a57506040810151155b801561274857506060810151155b156127fd57825160208401516040808601519051632022616360e01b81526001600160a01b0389169363202261639361278a938a936000908190600401614d9e565b602060405180830381600087803b1580156127a457600080fd5b505af11580156127b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dc9190613dab565b6127f85760405162461bcd60e51b81526004016105549061495d565b61293e565b805142111561281e5760405162461bcd60e51b815260040161055490614881565b6001600160a01b038516600090815260086020526040812054907f51bdf8c1d18fdb31c98b3fa9c0eafb21834eebc55f0e77bd59fa99bc434ddf9230856128655787612868565b60005b87516020808a01516040808c01518a519151612890989796958d959094938c929091016144eb565b604051602081830303815290604052805190602001209050866001600160a01b031660016128bd83613461565b856020015186604001518760600151604051600081526020016040526040516128e994939291906145bf565b6020604051602081039080840390855afa15801561290b573d6000803e3d6000fd5b505050602060405103516001600160a01b03161461293b5760405162461bcd60e51b815260040161055490614d00565b50505b600084815260076020526040902060010154600160e01b900460ff16156129775760405162461bcd60e51b815260040161055490614994565b50506000918252600660209081526040928390208251815492840151949093015161ffff16600160c01b0261ffff60c01b1967ffffffffffffffff909516600160801b0267ffffffffffffffff60801b196001600160801b039095166001600160801b03199094169390931793909316919091179290921617905550565b8682101561328e576000888884818110612a0b57fe5b9050602002016020810190612a2091906143bb565b905060ff811660011415612a6e576000858585818110612a3c57fe5b9050602002810190612a4e9190614df7565b810190612a5b9190614008565b9050612a6681613499565b835250613282565b60ff811660021415612b60576000858585818110612a8857fe5b9050602002810190612a9a9190614df7565b810190612aa79190614008565b9050612ab281613499565b6020840181905260048054604051636d289ce560e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca94612b1094929092169290916001910161471b565b60206040518083038186803b158015612b2857600080fd5b505afa158015612b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a669190614020565b60ff811660031415612bfd5760008060008060008060008b8b8b818110612b8357fe5b9050602002810190612b959190614df7565b810190612ba291906142d7565b9299509095509092509050612bb9878583856119e3565b60208d0192909252828c5260019c909c019b9197509095509250612be590508f8f8f8f8f8f8f8f6129f5565b612bf182868684611d87565b5050505050505061328e565b60ff811660041415612c4c57600080868686818110612c1857fe5b9050602002810190612c2a9190614df7565b810190612c379190614038565b91509150612c45828261143f565b5050613282565b60ff8116600c1415612cad576000612c62613969565b600080888888818110612c7157fe5b9050602002810190612c839190614df7565b810190612c90919061422e565b9350935093509350612ca4848484846115e6565b50505050613282565b60ff8116600d1415612d09576000612cc3613969565b6000878787818110612cd157fe5b9050602002810190612ce39190614df7565b810190612cf0919061427f565b925092509250612d018383836117e0565b505050613282565b60ff811660181415612de8576000806000806000808a8a8a818110612d2a57fe5b9050602002810190612d3c9190614df7565b810190612d499190613b88565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0a47c938787878787876040518763ffffffff1660e01b8152600401612dab96959493929190614450565b600060405180830381600087803b158015612dc557600080fd5b505af1158015612dd9573d6000803e3d6000fd5b50505050505050505050613282565b60ff811660141415612e8a57612e7e858585818110612e0357fe5b9050602002810190612e159190614df7565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150879050818110612e5857fe5b9050602002013584600060028110612e6c57fe5b6020020151856001602002015161352f565b60208401528252613282565b60ff811660151415612f0557612e7e858585818110612ea557fe5b9050602002810190612eb79190614df7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508793509150612ef39050565b60200201518460016020020151613625565b60ff811660161415612fec576000806000878787818110612f2257fe5b9050602002810190612f349190614df7565b810190612f419190613e34565b919450925090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f18d03cc843385612f93868b600060200201518c60016020020151613713565b6040518563ffffffff1660e01b8152600401612fb294939291906145f7565b600060405180830381600087803b158015612fcc57600080fd5b505af1158015612fe0573d6000803e3d6000fd5b50505050505050613282565b60ff81166017141561308057600060608087878781811061300957fe5b905060200281019061301b9190614df7565b8101906130289190613ebb565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fca8843843385856040518563ffffffff1660e01b8152600401612fb29493929190614655565b60ff8116601e141561316c576060600061311289898781811061309f57fe5b905060200201358888888181106130b257fe5b90506020028101906130c49190614df7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508a935091506131009050565b6020020151876001602002015161373b565b915091508060ff166001141561313d57818060200190518101906131369190614020565b8452612c45565b8060ff1660021415612c45578180602001905181019061315d91906142b4565b60208601528452506132829050565b60ff81166028141561321957600080600080613186613969565b6000613190613942565b8b8b8b81811061319c57fe5b90506020028101906131ae9190614df7565b8101906131bb919061405c565b919c50949a50929850909650945090925090506131db8587858585612723565b6131ea858586898760006121c4565b5050505050506132068b8b8b8b8b8b8b6001019b508b8b6129f5565b613211338284612610565b50505061328e565b60ff81166029141561328257600080613230613969565b600061323a613942565b89898981811061324657fe5b90506020028101906132589190614df7565b81019061326591906140e6565b9450945094509450945061327c8585858585610d24565b50505050505b506001909101906129f5565b5050505050505050565b600082815260076020908152604080832080546001600160a01b031916815560010180547fffffff000000000000000000000000000000000000000000000000000000000016905560069091529081902080547fffffffffffff000000000000000000000000000000000000000000000000000016905560035490516323b872dd60e01b81526001600160a01b03909116906323b872dd9061334290309085908790600401614489565b600060405180830381600087803b15801561335c57600080fd5b505af115801561193e573d6000803e3d6000fd5b82516000906001600160801b0316613389575081613406565b835160208501516001600160801b03918216916133a89186911661390b565b816133af57fe5b0490508180156133f357508284602001516001600160801b03166133e986600001516001600160801b03168461390b90919063ffffffff16565b816133f057fe5b04105b15613406576134038160016119ba565b90505b9392505050565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188230604051602001613444939291906145a0565b604051602081830303815290604052805190602001209050919050565b600060405180604001604052806002815260200161190160f01b815250613486611f79565b8360405160200161344493929190614415565b60006134a3613969565b506000828152600660209081526040808320815160608101835290546001600160801b038116808352600160801b820467ffffffffffffffff90811684870152600160c01b90920461ffff16838501908152888752600790955292852060010154935191949293613523928592600160a01b909204909116420390610619565b91909101949350505050565b6000806000806000808980602001905181019061354c9190613e74565b935093509350935061355f828989613713565b915061356c818989613713565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8a86338787876040518763ffffffff1660e01b81526004016135c3959493929190614621565b60408051808303818588803b1580156135db57600080fd5b505af11580156135ef573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061361491906142b4565b955095505050505094509492505050565b600080600080600080888060200190518101906136429190613e74565b93509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d30853386613687878e8e613713565b613692878f8f613713565b6040518663ffffffff1660e01b81526004016136b2959493929190614621565b6040805180830381600087803b1580156136cb57600080fd5b505af11580156136df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370391906142b4565b9550955050505050935093915050565b60008084121561373357600019841461372c578161372e565b825b613403565b509192915050565b6060600080606060008060008980602001905181019061375b9190613bf5565b94509450945094509450828015613770575081155b1561379e5783896040516020016137889291906143f3565b60405160208183030381529060405293506137f7565b821580156137a95750815b156137c15783886040516020016137889291906143f3565b8280156137cb5750815b156137f7578389896040516020016137e593929190614415565b60405160208183030381529060405293505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03161415801561384757506003546001600160a01b03868116911614155b801561385c57506001600160a01b0385163014155b6138785760405162461bcd60e51b815260040161055490614a6e565b60006060866001600160a01b03168d8760405161389591906143d7565b60006040518083038185875af1925050503d80600081146138d2576040519150601f19603f3d011682016040523d82523d6000602084013e6138d7565b606091505b5091509150816138f95760405162461bcd60e51b8152600401610554906148b8565b9c919b50909950505050505050505050565b60008115806139265750508082028282828161392357fe5b04145b6119dd5760405162461bcd60e51b815260040161055490614c92565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b60405180604001604052806002906020820280368337509192915050565b604080518082019091526000808252602082015290565b80356119dd81614eb3565b60008083601f8401126139da578182fd5b50813567ffffffffffffffff8111156139f1578182fd5b6020830191508360208083028501011115613a0b57600080fd5b9250929050565b600082601f830112613a22578081fd5b8135613a35613a3082614e63565b614e3c565b818152915060208083019084810181840286018201871015613a5657600080fd5b60005b84811015613a7557813584529282019290820190600101613a59565b505050505092915050565b80516119dd81614ecb565b600060808284031215613a9c578081fd5b613aa66080614e3c565b9050813581526020820135613aba81614eee565b80602083015250604082013560408201526060820135606082015292915050565b600060608284031215613aec578081fd5b613af66060614e3c565b90508135613b0381614ed9565b8152602082013567ffffffffffffffff81168114613b2057600080fd5b6020820152604082013561ffff81168114613b3a57600080fd5b604082015292915050565b80516119dd81614eee565b600060208284031215613b61578081fd5b813561340681614eb3565b600060208284031215613b7d578081fd5b815161340681614eb3565b60008060008060008060c08789031215613ba0578182fd5b8635613bab81614eb3565b95506020870135613bbb81614eb3565b94506040870135613bcb81614ecb565b93506060870135613bdb81614eee565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215613c0c578283fd5b8551613c1781614eb3565b602087015190955067ffffffffffffffff80821115613c34578485fd5b818801915088601f830112613c47578485fd5b815181811115613c55578586fd5b613c68601f8201601f1916602001614e3c565b9150808252896020828501011115613c7e578586fd5b613c8f816020840160208601614e83565b509450613ca190508760408801613a80565b9250613cb08760608801613a80565b9150613cbf8760808801613b45565b90509295509295909350565b600080600060608486031215613cdf578081fd5b8335613cea81614eb3565b92506020840135613cfa81614ecb565b91506040840135613d0a81614ecb565b809150509250925092565b60008060008060008060608789031215613d2d578384fd5b863567ffffffffffffffff80821115613d44578586fd5b613d508a838b016139c9565b90985096506020890135915080821115613d68578586fd5b613d748a838b016139c9565b90965094506040890135915080821115613d8c578384fd5b50613d9989828a016139c9565b979a9699509497509295939492505050565b600060208284031215613dbc578081fd5b815161340681614ecb565b60008060208385031215613dd9578182fd5b823567ffffffffffffffff80821115613df0578384fd5b818501915085601f830112613e03578384fd5b813581811115613e11578485fd5b866020828501011115613e22578485fd5b60209290920196919550909350505050565b600080600060608486031215613e48578081fd5b8335613e5381614eb3565b92506020840135613e6381614eb3565b929592945050506040919091013590565b60008060008060808587031215613e89578182fd5b8451613e9481614eb3565b6020860151909450613ea581614eb3565b6040860151606090960151949790965092505050565b600080600060608486031215613ecf578081fd5b8335613eda81614eb3565b925060208481013567ffffffffffffffff80821115613ef7578384fd5b818701915087601f830112613f0a578384fd5b8135613f18613a3082614e63565b81815284810190848601868402860187018c1015613f34578788fd5b8795505b83861015613f5e57613f4a8c826139be565b835260019590950194918601918601613f38565b50965050506040870135925080831115613f76578384fd5b5050613f8486828701613a12565b9150509250925092565b60008060408385031215613fa0578182fd5b8235613fab81614eb3565b91506020830135613fbb81614eb3565b809150509250929050565b600060408284031215613fd7578081fd5b613fe16040614e3c565b8251613fec81614ed9565b81526020830151613ffc81614ed9565b60208201529392505050565b600060208284031215614019578081fd5b5035919050565b600060208284031215614031578081fd5b5051919050565b6000806040838503121561404a578182fd5b823591506020830135613fbb81614eb3565b6000806000806000806000610180888a031215614077578485fd5b87359650602088013561408981614eb3565b9550604088013561409981614eb3565b94506140a88960608a01613adb565b935060c08801356140b881614ecb565b925060e08801356140c881614ecb565b91506140d8896101008a01613a8b565b905092959891949750929550565b600080600080600061014086880312156140fe578283fd5b85359450602086013561411081614eb3565b935061411f8760408801613adb565b925060a086013561412f81614ecb565b9150613cbf8760c08801613a8b565b6000806000806000806000610180888a031215614077578081fd5b60008060008060008060008060006101c08a8c031215614177578283fd5b8935985060208a013561418981614eb3565b975060408a013561419981614eb3565b96506141a88b60608c01613adb565b955060c08a01356141b881614ecb565b94506141c78b60e08c01613a8b565b93506101608a013592506101808a01356141e081614eb3565b91506101a08a01356141f181614ecb565b809150509295985092959850929598565b60008060808385031215614214578182fd5b823591506142258460208501613adb565b90509250929050565b60008060008060c08587031215614243578182fd5b843593506142548660208701613adb565b9250608085013561426481614eb3565b915060a085013561427481614ecb565b939692955090935050565b600080600060a08486031215614293578081fd5b833592506142a48560208601613adb565b91506080840135613d0a81614ecb565b600080604083850312156142c6578182fd5b505080516020909101519092909150565b600080600080608085870312156142ec578182fd5b8435935060208501359250604085013561430581614eb3565b9150606085013561427481614ecb565b600080600080600060a0868803121561432c578283fd5b8535945060208601359350604086013561434581614eb3565b9250606086013561435581614eb3565b9150608086013561436581614ecb565b809150509295509295909350565b600080600060608486031215614387578081fd5b83359250602084013567ffffffffffffffff811681146143a5578182fd5b9150604084013561ffff81168114613d0a578182fd5b6000602082840312156143cc578081fd5b813561340681614eee565b600082516143e9818460208701614e83565b9190910192915050565b60008351614405818460208801614e83565b9190910191825250602001919050565b60008451614427818460208901614e83565b91909101928352506020820152604001919050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03948516815292909316602083015267ffffffffffffffff16604082015260ff909116606082015260800190565b90815260200190565b9889526001600160a01b03979097166020890152604088019590955292151560608701526001600160801b0391909116608086015267ffffffffffffffff1660a085015261ffff1660c084015260e08301526101008201526101200190565b9788526001600160a01b0396909616602088015260408701949094526001600160801b0392909216606086015267ffffffffffffffff16608085015261ffff1660a084015260c083015260e08201526101000190565b92835260208301919091526001600160a01b0316604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6000608082016001600160a01b0380881684526020818816818601526080604086015282875180855260a0870191508289019450855b818110156146a957855185168352948301949183019160010161468b565b50508581036060870152865180825290820193509150808601845b838110156146e0578151855293820193908201906001016146c4565b50929998505050505050505050565b6001600160a01b039390931683526001600160801b039190911660208301521515604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b6001600160a01b039586168152602081019490945291841660408401526060830152909116608082015260a00190565b60208082526010908201527f4e4654506169723a206e6f206c6f616e00000000000000000000000000000000604082015260600190565b60208082526016908201527f4e4654506169723a206e6f7420617661696c61626c6500000000000000000000604082015260600190565b60208082526013908201527f4e4654506169723a2062616420706172616d7300000000000000000000000000604082015260600190565b60208082526015908201527f4e4654506169723a20776f72736520706172616d730000000000000000000000604082015260600190565b60208082526015908201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604082015260600190565b6020808252601a908201527f4e4654506169723a207369676e61747572652065787069726564000000000000604082015260600190565b60208082526014908201527f4e4654506169723a2063616c6c206661696c6564000000000000000000000000604082015260600190565b60208082526015908201527f4e4654506169723a206c6f616e20657870697265640000000000000000000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b6020808252601c908201527f4e4654506169723a204c656e64696e67436c7562207265667573656400000000604082015260600190565b60208082526014908201527f4e4654506169723a206c6f616e20657869737473000000000000000000000000604082015260600190565b60208082526015908201527f4e4654506169723a206275796572206661696c65640000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526015908201527f4e4654506169723a206e6f7420626f72726f7765720000000000000000000000604082015260600190565b60208082526013908201527f4e4654506169723a2063616e27742063616c6c00000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526016908201527f4e4654506169723a20736b696d20746f6f206d75636800000000000000000000604082015260600190565b60208082526019908201527f4e4654506169723a206e6f742074686520626f72726f77657200000000000000604082015260600190565b6020808252601c908201527f4e4654506169723a20616c726561647920696e697469616c697a656400000000604082015260600190565b60208082526011908201527f4e4654506169723a206261642070616972000000000000000000000000000000604082015260600190565b60208082526016908201527f4e4654506169723a206e6f20636f6c6c61746572616c00000000000000000000604082015260600190565b60208082526014908201527f4e4654506169723a20736b696d206661696c6564000000000000000000000000604082015260600190565b60208082526017908201527f4e4654506169723a206e6f7420746865206c656e646572000000000000000000604082015260600190565b6020808252601b908201527f4e4654506169723a20496e74657265737420756e70617961626c650000000000604082015260600190565b60208082526018908201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604082015260600190565b60208082526014908201527f4e4654506169723a206e6f742065787069726564000000000000000000000000604082015260600190565b6020808252601a908201527f4e4654506169723a207369676e617475726520696e76616c6964000000000000604082015260600190565b81516001600160801b0316815260208083015167ffffffffffffffff169082015260409182015161ffff169181019190915260600190565b6001600160801b0393909316835267ffffffffffffffff91909116602083015261ffff16604082015260600190565b9586526001600160801b0394909416602086015267ffffffffffffffff92909216604085015261ffff90811660608501521660808301526001600160a01b031660a082015260c00190565b918252602082015260400190565b6000808335601e19843603018112614e0d578283fd5b83018035915067ffffffffffffffff821115614e27578283fd5b602001915036819003821315613a0b57600080fd5b60405181810167ffffffffffffffff81118282101715614e5b57600080fd5b604052919050565b600067ffffffffffffffff821115614e79578081fd5b5060209081020190565b60005b83811015614e9e578181015183820152602001614e86565b83811115614ead576000848401525b50505050565b6001600160a01b0381168114614ec857600080fd5b50565b8015158114614ec857600080fd5b6001600160801b0381168114614ec857600080fd5b60ff81168114614ec857600080fdfea264697066735822122063098d05dfebe7dc5c77a9fa69d89d02f91ce0be86e25ec26ed8d276f2cc2ab364736f6c634300060c0033",
  "devdoc": {
    "details": "This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.",
    "kind": "dev",
    "methods": {
      "calculateInterest(uint256,uint64,uint16)": {
        "params": {
          "aprBPS": "Annual rate in basis points (1/10_000)",
          "principal": "Amount owed in wei",
          "t": "Duration in seconds"
        }
      },
      "cook(uint8[],uint256[],bytes[])": {
        "params": {
          "actions": "An array with a sequence of actions to execute (see ACTION_ declarations).",
          "datas": "A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.",
          "values": "A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`."
        },
        "returns": {
          "value1": "May contain the first positioned return value of the last executed action (if applicable).",
          "value2": "May contain the second positioned return value of the last executed action which returns 2 values (if applicable)."
        }
      },
      "flashRepay(uint256,uint256,address,address,bool)": {
        "params": {
          "excessRecipient": "Receives any funds left over after repaying, if any",
          "price": "Sale price of the token, in wei",
          "seller": "INFTSeller contract that will perform the sale",
          "skimShortage": "True if any extra funds required have already been Bento-transfered to the contract. Take care to send enough; interest accumulates by the second.",
          "tokenId": "Token ID of the loan in question."
        }
      },
      "flashRequestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,(uint256,uint8,bytes32,bytes32),uint256,address,bool)": {
        "params": {
          "anyTokenId": "Set if lender agreed to any token. Must have tokenId 0 in signature.",
          "borrower": "Receives the funds (and excess if token is cheaper)",
          "buyer": "INFTBuyer contract that will purchase the token",
          "lender": "Lender, whose BentoBox balance the funds will come from",
          "params": "Loan parameters requested, and signed by the lender",
          "price": "Price of token (in wei), sent to buyer contract",
          "signature": "(deadline, v, r, s) of signature. (See docs)",
          "skimShortage": "True if any funds needed in excess of the loan have already been Bento-transfered to the contract",
          "tokenId": "ID of the token that will function as collateral"
        }
      },
      "lend(uint256,(uint128,uint64,uint16),bool)": {
        "params": {
          "accepted": "Loan parameters as the lender saw them, for security",
          "skim": "True if the funds have been Bento-transferred to the contract",
          "tokenId": "ID of the token that will function as collateral"
        }
      },
      "removeCollateral(uint256,address)": {
        "params": {
          "to": "The receiver of the token.",
          "tokenId": "The token"
        }
      },
      "repay(uint256,uint256,address,bool)": {
        "params": {
          "principal": "How much of the principal to repay. Saturates at the full loan value. Zero also taken to mean 100%.",
          "skim": "True if the funds have already been Bento-transfered to the contract. Take care to send enough; interest accumulates by the second.",
          "to": "Recipient of the returned collateral. Can be anyone if msg.sender is the borrower, otherwise the borrower.",
          "tokenId": "Token ID of the loan in question."
        }
      },
      "requestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,bool,(uint256,uint8,bytes32,bytes32))": {
        "params": {
          "anyTokenId": "Set if lender agreed to any token. Must have tokenId 0 in signature.",
          "borrower": "Receives the funds and the option to repay",
          "lender": "Lender, whose BentoBox balance the funds will come from",
          "params": "Loan parameters requested, and signed by the lender",
          "signature": "(deadline, v, r, s) of signature. (See docs)",
          "skimCollateral": "True if the collateral has already been transferred",
          "tokenId": "ID of the token that will function as collateral"
        }
      },
      "requestLoan(uint256,(uint128,uint64,uint16),address,bool)": {
        "params": {
          "params": "Loan conditions on offer",
          "skim": "True if the token has already been transferred",
          "to": "Address to receive the loan, or option to withdraw collateral",
          "tokenId": "ID of the NFT"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "newFeeTo": "The address of the receiver."
        }
      },
      "takeCollateralAndLend(uint256,address,(uint128,uint64,uint16),bool,(uint256,uint8,bytes32,bytes32))": {
        "params": {
          "borrower": "Address that provides collateral and receives the loan",
          "params": "Loan terms offered, and signed by the borrower",
          "signature": "(deadline, v, r, s) of signature. (See docs)",
          "skimFunds": "True if the funds have been Bento-transferred to the contract",
          "tokenId": "ID of the token that will function as collateral"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      },
      "updateLoanParams(uint256,(uint128,uint64,uint16))": {
        "params": {
          "params": "The desired new loan parameters",
          "tokenId": "The token ID of the loan in question"
        }
      }
    },
    "title": "NFTPair",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "constructor": "The constructor is only used for the initial master contract.Subsequent clones are initialised via `init`.",
      "cook(uint8[],uint256[],bytes[])": {
        "notice": "Executes a set of actions and allows composability (contract calls) to other contracts."
      },
      "flashRepay(uint256,uint256,address,address,bool)": {
        "notice": "Repay a loan in full, by selling the token in the same transaction. Must be the borrower."
      },
      "flashRequestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,(uint256,uint8,bytes32,bytes32),uint256,address,bool)": {
        "notice": "Request and immediately borrow from a pre-committed lender, while buying the collateral in the same transaction.Caller provides extra funds if needed; loan can go to a different address."
      },
      "init(bytes)": {
        "notice": "De facto constructor for clone contracts"
      },
      "lend(uint256,(uint128,uint64,uint16),bool)": {
        "notice": "Lends with the parameters specified by the borrower."
      },
      "removeCollateral(uint256,address)": {
        "notice": "Removes `tokenId` as collateral and transfers it to `to`.This destroys the loan."
      },
      "repay(uint256,uint256,address,bool)": {
        "notice": "Repay a loan in part or in full"
      },
      "requestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,bool,(uint256,uint8,bytes32,bytes32))": {
        "notice": "Caller provides collateral; loan can go to a different address."
      },
      "requestLoan(uint256,(uint128,uint64,uint16),address,bool)": {
        "notice": "Deposit an NFT as collateral and request a loan against it"
      },
      "setFeeTo(address)": {
        "notice": "Sets the beneficiary of fees accrued in liquidations. MasterContract Only Admin function."
      },
      "takeCollateralAndLend(uint256,address,(uint128,uint64,uint16),bool,(uint256,uint8,bytes32,bytes32))": {
        "notice": "Take collateral from a pre-commited borrower and lend against itCollateral must come from the borrower, not a third party."
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      },
      "withdrawFees()": {
        "notice": "Withdraws the fees accumulated."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5442,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5444,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7684,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "feeTo",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7686,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "collateral",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC721)16877"
      },
      {
        "astId": 7688,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "asset",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)6157"
      },
      {
        "astId": 7690,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "feesEarnedShare",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7694,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "tokenLoanParams",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenLoanParams)17645_storage)"
      },
      {
        "astId": 7716,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "tokenLoan",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(TokenLoan)7712_storage)"
      },
      {
        "astId": 7741,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "currentBatchIds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)6157": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)16877": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenLoan)7712_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTPair.TokenLoan)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenLoan)7712_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenLoanParams)17645_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenLoanParams)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenLoanParams)17645_storage"
      },
      "t_struct(TokenLoan)7712_storage": {
        "encoding": "inplace",
        "label": "struct NFTPair.TokenLoan",
        "members": [
          {
            "astId": 7705,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "borrower",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7707,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "lender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7709,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "startTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 7711,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "status",
            "offset": 28,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenLoanParams)17645_storage": {
        "encoding": "inplace",
        "label": "struct TokenLoanParams",
        "members": [
          {
            "astId": 17640,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "valuation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 17642,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "duration",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 17644,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "annualInterestBPS",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}