{
  "address": "0x3a341f5474aac54829a587cE6ab13C86af6B1E29",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "bentoBox_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "LogFeeTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LogLend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "LogRemoveCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LogRepay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "valuation",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "annualInterestBPS",
          "type": "uint16"
        }
      ],
      "name": "LogRequestLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "valuation",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "annualInterestBPS",
          "type": "uint16"
        }
      ],
      "name": "LogUpdateLoanParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeShare",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "t",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "aprBPS",
          "type": "uint16"
        }
      ],
      "name": "calculateInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "cook",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value2",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesEarnedShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "accepted",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterContract",
      "outputs": [
        {
          "internalType": "contract NFTPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "removeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "skimCollateral",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "anyTokenId",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "requestAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "skim",
          "type": "bool"
        }
      ],
      "name": "requestLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "skimFunds",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "takeCollateralAndLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLoan",
      "outputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLoanParams",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "valuation",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "annualInterestBPS",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "valuation",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "annualInterestBPS",
              "type": "uint16"
            }
          ],
          "internalType": "struct TokenLoanParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "updateLoanParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45ab4a0577a58d44883f9b5ecd9d948fb04a60456076d41f2d90b57b96fe1379",
  "receipt": {
    "to": null,
    "from": "0x63a1e3877b1662A9ad124f8611b06e3ffBC29Cba",
    "contractAddress": "0x3a341f5474aac54829a587cE6ab13C86af6B1E29",
    "transactionIndex": 18,
    "gasUsed": "3505038",
    "logsBloom": "0x
    "blockHash": "0xf9eb39bd0ab72664d7158749c8a75cdeb176abcf63e4ee75054e9218e2496741",
    "transactionHash": "0x45ab4a0577a58d44883f9b5ecd9d948fb04a60456076d41f2d90b57b96fe1379",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 12212537,
        "transactionHash": "0x45ab4a0577a58d44883f9b5ecd9d948fb04a60456076d41f2d90b57b96fe1379",
        "address": "0x3a341f5474aac54829a587cE6ab13C86af6B1E29",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000063a1e3877b1662a9ad124f8611b06e3ffbc29cba"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xf9eb39bd0ab72664d7158749c8a75cdeb176abcf63e4ee75054e9218e2496741"
      }
    ],
    "blockNumber": 12212537,
    "cumulativeGasUsed": "4858265",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9A5620779feF1928eF87c1111491212efC2C3cB8"
  ],
  "solcInputHash": "495ac39dee8145a05ebd7dff96081707",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"bentoBox_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"LogFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LogLend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LogRemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LogRepay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"name\":\"LogRequestLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"name\":\"LogUpdateLoanParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeShare\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"t\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"aprBPS\",\"type\":\"uint16\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"cook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEarnedShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"accepted\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterContract\",\"outputs\":[{\"internalType\":\"contract NFTPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"skimCollateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"anyTokenId\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"requestAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skim\",\"type\":\"bool\"}],\"name\":\"requestLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"skimFunds\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"takeCollateralAndLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLoanParams\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"valuation\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"annualInterestBPS\",\"type\":\"uint16\"}],\"internalType\":\"struct TokenLoanParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"updateLoanParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.\",\"kind\":\"dev\",\"methods\":{\"cook(uint8[],uint256[],bytes[])\":{\"params\":{\"actions\":\"An array with a sequence of actions to execute (see ACTION_ declarations).\",\"datas\":\"A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\",\"values\":\"A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\"},\"returns\":{\"value1\":\"May contain the first positioned return value of the last executed action (if applicable).\",\"value2\":\"May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\"}},\"lend(uint256,(uint128,uint64,uint16),bool)\":{\"params\":{\"accepted\":\"Loan parameters as the lender saw them, for security\",\"skim\":\"True if the funds have been transfered to the contract\",\"tokenId\":\"ID of the token that will function as collateral\"}},\"removeCollateral(uint256,address)\":{\"params\":{\"to\":\"The receiver of the token.\",\"tokenId\":\"The token\"}},\"requestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,bool,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"anyTokenId\":\"Set if lender agreed to any token. Must have tokenId 0 in signature.\",\"lender\":\"Lender, whose BentoBox balance the funds will come from\",\"params\":\"Loan parameters requested, and signed by the lender\",\"recipient\":\"Address to receive the loan.\",\"skimCollateral\":\"True if the collateral has already been transfered\",\"tokenId\":\"ID of the token that will function as collateral\"}},\"requestLoan(uint256,(uint128,uint64,uint16),address,bool)\":{\"params\":{\"params\":\"Loan conditions on offer\",\"skim\":\"True if the token has already been transfered\",\"to\":\"Address to receive the loan, or option to withdraw collateral\",\"tokenId\":\"ID of the NFT\"}},\"setFeeTo(address)\":{\"params\":{\"newFeeTo\":\"The address of the receiver.\"}},\"takeCollateralAndLend(uint256,address,(uint128,uint64,uint16),bool,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"borrower\":\"Address that provides collateral and receives the loan\",\"params\":\"Loan terms offered, and signed by the borrower\",\"skimFunds\":\"True if the funds have been transfered to the contract\",\"tokenId\":\"ID of the token that will function as collateral\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"title\":\"NFTPair\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateInterest(uint256,uint64,uint16)\":{\"notice\":\"Approximates continuous compounding. Uses Horner's method to evaluate the truncated Maclaurin series for exp - 1, accumulating rounding errors along the way. The following is always guaranteed:   principal * time * apr <= result <= principal * (e^(time * apr) - 1), where time = t/YEAR, up to at most the rounding error obtained in calculating linear interest. If the theoretical result that we are approximating (the rightmost part of the above inquality) fits in 128 bits, then the function is guaranteed not to revert (unless n > 250, which is way too high). If even the linear interest (leftmost part of the inequality) does not the function will revert. Otherwise, the function may revert, return a reasonable result, or return a very inaccurate result. Even then the above inequality is respected.\"},\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"constructor\":\"The constructor is only used for the initial master contract.Subsequent clones are initialised via `init`.\",\"cook(uint8[],uint256[],bytes[])\":{\"notice\":\"Executes a set of actions and allows composability (contract calls) to other contracts.\"},\"init(bytes)\":{\"notice\":\"De facto constructor for clone contracts\"},\"lend(uint256,(uint128,uint64,uint16),bool)\":{\"notice\":\"Lends with the parameters specified by the borrower.\"},\"removeCollateral(uint256,address)\":{\"notice\":\"Removes `tokenId` as collateral and transfers it to `to`.This destroys the loan.\"},\"requestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,bool,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Caller provides collateral; loan can go to a different address.\"},\"requestLoan(uint256,(uint128,uint64,uint16),address,bool)\":{\"notice\":\"Deposit an NFT as collateral and request a loan against it\"},\"setFeeTo(address)\":{\"notice\":\"Sets the beneficiary of fees accrued in liquidations. MasterContract Only Admin function.\"},\"takeCollateralAndLend(uint256,address,(uint128,uint64,uint16),bool,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Take collateral from a pre-commited borrower and lend against itCollateral must come from the borrower, not a third party.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"withdrawFees()\":{\"notice\":\"Withdraws the fees accumulated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTPair.sol\":\"NFTPair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbde1619421fef865bf5f5f806e319900fb862e27f0aef6e0878e93f04f477601\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/Domain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Based on code and smartness by Ross Campbell and Keno\\n// Uses immutable to store the domain separator to reduce gas usage\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\npragma solidity 0.6.12;\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract Domain {\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n\\n    // solhint-disable var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\\n    }\\n\\n    constructor() public {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _domainSeparator() internal view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbcd071bfa82a5deb12c8e21ec4c2fb25f2f0b805009d9712221eb52f9d05f1c1\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf0da35541d6ae9e3c12fdd7c8d5d9584c56f9ac50d062efb8ca353ebd6ffd47d\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IMasterContract {\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\n    /// Also kown as the constructor for cloned contracts.\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\n    /// @param data Can be abi encoded arguments or anything else.\\n    function init(bytes calldata data) external payable;\\n}\\n\",\"keccak256\":\"0xc8d7519d2bd26fc6d5125f8fc3fe2a6aada76f71f26b4712e0a4160f1cbdb2ba\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to The address of the user to check.\\n    /// @return amount The token amount.\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\n        amount = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc0b0529bf740b422941fc4899762ef3bde7d05a56b1cdb60b063c2aa63883d65\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6bc52950e23c70a90a5b039697b77ba76360b62da6a06a61d3a1714b9c6c26b9\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"./BoringMath.sol\\\";\\n\\nstruct Rebase {\\n    uint128 elastic;\\n    uint128 base;\\n}\\n\\n/// @notice A rebasing library using overflow-/underflow-safe math.\\nlibrary RebaseLibrary {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function toBase(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (uint256 base) {\\n        if (total.elastic == 0) {\\n            base = elastic;\\n        } else {\\n            base = elastic.mul(total.base) / total.elastic;\\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\\n                base = base.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function toElastic(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (uint256 elastic) {\\n        if (total.base == 0) {\\n            elastic = base;\\n        } else {\\n            elastic = base.mul(total.elastic) / total.base;\\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\\n                elastic = elastic.add(1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\\n    /// @return (Rebase) The new total.\\n    /// @return base in relationship to `elastic`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 base) {\\n        base = toBase(total, elastic, roundUp);\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return (total, base);\\n    }\\n\\n    /// @notice Sub `base` from `total` and update `total.elastic`.\\n    /// @return (Rebase) The new total.\\n    /// @return elastic in relationship to `base`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 base,\\n        bool roundUp\\n    ) internal pure returns (Rebase memory, uint256 elastic) {\\n        elastic = toElastic(total, base, roundUp);\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return (total, elastic);\\n    }\\n\\n    /// @notice Add `elastic` and `base` to `total`.\\n    function add(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.add(elastic.to128());\\n        total.base = total.base.add(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Subtract `elastic` and `base` to `total`.\\n    function sub(\\n        Rebase memory total,\\n        uint256 elastic,\\n        uint256 base\\n    ) internal pure returns (Rebase memory) {\\n        total.elastic = total.elastic.sub(elastic.to128());\\n        total.base = total.base.sub(base.to128());\\n        return total;\\n    }\\n\\n    /// @notice Add `elastic` to `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\\n    }\\n\\n    /// @notice Subtract `elastic` from `total` and update storage.\\n    /// @return newElastic Returns updated `elastic`.\\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\\n    }\\n}\\n\",\"keccak256\":\"0xab228bfa8a3019a4f7effa8aeeb05de141d328703d8a2f7b87ca811d0ca33196\",\"license\":\"MIT\"},\"@sushiswap/bentobox-sdk/contracts/IBatchFlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\\n\\ninterface IBatchFlashBorrower {\\n    function onBatchFlashLoan(\\n        address sender,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata fees,\\n        bytes calldata data\\n    ) external;\\n}\",\"keccak256\":\"0x825a46e61443df6e1289b513da4386d0413d0b5311553f3e7e7e5c90412ddd5d\",\"license\":\"MIT\"},\"@sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol';\\nimport './IBatchFlashBorrower.sol';\\nimport './IFlashBorrower.sol';\\nimport './IStrategy.sol';\\n\\ninterface IBentoBoxV1 {\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\\n    event LogRegisterProtocol(address indexed protocol);\\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\\n    event LogStrategyDivest(address indexed token, uint256 amount);\\n    event LogStrategyInvest(address indexed token, uint256 amount);\\n    event LogStrategyLoss(address indexed token, uint256 amount);\\n    event LogStrategyProfit(address indexed token, uint256 amount);\\n    event LogStrategyQueued(address indexed token, address indexed strategy);\\n    event LogStrategySet(address indexed token, address indexed strategy);\\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\\n    function batchFlashLoan(IBatchFlashBorrower borrower, address[] calldata receivers, IERC20[] calldata tokens, uint256[] calldata amounts, bytes calldata data) external;\\n    function claimOwnership() external;\\n    function deploy(address masterContract, bytes calldata data, bool useCreate2) external payable;\\n    function deposit(IERC20 token_, address from, address to, uint256 amount, uint256 share) external payable returns (uint256 amountOut, uint256 shareOut);\\n    function flashLoan(IFlashBorrower borrower, address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n    function harvest(IERC20 token, bool balance, uint256 maxChangeAmount) external;\\n    function masterContractApproved(address, address) external view returns (bool);\\n    function masterContractOf(address) external view returns (address);\\n    function nonces(address) external view returns (uint256);\\n    function owner() external view returns (address);\\n    function pendingOwner() external view returns (address);\\n    function pendingStrategy(IERC20) external view returns (IStrategy);\\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function registerProtocol() external;\\n    function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;\\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\\n    function strategy(IERC20) external view returns (IStrategy);\\n    function strategyData(IERC20) external view returns (uint64 strategyStartDate, uint64 targetPercentage, uint128 balance);\\n    function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);\\n    function toShare(IERC20 token, uint256 amount, bool roundUp) external view returns (uint256 share);\\n    function totals(IERC20) external view returns (Rebase memory totals_);\\n    function transfer(IERC20 token, address from, address to, uint256 share) external;\\n    function transferMultiple(IERC20 token, address from, address[] calldata tos, uint256[] calldata shares) external;\\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\\n    function whitelistMasterContract(address masterContract, bool approved) external;\\n    function whitelistedMasterContracts(address) external view returns (bool);\\n    function withdraw(IERC20 token_, address from, address to, uint256 amount, uint256 share) external returns (uint256 amountOut, uint256 shareOut);\\n}\",\"keccak256\":\"0x9c025e34e0ef0c1fc9372ada9afa61925341ee93de9b9a79e77de55d715b6fb6\",\"license\":\"MIT\"},\"@sushiswap/bentobox-sdk/contracts/IFlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\\n\\ninterface IFlashBorrower {\\n    function onFlashLoan(\\n        address sender,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external;\\n}\",\"keccak256\":\"0x6e389a5acb7b3e7f337b7e28477e998228f05fc4c8ff877eab32d3e15037ccc2\",\"license\":\"MIT\"},\"@sushiswap/bentobox-sdk/contracts/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    // Send the assets to the Strategy and call skim to invest them\\n    function skim(uint256 amount) external;\\n\\n    // Harvest any profits made converted to the asset and pass them to the caller\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\n\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\n    // The actualAmount should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\n\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\n}\",\"keccak256\":\"0x91c02244e1508cf8e4d6c45110c57142301c237e809dcad67b8022f83555ba13\",\"license\":\"MIT\"},\"contracts/NFTPair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// Private Pool (NFT collateral)\\n\\n//    (                (   (\\n//    )\\\\      )    (   )\\\\  )\\\\ )  (\\n//  (((_)  ( /(   ))\\\\ ((_)(()/(  )(    (    (\\n//  )\\\\___  )(_)) /((_) _   ((_))(()\\\\   )\\\\   )\\\\ )\\n// ((/ __|((_)_ (_))( | |  _| |  ((_) ((_) _(_/(\\n//  | (__ / _` || || || |/ _` | | '_|/ _ \\\\| ' \\\\))\\n//   \\\\___|\\\\__,_| \\\\_,_||_|\\\\__,_| |_|  \\\\___/|_||_|\\n\\n// Copyright (c) 2021 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Special thanks to:\\n// @0xKeno - for all his invaluable contributions\\n// @burger_crypto - for the idea of trying to let the LPs benefit from liquidations\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/Domain.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"@sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol\\\";\\nimport \\\"./interfaces/IERC721.sol\\\";\\n\\nstruct TokenLoanParams {\\n    uint128 valuation; // How much will you get? OK to owe until expiration.\\n    uint64 duration; // Length of loan in seconds\\n    uint16 annualInterestBPS; // Variable cost of taking out the loan\\n}\\n\\ninterface ILendingClub {\\n    // Per token settings.\\n    function willLend(uint256 tokenId, TokenLoanParams memory params) external view returns (bool);\\n\\n    function lendingConditions(address nftPair, uint256 tokenId) external view returns (TokenLoanParams memory);\\n}\\n\\ninterface INFTPair {\\n    function collateral() external view returns (IERC721);\\n\\n    function asset() external view returns (IERC20);\\n\\n    function masterContract() external view returns (address);\\n\\n    function bentoBox() external view returns (IBentoBoxV1);\\n\\n    function removeCollateral(uint256 tokenId, address to) external;\\n}\\n\\n/// @title NFTPair\\n/// @dev This contract allows contract calls to any contract (except BentoBox)\\n/// from arbitrary callers thus, don't trust calls from this contract in any circumstances.\\ncontract NFTPair is BoringOwnable, Domain, IMasterContract {\\n    using BoringMath for uint256;\\n    using BoringMath128 for uint128;\\n    using RebaseLibrary for Rebase;\\n    using BoringERC20 for IERC20;\\n\\n    event LogRequestLoan(address indexed borrower, uint256 indexed tokenId, uint128 valuation, uint64 duration, uint16 annualInterestBPS);\\n    event LogUpdateLoanParams(uint256 indexed tokenId, uint128 valuation, uint64 duration, uint16 annualInterestBPS);\\n    // This automatically clears the associated loan, if any\\n    event LogRemoveCollateral(uint256 indexed tokenId, address recipient);\\n    // Details are in the loan request\\n    event LogLend(address indexed lender, uint256 indexed tokenId);\\n    event LogRepay(address indexed from, uint256 indexed tokenId);\\n    event LogFeeTo(address indexed newFeeTo);\\n    event LogWithdrawFees(address indexed feeTo, uint256 feeShare);\\n\\n    // Immutables (for MasterContract and all clones)\\n    IBentoBoxV1 public immutable bentoBox;\\n    NFTPair public immutable masterContract;\\n\\n    // MasterContract variables\\n    address public feeTo;\\n\\n    // Per clone variables\\n    // Clone init settings\\n    IERC721 public collateral;\\n    IERC20 public asset;\\n\\n    // A note on terminology:\\n    // \\\"Shares\\\" are BentoBox shares.\\n\\n    // Track assets we own. Used to allow skimming the excesss.\\n    uint256 public feesEarnedShare;\\n\\n    // Per token settings.\\n    mapping(uint256 => TokenLoanParams) public tokenLoanParams;\\n\\n    uint8 private constant LOAN_INITIAL = 0;\\n    uint8 private constant LOAN_REQUESTED = 1;\\n    uint8 private constant LOAN_OUTSTANDING = 2;\\n    struct TokenLoan {\\n        address borrower;\\n        address lender;\\n        uint64 startTime;\\n        uint8 status;\\n    }\\n    mapping(uint256 => TokenLoan) public tokenLoan;\\n\\n    // Do not go over 100% on either of these..\\n    uint256 private constant PROTOCOL_FEE_BPS = 1000;\\n    uint256 private constant OPEN_FEE_BPS = 100;\\n    uint256 private constant BPS = 10_000;\\n    uint256 private constant YEAR_BPS = 3600 * 24 * 365 * 10_000;\\n\\n    // Highest order term in the Maclaurin series for exp used by\\n    // `calculateIntest`.\\n    // Intuitive interpretation: interest continuously accrues on the principal.\\n    // That interest, in turn, earns \\\"second-order\\\" interest-on-interest, which\\n    // itself earns \\\"third-order\\\" interest, etc. This constant determines how\\n    // far we take this until we stop counting.\\n    //\\n    // The error, in terms of the interest rate, is at least\\n    //\\n    //            ----- n                        ----- Infinity\\n    //             \\\\           x^k                \\\\              x^k\\n    //      e^x -   )          ---   , which is    )             --- ,\\n    //             /            k!                /               k!\\n    //            ----- k = 1       k            ----- k = n + 1\\n    //\\n    // where n = COMPOUND_INTEREST_TERMS, and x = rt is the total amount of\\n    // interest that is owed at rate r over time t. It makes no difference if\\n    // this is, say, 5%/year for 10 years, or 50% in one year; the calculation\\n    // is the same. Why \\\"at least\\\"? There are also rounding errors. See\\n    // `calculateInterest` for more detail.\\n    // The factorial in the denominator \\\"wins\\\"; for all reasonable (and quite\\n    // a few unreasonable) interest rates, the lower-order terms contribute the\\n    // most to the total. The following table lists some of the calculated\\n    // approximations for different values of n, along with the \\\"true\\\" result:\\n    //\\n    // Total:         10%    20%    50%    100%    200%      500%       1000%\\n    // -----------------------------------------------------------------------\\n    // n = 1:         10.0%  20.0%  50.0%  100.0%  200.0%    500.0%     1000.0%\\n    // n = 2:         10.5%  22.0%  62.5%  150.0%  400.0%   1750.0%     6000.0%\\n    // n = 3:         10.5%  22.1%  64.6%  166.7%  533.3%   3833.3%    22666.7%\\n    // n = 4:         10.5%  22.1%  64.8%  170.8%  600.0%   6437.5%    64333.3%\\n    // n = 5:         10.5%  22.1%  64.9%  171.7%  626.7%   9041.7%   147666.7%\\n    // n = 6:         10.5%  22.1%  64.9%  171.8%  635.6%  11211.8%   286555.6%\\n    // n = 7:         10.5%  22.1%  64.9%  171.8%  638.1%  12761.9%   484968.3%\\n    // n = 8:         10.5%  22.1%  64.9%  171.8%  638.7%  13730.7%   732984.1%\\n    // n = 9:         10.5%  22.1%  64.9%  171.8%  638.9%  14268.9%  1008557.3%\\n    // n = 10:        10.5%  22.1%  64.9%  171.8%  638.9%  14538.1%  1284130.5%\\n    //\\n    // (n=Infinity):  10.5%  22.1%  64.9%  171.8%  638.9%  14741.3%  2202546.6%\\n    //\\n    // For instance, calculating the compounding effects of 200% in \\\"total\\\"\\n    // interest to the sixth order results in 635.6%, whereas the true result\\n    // is 638.9%.\\n    // At 500% that difference is a little more dramatic, but it is still in\\n    // the same ballpark -- and of little practical consequence unless the\\n    // collateral can be expected to go up more than 112 times in value.\\n    // Still, for volatile tokens, or an asset that is somehow known to be very\\n    // inflationary, use a different number.\\n    // Zero (no interest at all) is ignored and treated as one (linear only).\\n    uint8 private constant COMPOUND_INTEREST_TERMS = 6;\\n\\n    // For signed lend / borrow requests:\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice The constructor is only used for the initial master contract.\\n    /// @notice Subsequent clones are initialised via `init`.\\n    constructor(IBentoBoxV1 bentoBox_) public {\\n        bentoBox = bentoBox_;\\n        masterContract = this;\\n    }\\n\\n    /// @notice De facto constructor for clone contracts\\n    function init(bytes calldata data) public payable override {\\n        require(address(collateral) == address(0), \\\"NFTPair: already initialized\\\");\\n        (collateral, asset) = abi.decode(data, (IERC721, IERC20));\\n        require(address(collateral) != address(0), \\\"NFTPair: bad pair\\\");\\n    }\\n\\n    function updateLoanParams(uint256 tokenId, TokenLoanParams memory params) public {\\n        TokenLoan memory loan = tokenLoan[tokenId];\\n        if (loan.status == LOAN_OUTSTANDING) {\\n            // The lender can change terms so long as the changes are strictly\\n            // the same or better for the borrower:\\n            require(msg.sender == loan.lender, \\\"NFTPair: not the lender\\\");\\n            TokenLoanParams memory cur = tokenLoanParams[tokenId];\\n            require(\\n                params.duration >= cur.duration && params.valuation <= cur.valuation && params.annualInterestBPS <= cur.annualInterestBPS,\\n                \\\"NFTPair: worse params\\\"\\n            );\\n        } else if (loan.status == LOAN_REQUESTED) {\\n            // The borrower has already deposited the collateral and can\\n            // change whatever they like\\n            require(msg.sender == loan.borrower, \\\"NFTPair: not the borrower\\\");\\n        } else {\\n            // The loan has not been taken out yet; the borrower needs to\\n            // provide collateral.\\n            revert(\\\"NFTPair: no collateral\\\");\\n        }\\n        tokenLoanParams[tokenId] = params;\\n        emit LogUpdateLoanParams(tokenId, params.valuation, params.duration, params.annualInterestBPS);\\n    }\\n\\n    function _requestLoan(\\n        address collateralProvider,\\n        uint256 tokenId,\\n        TokenLoanParams memory params,\\n        address to,\\n        bool skim\\n    ) private {\\n        // Edge case: valuation can be zero. That effectively gifts the NFT and\\n        // is therefore a bad idea, but does not break the contract.\\n        require(tokenLoan[tokenId].status == LOAN_INITIAL, \\\"NFTPair: loan exists\\\");\\n        if (skim) {\\n            require(collateral.ownerOf(tokenId) == address(this), \\\"NFTPair: skim failed\\\");\\n        } else {\\n            collateral.transferFrom(collateralProvider, address(this), tokenId);\\n        }\\n        TokenLoan memory loan;\\n        loan.borrower = to;\\n        loan.status = LOAN_REQUESTED;\\n        tokenLoan[tokenId] = loan;\\n        tokenLoanParams[tokenId] = params;\\n\\n        emit LogRequestLoan(to, tokenId, params.valuation, params.duration, params.annualInterestBPS);\\n    }\\n\\n    /// @notice Deposit an NFT as collateral and request a loan against it\\n    /// @param tokenId ID of the NFT\\n    /// @param to Address to receive the loan, or option to withdraw collateral\\n    /// @param params Loan conditions on offer\\n    /// @param skim True if the token has already been transfered\\n    function requestLoan(\\n        uint256 tokenId,\\n        TokenLoanParams memory params,\\n        address to,\\n        bool skim\\n    ) public {\\n        _requestLoan(msg.sender, tokenId, params, to, skim);\\n    }\\n\\n    /// @notice Removes `tokenId` as collateral and transfers it to `to`.\\n    /// @notice This destroys the loan.\\n    /// @param tokenId The token\\n    /// @param to The receiver of the token.\\n    function removeCollateral(uint256 tokenId, address to) public {\\n        TokenLoan memory loan = tokenLoan[tokenId];\\n        if (loan.status == LOAN_REQUESTED) {\\n            // We are withdrawing collateral that is not in use:\\n            require(msg.sender == loan.borrower, \\\"NFTPair: not the borrower\\\");\\n        } else if (loan.status == LOAN_OUTSTANDING) {\\n            // We are seizing collateral as the lender. The loan has to be\\n            // expired and not paid off:\\n            require(msg.sender == loan.lender, \\\"NFTPair: not the lender\\\");\\n            require(\\n                // Addition is safe: both summands are smaller than 256 bits\\n                uint256(loan.startTime) + tokenLoanParams[tokenId].duration <= block.timestamp,\\n                \\\"NFTPair: not expired\\\"\\n            );\\n        }\\n        // If there somehow is collateral but no accompanying loan, then anyone\\n        // can claim it by first requesting a loan with `skim` set to true, and\\n        // then withdrawing. So we might as well allow it here..\\n        delete tokenLoan[tokenId];\\n        collateral.transferFrom(address(this), to, tokenId);\\n        emit LogRemoveCollateral(tokenId, to);\\n    }\\n\\n    // Assumes the lender has agreed to the loan.\\n    function _lend(\\n        address lender,\\n        uint256 tokenId,\\n        TokenLoanParams memory accepted,\\n        bool skim\\n    ) internal {\\n        TokenLoan memory loan = tokenLoan[tokenId];\\n        require(loan.status == LOAN_REQUESTED, \\\"NFTPair: not available\\\");\\n        TokenLoanParams memory params = tokenLoanParams[tokenId];\\n\\n        // Valuation has to be an exact match, everything else must be at least\\n        // as good for the lender as `accepted`.\\n        require(\\n            params.valuation == accepted.valuation &&\\n                params.duration <= accepted.duration &&\\n                params.annualInterestBPS >= accepted.annualInterestBPS,\\n            \\\"NFTPair: bad params\\\"\\n        );\\n\\n        uint256 totalShare = bentoBox.toShare(asset, params.valuation, false);\\n        // No overflow: at most 128 + 16 bits (fits in BentoBox)\\n        uint256 openFeeShare = (totalShare * OPEN_FEE_BPS) / BPS;\\n        uint256 protocolFeeShare = (openFeeShare * PROTOCOL_FEE_BPS) / BPS;\\n\\n        if (skim) {\\n            require(\\n                bentoBox.balanceOf(asset, address(this)) >= (totalShare - openFeeShare + protocolFeeShare + feesEarnedShare),\\n                \\\"NFTPair: skim too much\\\"\\n            );\\n        } else {\\n            bentoBox.transfer(asset, lender, address(this), totalShare - openFeeShare + protocolFeeShare);\\n        }\\n        // No underflow: follows from OPEN_FEE_BPS <= BPS\\n        uint256 borrowerShare = totalShare - openFeeShare;\\n        bentoBox.transfer(asset, address(this), loan.borrower, borrowerShare);\\n        // No overflow: addends (and result) must fit in BentoBox\\n        feesEarnedShare += protocolFeeShare;\\n\\n        loan.lender = lender;\\n        loan.status = LOAN_OUTSTANDING;\\n        loan.startTime = uint64(block.timestamp); // Do not use in 12e10 years..\\n        tokenLoan[tokenId] = loan;\\n\\n        emit LogLend(lender, tokenId);\\n    }\\n\\n    /// @notice Lends with the parameters specified by the borrower.\\n    /// @param tokenId ID of the token that will function as collateral\\n    /// @param accepted Loan parameters as the lender saw them, for security\\n    /// @param skim True if the funds have been transfered to the contract\\n    function lend(\\n        uint256 tokenId,\\n        TokenLoanParams memory accepted,\\n        bool skim\\n    ) public {\\n        _lend(msg.sender, tokenId, accepted, skim);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparator();\\n    }\\n\\n    // NOTE on signature hashes: the domain separator only guarantees that the\\n    // chain ID and master contract are a match, so we explicitly include the\\n    // clone address (and the asset/collateral addresses):\\n\\n    // keccak256(\\\"Lend(address contract,uint256 tokenId,bool anyTokenId,uint128 valuation,uint64 duration,uint16 annualInterestBPS,uint256 nonce,uint256 deadline)\\\")\\n    bytes32 private constant LEND_SIGNATURE_HASH = 0x06bcca6f35b7c1b98f11abbb10957d273a681069ba90358de25404f49e2430f8;\\n\\n    // keccak256(\\\"Borrow(address contract,uint256 tokenId,uint128 valuation,uint64 duration,uint16 annualInterestBPS,uint256 nonce,uint256 deadline)\\\")\\n    bytes32 private constant BORROW_SIGNATURE_HASH = 0xf2c9128b0fb8406af3168320897e5ff08f3bb536dd5f804c29ed276e93ec4336;\\n\\n    /// @notice Request and immediately borrow from a pre-committed lender\\n\\n    /// @notice Caller provides collateral; loan can go to a different address.\\n    /// @param tokenId ID of the token that will function as collateral\\n    /// @param lender Lender, whose BentoBox balance the funds will come from\\n    /// @param recipient Address to receive the loan.\\n    /// @param params Loan parameters requested, and signed by the lender\\n    /// @param skimCollateral True if the collateral has already been transfered\\n    /// @param anyTokenId Set if lender agreed to any token. Must have tokenId 0 in signature.\\n    function requestAndBorrow(\\n        uint256 tokenId,\\n        address lender,\\n        address recipient,\\n        TokenLoanParams memory params,\\n        bool skimCollateral,\\n        bool anyTokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        if (v == 0 && r == bytes32(0) && s == bytes32(0)) {\\n            require(ILendingClub(lender).willLend(tokenId, params), \\\"NFTPair: LendingClub does not like you\\\");\\n        } else {\\n            require(block.timestamp <= deadline, \\\"NFTPair: signature expired\\\");\\n            uint256 nonce = nonces[lender]++;\\n            bytes32 dataHash = keccak256(\\n                abi.encode(\\n                    LEND_SIGNATURE_HASH,\\n                    address(this),\\n                    anyTokenId ? 0 : tokenId,\\n                    anyTokenId,\\n                    params.valuation,\\n                    params.duration,\\n                    params.annualInterestBPS,\\n                    nonce,\\n                    deadline\\n                )\\n            );\\n            require(ecrecover(_getDigest(dataHash), v, r, s) == lender, \\\"NFTPair: signature invalid\\\");\\n        }\\n        _requestLoan(msg.sender, tokenId, params, recipient, skimCollateral);\\n        _lend(lender, tokenId, params, false);\\n    }\\n\\n    /// @notice Take collateral from a pre-commited borrower and lend against it\\n    /// @notice Collateral must come from the borrower, not a third party.\\n    /// @param tokenId ID of the token that will function as collateral\\n    /// @param borrower Address that provides collateral and receives the loan\\n    /// @param params Loan terms offered, and signed by the borrower\\n    /// @param skimFunds True if the funds have been transfered to the contract\\n    function takeCollateralAndLend(\\n        uint256 tokenId,\\n        address borrower,\\n        TokenLoanParams memory params,\\n        bool skimFunds,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(block.timestamp <= deadline, \\\"NFTPair: signature expired\\\");\\n        uint256 nonce = nonces[borrower]++;\\n        bytes32 dataHash = keccak256(\\n            abi.encode(\\n                BORROW_SIGNATURE_HASH,\\n                address(this),\\n                tokenId,\\n                params.valuation,\\n                params.duration,\\n                params.annualInterestBPS,\\n                nonce,\\n                deadline\\n            )\\n        );\\n        require(ecrecover(_getDigest(dataHash), v, r, s) == borrower, \\\"NFTPair: signature invalid\\\");\\n        _requestLoan(borrower, tokenId, params, borrower, false);\\n        _lend(msg.sender, tokenId, params, skimFunds);\\n    }\\n\\n    /// Approximates continuous compounding. Uses Horner's method to evaluate\\n    /// the truncated Maclaurin series for exp - 1, accumulating rounding\\n    /// errors along the way. The following is always guaranteed:\\n    ///\\n    ///   principal * time * apr <= result <= principal * (e^(time * apr) - 1),\\n    ///\\n    /// where time = t/YEAR, up to at most the rounding error obtained in\\n    /// calculating linear interest.\\n    ///\\n    /// If the theoretical result that we are approximating (the rightmost part\\n    /// of the above inquality) fits in 128 bits, then the function is\\n    /// guaranteed not to revert (unless n > 250, which is way too high).\\n    /// If even the linear interest (leftmost part of the inequality) does not\\n    /// the function will revert.\\n    /// Otherwise, the function may revert, return a reasonable result, or\\n    /// return a very inaccurate result. Even then the above inequality is\\n    /// respected.\\n    function calculateInterest(\\n        uint256 principal,\\n        uint64 t,\\n        uint16 aprBPS\\n    ) public pure returns (uint256 interest) {\\n        // (NOTE: n is hardcoded as COMPOUND_INTEREST_TERMS)\\n        //\\n        // We calculate\\n        //\\n        //  ----- n                                       ----- n\\n        //   \\\\           principal * (t * aprBPS)^k        \\\\\\n        //    )          --------------------------   =:    )          term_k\\n        //   /                k! * YEAR_BPS^k              /\\n        //  ----- k = 1                                   ----- k = 1\\n        //\\n        // which approaches, but never exceeds the \\\"theoretical\\\" result,\\n        //\\n        //          M := principal * [ exp (t * aprBPS / YEAR_BPS) - 1\\n        //\\n        // as n goes to infinity. We use the fact that\\n        //\\n        //               principal * (t * aprBPS)^(k-1) * (t * aprBPS)\\n        //      term_k = ---------------------------------------------\\n        //                  (k-1)! * k * YEAR_BPS^(k-1) * YEAR_BPS\\n        //\\n        //                             t * aprBPS\\n        //             = term_{k-1} * ------------                          (*)\\n        //                            k * YEAR_BPS\\n        //\\n        // to calculate the terms one by one. The principal affords us the\\n        // precision to carry out the division without resorting to fixed-point\\n        // math. Any rounding error is downward, which we consider acceptable.\\n        //\\n        // Since all numbers involved are positive, each term is certainly\\n        // bounded above by M. From (*) we see that any intermediate results\\n        // are at most\\n        //\\n        //                      denom_k := k * YEAR_BPS.\\n        //\\n        // times M. Since YEAR_BPS fits in 38 bits, denom_k fits in 46 bits,\\n        // which proves that all calculations will certainly not overflow if M\\n        // fits in 128 bits.\\n        //\\n        // If M does not fit, then the intermediate results for some term may\\n        // eventually overflow, but this cannot happen at the first term, and\\n        // neither can the total overflow because it uses checked math.\\n        //\\n        // This constitutes a guarantee of specified behavior when M >= 2^128.\\n        uint256 x = uint256(t) * aprBPS;\\n        uint256 term_k = (principal * x) / YEAR_BPS;\\n        uint256 denom_k = YEAR_BPS;\\n\\n        interest = term_k;\\n        for (uint256 k = 2; k <= COMPOUND_INTEREST_TERMS; k++) {\\n            denom_k += YEAR_BPS;\\n            term_k = (term_k * x) / denom_k;\\n            interest = interest.add(term_k); // <- Only overflow check we need\\n        }\\n\\n        if (interest >= 2**128) {\\n            revert();\\n        }\\n    }\\n\\n    function repay(uint256 tokenId, bool skim) public returns (uint256 amount) {\\n        TokenLoan memory loan = tokenLoan[tokenId];\\n        require(loan.status == LOAN_OUTSTANDING, \\\"NFTPair: no loan\\\");\\n        TokenLoanParams memory loanParams = tokenLoanParams[tokenId];\\n        require(\\n            // Addition is safe: both summands are smaller than 256 bits\\n            uint256(loan.startTime) + loanParams.duration > block.timestamp,\\n            \\\"NFTPair: loan expired\\\"\\n        );\\n\\n        uint128 principal = loanParams.valuation;\\n\\n        // No underflow: loan.startTime is only ever set to a block timestamp\\n        // Cast is safe: if this overflows, then all loans have expired anyway\\n        uint256 interest = calculateInterest(principal, uint64(block.timestamp - loan.startTime), loanParams.annualInterestBPS).to128();\\n        uint256 fee = (interest * PROTOCOL_FEE_BPS) / BPS;\\n        amount = principal + interest;\\n\\n        uint256 totalShare = bentoBox.toShare(asset, amount, false);\\n        uint256 feeShare = bentoBox.toShare(asset, fee, false);\\n\\n        address from;\\n        if (skim) {\\n            require(bentoBox.balanceOf(asset, address(this)) >= (totalShare + feesEarnedShare), \\\"NFTPair: skim too much\\\");\\n            from = address(this);\\n            // No overflow: result fits in BentoBox\\n        } else {\\n            bentoBox.transfer(asset, msg.sender, address(this), feeShare);\\n            from = msg.sender;\\n        }\\n        // No underflow: PROTOCOL_FEE_BPS < BPS by construction.\\n        feesEarnedShare += feeShare;\\n        delete tokenLoan[tokenId];\\n\\n        bentoBox.transfer(asset, from, loan.lender, totalShare - feeShare);\\n        collateral.transferFrom(address(this), loan.borrower, tokenId);\\n\\n        emit LogRepay(from, tokenId);\\n    }\\n\\n    uint8 internal constant ACTION_REPAY = 2;\\n    uint8 internal constant ACTION_REMOVE_COLLATERAL = 4;\\n\\n    uint8 internal constant ACTION_REQUEST_LOAN = 12;\\n    uint8 internal constant ACTION_LEND = 13;\\n\\n    // Function on BentoBox\\n    uint8 internal constant ACTION_BENTO_DEPOSIT = 20;\\n    uint8 internal constant ACTION_BENTO_WITHDRAW = 21;\\n    uint8 internal constant ACTION_BENTO_TRANSFER = 22;\\n    uint8 internal constant ACTION_BENTO_TRANSFER_MULTIPLE = 23;\\n    uint8 internal constant ACTION_BENTO_SETAPPROVAL = 24;\\n\\n    // Any external call (except to BentoBox)\\n    uint8 internal constant ACTION_CALL = 30;\\n\\n    // Signed requests\\n    uint8 internal constant ACTION_REQUEST_AND_BORROW = 40;\\n    uint8 internal constant ACTION_TAKE_COLLATERAL_AND_LEND = 41;\\n\\n    int256 internal constant USE_VALUE1 = -1;\\n    int256 internal constant USE_VALUE2 = -2;\\n\\n    /// @dev Helper function for choosing the correct value (`value1` or `value2`) depending on `inNum`.\\n    function _num(\\n        int256 inNum,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal pure returns (uint256 outNum) {\\n        outNum = inNum >= 0 ? uint256(inNum) : (inNum == USE_VALUE1 ? value1 : value2);\\n    }\\n\\n    /// @dev Helper function for depositing into `bentoBox`.\\n    function _bentoDeposit(\\n        bytes memory data,\\n        uint256 value,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (uint256, uint256) {\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\n        amount = int256(_num(amount, value1, value2)); // Done this way to avoid stack too deep errors\\n        share = int256(_num(share, value1, value2));\\n        return bentoBox.deposit{value: value}(token, msg.sender, to, uint256(amount), uint256(share));\\n    }\\n\\n    /// @dev Helper function to withdraw from the `bentoBox`.\\n    function _bentoWithdraw(\\n        bytes memory data,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (uint256, uint256) {\\n        (IERC20 token, address to, int256 amount, int256 share) = abi.decode(data, (IERC20, address, int256, int256));\\n        return bentoBox.withdraw(token, msg.sender, to, _num(amount, value1, value2), _num(share, value1, value2));\\n    }\\n\\n    /// @dev Helper function to perform a contract call and eventually extracting revert messages on failure.\\n    /// Calls to `bentoBox` or `collateral` are not allowed for security reasons.\\n    /// This also means that calls made from this contract shall *not* be trusted.\\n    function _call(\\n        uint256 value,\\n        bytes memory data,\\n        uint256 value1,\\n        uint256 value2\\n    ) internal returns (bytes memory, uint8) {\\n        (address callee, bytes memory callData, bool useValue1, bool useValue2, uint8 returnValues) = abi.decode(\\n            data,\\n            (address, bytes, bool, bool, uint8)\\n        );\\n\\n        if (useValue1 && !useValue2) {\\n            callData = abi.encodePacked(callData, value1);\\n        } else if (!useValue1 && useValue2) {\\n            callData = abi.encodePacked(callData, value2);\\n        } else if (useValue1 && useValue2) {\\n            callData = abi.encodePacked(callData, value1, value2);\\n        }\\n\\n        require(callee != address(bentoBox) && callee != address(collateral) && callee != address(this), \\\"NFTPair: can't call\\\");\\n\\n        (bool success, bytes memory returnData) = callee.call{value: value}(callData);\\n        require(success, \\\"NFTPair: call failed\\\");\\n        return (returnData, returnValues);\\n    }\\n\\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. ETH amounts to send along with the actions.\\n    /// Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    /// @return value1 May contain the first positioned return value of the last executed action (if applicable).\\n    /// @return value2 May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\\n    function cook(\\n        uint8[] calldata actions,\\n        uint256[] calldata values,\\n        bytes[] calldata datas\\n    ) external payable returns (uint256 value1, uint256 value2) {\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            uint8 action = actions[i];\\n            if (action == ACTION_REPAY) {\\n                (uint256 tokenId, bool skim) = abi.decode(datas[i], (uint256, bool));\\n                repay(tokenId, skim);\\n            } else if (action == ACTION_REMOVE_COLLATERAL) {\\n                (uint256 tokenId, address to) = abi.decode(datas[i], (uint256, address));\\n                removeCollateral(tokenId, to);\\n            } else if (action == ACTION_REQUEST_LOAN) {\\n                (uint256 tokenId, TokenLoanParams memory params, address to, bool skim) = abi.decode(\\n                    datas[i],\\n                    (uint256, TokenLoanParams, address, bool)\\n                );\\n                requestLoan(tokenId, params, to, skim);\\n            } else if (action == ACTION_LEND) {\\n                (uint256 tokenId, TokenLoanParams memory params, bool skim) = abi.decode(datas[i], (uint256, TokenLoanParams, bool));\\n                lend(tokenId, params, skim);\\n            } else if (action == ACTION_BENTO_SETAPPROVAL) {\\n                (address user, address _masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) = abi.decode(\\n                    datas[i],\\n                    (address, address, bool, uint8, bytes32, bytes32)\\n                );\\n                bentoBox.setMasterContractApproval(user, _masterContract, approved, v, r, s);\\n            } else if (action == ACTION_BENTO_DEPOSIT) {\\n                (value1, value2) = _bentoDeposit(datas[i], values[i], value1, value2);\\n            } else if (action == ACTION_BENTO_WITHDRAW) {\\n                (value1, value2) = _bentoWithdraw(datas[i], value1, value2);\\n            } else if (action == ACTION_BENTO_TRANSFER) {\\n                (IERC20 token, address to, int256 share) = abi.decode(datas[i], (IERC20, address, int256));\\n                bentoBox.transfer(token, msg.sender, to, _num(share, value1, value2));\\n            } else if (action == ACTION_BENTO_TRANSFER_MULTIPLE) {\\n                (IERC20 token, address[] memory tos, uint256[] memory shares) = abi.decode(datas[i], (IERC20, address[], uint256[]));\\n                bentoBox.transferMultiple(token, msg.sender, tos, shares);\\n            } else if (action == ACTION_CALL) {\\n                (bytes memory returnData, uint8 returnValues) = _call(values[i], datas[i], value1, value2);\\n\\n                if (returnValues == 1) {\\n                    (value1) = abi.decode(returnData, (uint256));\\n                } else if (returnValues == 2) {\\n                    (value1, value2) = abi.decode(returnData, (uint256, uint256));\\n                }\\n            } else if (action == ACTION_REQUEST_AND_BORROW) {\\n                (\\n                    uint256 tokenId,\\n                    address lender,\\n                    address recipient,\\n                    TokenLoanParams memory params,\\n                    bool skimCollateral,\\n                    bool anyTokenId,\\n                    uint256 deadline,\\n                    uint8 v,\\n                    bytes32 r,\\n                    bytes32 s\\n                ) = abi.decode(datas[i], (uint256, address, address, TokenLoanParams, bool, bool, uint256, uint8, bytes32, bytes32));\\n                requestAndBorrow(tokenId, lender, recipient, params, skimCollateral, anyTokenId, deadline, v, r, s);\\n            } else if (action == ACTION_TAKE_COLLATERAL_AND_LEND) {\\n                (\\n                    uint256 tokenId,\\n                    address borrower,\\n                    TokenLoanParams memory params,\\n                    bool skimFunds,\\n                    uint256 deadline,\\n                    uint8 v,\\n                    bytes32 r,\\n                    bytes32 s\\n                ) = abi.decode(datas[i], (uint256, address, TokenLoanParams, bool, uint256, uint8, bytes32, bytes32));\\n                takeCollateralAndLend(tokenId, borrower, params, skimFunds, deadline, v, r, s);\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraws the fees accumulated.\\n    function withdrawFees() public {\\n        address to = masterContract.feeTo();\\n\\n        uint256 _share = feesEarnedShare;\\n        if (_share > 0) {\\n            bentoBox.transfer(asset, address(this), to, _share);\\n            feesEarnedShare = 0;\\n        }\\n\\n        emit LogWithdrawFees(to, _share);\\n    }\\n\\n    /// @notice Sets the beneficiary of fees accrued in liquidations.\\n    /// MasterContract Only Admin function.\\n    /// @param newFeeTo The address of the receiver.\\n    function setFeeTo(address newFeeTo) public onlyOwner {\\n        feeTo = newFeeTo;\\n        emit LogFeeTo(newFeeTo);\\n    }\\n}\\n\",\"keccak256\":\"0x0ef8c4053359fb2e8ab4a574552bd5560cff87933780d76b4aeecc1d645bf22a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from OpenZeppelin contracts v3\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x568574015c35b45a03f3bc3857240fb9985380d3faa3df7207123620d48ffe13\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from OpenZeppelin contracts v3\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x0bfe878a4a6ddcdba3d5b53a21e76bcb84bc77a114fbd432a5533bda12f155fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162003fdf38038062003fdf8339810160408190526200003591620000fd565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a34660a08190526200008581620000a7565b608052506001600160601b0319606091821b1660c05230901b60e0526200014c565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188230604051602001620000e0939291906200012d565b604051602081830303815290604052805190602001209050919050565b6000602082840312156200010f578081fd5b81516001600160a01b038116811462000126578182fd5b9392505050565b92835260208301919091526001600160a01b0316604082015260600190565b60805160a05160c05160601c60e05160601c613e02620001dd600039806108ba5280611b825250806109705280610d115280610ed95280610fb152806111d7528061160352806116af5280611764528061182b52806118f35280611f115280611fed528061219c52806126fc52806127c5528061288a528061291d525080611e75525080611eaa5250613e026000f3fe6080604052600436106101815760003560e01c806379921557116100d1578063cd446e221161008a578063e30c397811610064578063e30c397814610410578063e7cf3f8614610425578063f41f5e1e14610445578063f46901ed1461046557610181565b8063cd446e22146103c6578063d41ddc96146103db578063d8dfeb45146103fb57610181565b806379921557146103015780637ecebe00146103215780638bea2242146103415780638da5cb5b14610371578063ba0b362314610386578063c9878e45146103a657610181565b80633644e5151161013e5780634ddf47d4116101185780634ddf47d4146102a35780634e71e0c8146102b6578063656f3d64146102cb5780636b2ace87146102ec57610181565b80633644e5151461026457806338d52e0f14610279578063476343ee1461028e57610181565b8063017e7e5814610186578063078dfbe7146101b1578063114c2cda146101d35780631329b682146102005780631b65fe041461021557806321fa310014610235575b600080fd5b34801561019257600080fd5b5061019b610485565b6040516101a89190613491565b60405180910390f35b3480156101bd57600080fd5b506101d16101cc366004612e46565b610494565b005b3480156101df57600080fd5b506101f36101ee3660046133da565b610583565b6040516101a89190613536565b34801561020c57600080fd5b506101f36105f4565b34801561022157600080fd5b506101d1610230366004613305565b6105fa565b34801561024157600080fd5b5061025561025036600461313f565b61085f565b6040516101a893929190613c44565b34801561027057600080fd5b506101f3610898565b34801561028557600080fd5b5061019b6108a7565b34801561029a57600080fd5b506101d16108b6565b6101d16102b1366004612f41565b610a28565b3480156102c257600080fd5b506101d1610aaf565b6102de6102d9366004612e90565b610b3c565b6040516101a8929190613caf565b3480156102f857600080fd5b5061019b6111d5565b34801561030d57600080fd5b506101d161031c3660046132c2565b6111f9565b34801561032d57600080fd5b506101f361033c366004612cc5565b61141a565b34801561034d57600080fd5b5061036161035c36600461313f565b61142c565b6040516101a89493929190613502565b34801561037d57600080fd5b5061019b61146f565b34801561039257600080fd5b506101f36103a13660046132e1565b61147e565b3480156103b257600080fd5b506101d16103c136600461323f565b611a1f565b3480156103d257600080fd5b5061019b611b80565b3480156103e757600080fd5b506101d16103f636600461316f565b611ba4565b34801561040757600080fd5b5061019b611d96565b34801561041c57600080fd5b5061019b611da5565b34801561043157600080fd5b506101d1610440366004613331565b611db4565b34801561045157600080fd5b506101d1610460366004613382565b611dc7565b34801561047157600080fd5b506101d1610480366004612cc5565b611dd3565b6002546001600160a01b031681565b6000546001600160a01b031633146104c75760405162461bcd60e51b81526004016104be906139ea565b60405180910390fd5b8115610562576001600160a01b0383161515806104e15750805b6104fd5760405162461bcd60e51b81526004016104be90613845565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b03199182161790915560018054909116905561057e565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b64496cebb80061ffff82166001600160401b0384160284810282900491829060025b600681116105d95764496cebb8008201915081848402816105c257fe5b0492506105cf8584611e47565b94506001016105a5565b50600160801b84106105ea57600080fd5b5050509392505050565b60055481565b610602612b50565b50600082815260076020908152604091829020825160808101845281546001600160a01b03908116825260019092015491821692810192909252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1660608201819052600214156107605780602001516001600160a01b0316336001600160a01b0316146106a25760405162461bcd60e51b81526004016104be90613ba8565b6106aa612b77565b50600083815260066020908152604091829020825160608101845290546001600160801b0381168252600160801b81046001600160401b03908116838501819052600160c01b90920461ffff169483019490945291850151909216108015906107225750805183516001600160801b03918216911611155b801561073e5750806040015161ffff16836040015161ffff1611155b61075a5760405162461bcd60e51b81526004016104be90613816565b506107b6565b606081015160ff166001141561079e5780516001600160a01b031633146107995760405162461bcd60e51b81526004016104be90613ab1565b6107b6565b60405162461bcd60e51b81526004016104be90613b4a565b6000838152600660209081526040918290208451815492860151868501516001600160801b03199094166001600160801b0383161767ffffffffffffffff60801b1916600160801b6001600160401b038316021761ffff60c01b1916600160c01b61ffff86160217909255925186937fdf52f3c0981f49c8b074bb6c4ebdc7f4cdaf7ff212ac032edec0684a9cfa73ef93610852939192613c44565b60405180910390a2505050565b6006602052600090815260409020546001600160801b03811690600160801b81046001600160401b031690600160c01b900461ffff1683565b60006108a2611e70565b905090565b6004546001600160a01b031681565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561091157600080fd5b505afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190612ce8565b60055490915080156109e35760048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc936109ab9392169130918891889101613649565b600060405180830381600087803b1580156109c557600080fd5b505af11580156109d9573d6000803e3d6000fd5b5050600060055550505b816001600160a01b03167fbe641c3ffc44b2d6c184f023fa4ed7bda4b6ffa71e03b3c98ae0c776da1f17e782604051610a1c9190613536565b60405180910390a25050565b6003546001600160a01b031615610a515760405162461bcd60e51b81526004016104be90613ae8565b610a5d81830183613107565b600480546001600160a01b03199081166001600160a01b039384161790915560038054909116928216929092179182905516610aab5760405162461bcd60e51b81526004016104be90613b1f565b5050565b6001546001600160a01b0316338114610ada5760405162461bcd60e51b81526004016104be90613a4c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b60008060005b878110156111c9576000898983818110610b5857fe5b9050602002016020810190610b6d9190613410565b905060ff811660021415610bbf57600080878785818110610b8a57fe5b9050602002810190610b9c9190613cbd565b810190610ba991906132e1565b91509150610bb7828261147e565b5050506111c0565b60ff811660041415610c0e57600080878785818110610bda57fe5b9050602002810190610bec9190613cbd565b810190610bf9919061316f565b91509150610c078282611ba4565b50506111c0565b60ff8116600c1415610c6f576000610c24612b77565b600080898987818110610c3357fe5b9050602002810190610c459190613cbd565b810190610c529190613331565b9350935093509350610c6684848484611db4565b505050506111c0565b60ff8116600d1415610cc3576000610c85612b77565b6000888886818110610c9357fe5b9050602002810190610ca59190613cbd565b810190610cb29190613382565b925092509250610bb7838383611dc7565b60ff811660181415610da2576000806000806000808b8b89818110610ce457fe5b9050602002810190610cf69190613cbd565b810190610d039190612d04565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0a47c938787878787876040518763ffffffff1660e01b8152600401610d65969594939291906134a5565b600060405180830381600087803b158015610d7f57600080fd5b505af1158015610d93573d6000803e3d6000fd5b505050505050505050506111c0565b60ff811660141415610e2a57610e20868684818110610dbd57fe5b9050602002810190610dcf9190613cbd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b9150869050818110610e1257fe5b905060200201358686611ed0565b90945092506111c0565b60ff811660151415610e9557610e20868684818110610e4557fe5b9050602002810190610e579190613cbd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250879150611fc69050565b60ff811660161415610f6d576000806000888886818110610eb257fe5b9050602002810190610ec49190613cbd565b810190610ed19190612fad565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc843385610f14868d8d6120b4565b6040518563ffffffff1660e01b8152600401610f339493929190613649565b600060405180830381600087803b158015610f4d57600080fd5b505af1158015610f61573d6000803e3d6000fd5b505050505050506111c0565b60ff811660171415611001576000606080888886818110610f8a57fe5b9050602002810190610f9c9190613cbd565b810190610fa99190613034565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630fca8843843385856040518563ffffffff1660e01b8152600401610f3394939291906136a7565b60ff8116601e14156110da57606060006110838a8a8681811061102057fe5b9050602002013589898781811061103357fe5b90506020028101906110459190613cbd565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a91506120de9050565b915091508060ff16600114156110ae57818060200190518101906110a79190613157565b9550610c07565b8060ff1660021415610c0757818060200190518101906110ce91906133b7565b909650945050506111c0565b60ff81166028141561114d5760008060006110f3612b77565b6000806000806000808f8f8d81811061110857fe5b905060200281019061111a9190613cbd565b8101906111279190613193565b9950995099509950995099509950995099509950610d938a8a8a8a8a8a8a8a8a8a6111f9565b60ff8116602914156111c057600080611164612b77565b60008060008060008d8d8b81811061117857fe5b905060200281019061118a9190613cbd565b810190611197919061323f565b975097509750975097509750975097506111b78888888888888888611a1f565b50505050505050505b50600101610b42565b50965096945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60ff8316158015611208575081155b8015611212575080155b156112b657604051630960450960e11b81526001600160a01b038a16906312c08a1290611245908d908b90600401613c72565b60206040518083038186803b15801561125d57600080fd5b505afa158015611271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112959190612f25565b6112b15760405162461bcd60e51b81526004016104be906139a4565b6113f4565b834211156112d65760405162461bcd60e51b81526004016104be90613874565b6001600160a01b0389166000908152600860205260408120805460018101909155907f06bcca6f35b7c1b98f11abbb10957d273a681069ba90358de25404f49e2430f83088611325578d611328565b60005b898c600001518d602001518e60400151888d6040516020016113529998979695949392919061353f565b6040516020818303038152906040528051906020012090508a6001600160a01b0316600161137f836122ae565b8787876040516000815260200160405260405161139f9493929190613611565b6020604051602081039080840390855afa1580156113c1573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146113f15760405162461bcd60e51b81526004016104be90613c0d565b50505b611401338b898b8a612303565b61140e898b896000612593565b50505050505050505050565b60086020526000908152604090205481565b600760205260009081526040902080546001909101546001600160a01b0391821691811690600160a01b81046001600160401b031690600160e01b900460ff1684565b6000546001600160a01b031681565b6000611488612b50565b50600083815260076020908152604091829020825160808101845281546001600160a01b03908116825260019092015491821692810192909252600160a01b81046001600160401b031692820192909252600160e01b90910460ff166060820181905260021461150a5760405162461bcd60e51b81526004016104be9061378f565b611512612b77565b50600084815260066020908152604091829020825160608101845290546001600160801b0381168252600160801b81046001600160401b03908116938301849052600160c01b90910461ffff16828501529284015190924291169091011161158c5760405162461bcd60e51b81526004016104be90613910565b60008160000151905060006115c66115c1836001600160801b031686604001516001600160401b031642038660400151610583565b612aec565b60048054604051636d289ce560e11b81526001600160801b03938416938616840198509293506127106103e8850204926000926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363da5139ca9361163e9392909116918c9187910161376c565b60206040518083038186803b15801561165657600080fd5b505afa15801561166a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168e9190613157565b60048054604051636d289ce560e11b81529293506000926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363da5139ca936116e893921691889187910161376c565b60206040518083038186803b15801561170057600080fd5b505afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117389190613157565b9050600089156118105760055460048054604051633de222bb60e21b8152928601926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f7888aec9361179b9392169130910161362f565b60206040518083038186803b1580156117b357600080fd5b505afa1580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117eb9190613157565b10156118095760405162461bcd60e51b81526004016104be90613a81565b503061189c565b60048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc936118669392169133913091899101613649565b600060405180830381600087803b15801561188057600080fd5b505af1158015611894573d6000803e3d6000fd5b505050503390505b600580548301905560008b81526007602090815260409182902080546001600160a01b031916815560010180546001600160e81b031916905560048054918b01519251633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463f18d03cc9461192e949216928792898b039101613649565b600060405180830381600087803b15801561194857600080fd5b505af115801561195c573d6000803e3d6000fd5b50505050600360009054906101000a90046001600160a01b03166001600160a01b03166323b872dd308a600001518e6040518463ffffffff1660e01b81526004016119a9939291906134de565b600060405180830381600087803b1580156119c357600080fd5b505af11580156119d7573d6000803e3d6000fd5b50506040518d92506001600160a01b03841691507fcd300581542c5eab58e736a0b08b42cec829c4504d1c16af90f4630b27e30de390600090a3505050505050505092915050565b83421115611a3f5760405162461bcd60e51b81526004016104be90613874565b600060086000896001600160a01b03166001600160a01b03168152602001908152602001600020600081548092919060010191905055905060007ff2c9128b0fb8406af3168320897e5ff08f3bb536dd5f804c29ed276e93ec433660001b308b8a600001518b602001518c60400151878c604051602001611ac798979695949392919061359d565b604051602081830303815290604052805190602001209050886001600160a01b03166001611af4836122ae565b87878760405160008152602001604052604051611b149493929190613611565b6020604051602081039080840390855afa158015611b36573d6000803e3d6000fd5b505050602060405103516001600160a01b031614611b665760405162461bcd60e51b81526004016104be90613c0d565b611b74898b8a8c6000612303565b61140e338b8a8a612593565b7f000000000000000000000000000000000000000000000000000000000000000081565b611bac612b50565b50600082815260076020908152604091829020825160808101845281546001600160a01b03908116825260019283015490811693820193909352600160a01b83046001600160401b031693810193909352600160e01b90910460ff16606083018190521415611c435780516001600160a01b03163314611c3e5760405162461bcd60e51b81526004016104be90613ab1565b611cd2565b606081015160ff1660021415611cd25780602001516001600160a01b0316336001600160a01b031614611c885760405162461bcd60e51b81526004016104be90613ba8565b60008381526006602052604090819020549082015142600160801b9092046001600160401b039081169116011115611cd25760405162461bcd60e51b81526004016104be90613bdf565b6000838152600760205260409081902080546001600160a01b031916815560010180546001600160e81b031916905560035490516323b872dd60e01b81526001600160a01b03909116906323b872dd90611d34903090869088906004016134de565b600060405180830381600087803b158015611d4e57600080fd5b505af1158015611d62573d6000803e3d6000fd5b50505050827f279c10f9827cdddd314534dd33cb906c270c3ac21cdd72ed94a1d534aca5a25a836040516108529190613491565b6003546001600160a01b031681565b6001546001600160a01b031681565b611dc13385858585612303565b50505050565b61057e33848484612593565b6000546001600160a01b03163314611dfd5760405162461bcd60e51b81526004016104be906139ea565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fcf1d3f17e521c635e0d20b8acba94ba170afc041d0546d46dafa09d3c9c19eb390600090a250565b81810181811015611e6a5760405162461bcd60e51b81526004016104be9061393f565b92915050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114611ea857611ea381612b19565b611eca565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60008060008060008089806020019051810190611eed9190612fed565b9350935093509350611f008289896120b4565b9150611f0d8189896120b4565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c8a86338787876040518763ffffffff1660e01b8152600401611f64959493929190613673565b60408051808303818588803b158015611f7c57600080fd5b505af1158015611f90573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611fb591906133b7565b955095505050505094509492505050565b60008060008060008088806020019051810190611fe39190612fed565b93509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166397da6d30853386612028878e8e6120b4565b612033878f8f6120b4565b6040518663ffffffff1660e01b8152600401612053959493929190613673565b6040805180830381600087803b15801561206c57600080fd5b505af1158015612080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a491906133b7565b9550955050505050935093915050565b6000808412156120d45760001984146120cd57816120cf565b825b6120d6565b835b949350505050565b606060008060606000806000898060200190518101906120fe9190612d71565b94509450945094509450828015612113575081155b1561214157838960405160200161212b929190613448565b604051602081830303815290604052935061219a565b8215801561214c5750815b1561216457838860405160200161212b929190613448565b82801561216e5750815b1561219a578389896040516020016121889392919061346a565b60405160208183030381529060405293505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316141580156121ea57506003546001600160a01b03868116911614155b80156121ff57506001600160a01b0385163014155b61221b5760405162461bcd60e51b81526004016104be90613a1f565b60006060866001600160a01b03168d87604051612238919061342c565b60006040518083038185875af1925050503d8060008114612275576040519150601f19603f3d011682016040523d82523d6000602084013e61227a565b606091505b50915091508161229c5760405162461bcd60e51b81526004016104be906138ab565b9c919b50909950505050505050505050565b600060405180604001604052806002815260200161190160f01b8152506122d3611e70565b836040516020016122e69392919061346a565b604051602081830303815290604052805190602001209050919050565b600084815260076020526040902060010154600160e01b900460ff161561233c5760405162461bcd60e51b81526004016104be90613976565b80156123ed576003546040516331a9108f60e11b815230916001600160a01b031690636352211e90612372908890600401613536565b60206040518083038186803b15801561238a57600080fd5b505afa15801561239e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c29190612ce8565b6001600160a01b0316146123e85760405162461bcd60e51b81526004016104be90613b7a565b612454565b6003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90612421908890309089906004016134de565b600060405180830381600087803b15801561243b57600080fd5b505af115801561244f573d6000803e3d6000fd5b505050505b61245c612b50565b6001600160a01b038381168083526001606084018181526000898152600760209081526040808320885181546001600160a01b0319908116918a16919091178255838a0151919096018054838b015196519716919098161767ffffffffffffffff60a01b1916600160a01b6001600160401b03958616021760ff60e01b1916600160e01b60ff90961695909502949094179095556006855282902088518154958a01518a8501516001600160801b03199097166001600160801b0383161767ffffffffffffffff60801b1916600160801b948216949094029390931761ffff60c01b1916600160c01b61ffff88160217909155915189947f37067dab1c05118bd00db86de14fcd009c2a6109392037ade66d33f8f6bcd17393612583939092909190613c44565b60405180910390a3505050505050565b61259b612b50565b50600083815260076020908152604091829020825160808101845281546001600160a01b03908116825260019283015490811693820193909352600160a01b83046001600160401b031693810193909352600160e01b90910460ff16606083018190521461261b5760405162461bcd60e51b81526004016104be906137b9565b612623612b77565b50600084815260066020908152604091829020825160608101845290546001600160801b03808216808452600160801b83046001600160401b031694840194909452600160c01b90910461ffff169382019390935285519092161480156126a4575083602001516001600160401b031681602001516001600160401b031611155b80156126c05750836040015161ffff16816040015161ffff1610155b6126dc5760405162461bcd60e51b81526004016104be906137e9565b600480548251604051636d289ce560e11b81526000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463da5139ca94612735949190921692879101613740565b60206040518083038186803b15801561274d57600080fd5b505afa158015612761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127859190613157565b905061271060648202819004906103e8820204851561286f5760055460048054604051633de222bb60e21b81528587038501909301926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f7888aec936127fc9392169130910161362f565b60206040518083038186803b15801561281457600080fd5b505afa158015612828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284c9190613157565b101561286a5760405162461bcd60e51b81526004016104be90613a81565b6128fc565b60048054604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363f18d03cc936128c9939216918e913091898b0389019101613649565b600060405180830381600087803b1580156128e357600080fd5b505af11580156128f7573d6000803e3d6000fd5b505050505b600480548651604051633c6340f360e21b8152858703936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463f18d03cc94612959949190921692309291889101613649565b600060405180830381600087803b15801561297357600080fd5b505af1158015612987573d6000803e3d6000fd5b50505050816005600082825401925050819055508986602001906001600160a01b031690816001600160a01b0316815250506002866060019060ff16908160ff16815250504286604001906001600160401b031690816001600160401b03168152505085600760008b815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a8154816001600160401b0302191690836001600160401b03160217905550606082015181600101601c6101000a81548160ff021916908360ff160217905550905050888a6001600160a01b03167ff0742e8f1b967b4a34ebd6094f10a23dd802856a1591ee09b37c06df665ec18e60405160405180910390a350505050505050505050565b60006001600160801b03821115612b155760405162461bcd60e51b81526004016104be906138d9565b5090565b60007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a7946921882306040516020016122e6939291906135f2565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b60008083601f840112612ba8578182fd5b5081356001600160401b03811115612bbe578182fd5b6020830191508360208083028501011115612bd857600080fd5b9250929050565b600082601f830112612bef578081fd5b8135612c02612bfd82613d27565b613d01565b818152915060208083019084810181840286018201871015612c2357600080fd5b60005b84811015612c4257813584529282019290820190600101612c26565b505050505092915050565b8051611e6a81613d8a565b600060608284031215612c69578081fd5b612c736060613d01565b905081356001600160801b0381168114612c8c57600080fd5b81526020820135612c9c81613da8565b60208201526040820135612caf81613d98565b604082015292915050565b8051611e6a81613dbd565b600060208284031215612cd6578081fd5b8135612ce181613d72565b9392505050565b600060208284031215612cf9578081fd5b8151612ce181613d72565b60008060008060008060c08789031215612d1c578182fd5b8635612d2781613d72565b95506020870135612d3781613d72565b94506040870135612d4781613d8a565b93506060870135612d5781613dbd565b9598949750929560808101359460a0909101359350915050565b600080600080600060a08688031215612d88578283fd5b8551612d9381613d72565b60208701519095506001600160401b0380821115612daf578485fd5b818801915088601f830112612dc2578485fd5b815181811115612dd0578586fd5b612de3601f8201601f1916602001613d01565b9150808252896020828501011115612df9578586fd5b612e0a816020840160208601613d46565b509450612e1c90508760408801612c4d565b9250612e2b8760608801612c4d565b9150612e3a8760808801612cba565b90509295509295909350565b600080600060608486031215612e5a578081fd5b8335612e6581613d72565b92506020840135612e7581613d8a565b91506040840135612e8581613d8a565b809150509250925092565b60008060008060008060608789031215612ea8578384fd5b86356001600160401b0380821115612ebe578586fd5b612eca8a838b01612b97565b90985096506020890135915080821115612ee2578586fd5b612eee8a838b01612b97565b90965094506040890135915080821115612f06578384fd5b50612f1389828a01612b97565b979a9699509497509295939492505050565b600060208284031215612f36578081fd5b8151612ce181613d8a565b60008060208385031215612f53578182fd5b82356001600160401b0380821115612f69578384fd5b818501915085601f830112612f7c578384fd5b813581811115612f8a578485fd5b866020828501011115612f9b578485fd5b60209290920196919550909350505050565b600080600060608486031215612fc1578081fd5b8335612fcc81613d72565b92506020840135612fdc81613d72565b929592945050506040919091013590565b60008060008060808587031215613002578182fd5b845161300d81613d72565b602086015190945061301e81613d72565b6040860151606090960151949790965092505050565b600080600060608486031215613048578081fd5b833561305381613d72565b92506020848101356001600160401b038082111561306f578384fd5b818701915087601f830112613082578384fd5b8135613090612bfd82613d27565b81815284810190848601868402860187018c10156130ac578788fd5b8795505b838610156130d75780356130c381613d72565b8352600195909501949186019186016130b0565b509650505060408701359250808311156130ef578384fd5b50506130fd86828701612bdf565b9150509250925092565b60008060408385031215613119578182fd5b823561312481613d72565b9150602083013561313481613d72565b809150509250929050565b600060208284031215613150578081fd5b5035919050565b600060208284031215613168578081fd5b5051919050565b60008060408385031215613181578182fd5b82359150602083013561313481613d72565b6000806000806000806000806000806101808b8d0312156131b2578788fd5b8a35995060208b01356131c481613d72565b985060408b01356131d481613d72565b97506131e38c60608d01612c58565b965060c08b01356131f381613d8a565b955060e08b013561320381613d8a565b94506101008b013593506101208b013561321c81613dbd565b809350506101408b013591506101608b013590509295989b9194979a5092959850565b600080600080600080600080610140898b03121561325b578182fd5b88359750602089013561326d81613d72565b965061327c8a60408b01612c58565b955060a089013561328c81613d8a565b945060c0890135935060e08901356132a381613dbd565b979a969950949793969295929450505061010082013591610120013590565b6000806000806000806000806000806101808b8d0312156131b2578384fd5b600080604083850312156132f3578182fd5b82359150602083013561313481613d8a565b60008060808385031215613317578182fd5b823591506133288460208501612c58565b90509250929050565b60008060008060c08587031215613346578182fd5b843593506133578660208701612c58565b9250608085013561336781613d72565b915060a085013561337781613d8a565b939692955090935050565b600080600060a08486031215613396578081fd5b833592506133a78560208601612c58565b91506080840135612e8581613d8a565b600080604083850312156133c9578182fd5b505080516020909101519092909150565b6000806000606084860312156133ee578081fd5b83359250602084013561340081613da8565b91506040840135612e8581613d98565b600060208284031215613421578081fd5b8135612ce181613dbd565b6000825161343e818460208701613d46565b9190910192915050565b6000835161345a818460208801613d46565b9190910191825250602001919050565b6000845161347c818460208901613d46565b91909101928352506020820152604001919050565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526001600160401b0316604082015260ff909116606082015260800190565b90815260200190565b9889526001600160a01b03979097166020890152604088019590955292151560608701526001600160801b039190911660808601526001600160401b031660a085015261ffff1660c084015260e08301526101008201526101200190565b9788526001600160a01b0396909616602088015260408701949094526001600160801b039290921660608601526001600160401b0316608085015261ffff1660a084015260c083015260e08201526101000190565b92835260208301919091526001600160a01b0316604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60006080820160018060a01b0380881684526020818816818601526080604086015282875180855260a0870191508289019450855b818110156136fa5785518516835294830194918301916001016136dc565b50508581036060870152865180825290820193509150808601845b8381101561373157815185529382019390820190600101613715565b50929998505050505050505050565b6001600160a01b039390931683526001600160801b039190911660208301521515604082015260600190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b60208082526010908201526f27232a2830b4b91d103737903637b0b760811b604082015260600190565b6020808252601690820152754e4654506169723a206e6f7420617661696c61626c6560501b604082015260600190565b6020808252601390820152724e4654506169723a2062616420706172616d7360681b604082015260600190565b6020808252601590820152744e4654506169723a20776f72736520706172616d7360581b604082015260600190565b6020808252601590820152744f776e61626c653a207a65726f206164647265737360581b604082015260600190565b6020808252601a908201527f4e4654506169723a207369676e61747572652065787069726564000000000000604082015260600190565b60208082526014908201527313919514185a5c8e8818d85b1b0819985a5b195960621b604082015260600190565b6020808252601c908201527f426f72696e674d6174683a2075696e74313238204f766572666c6f7700000000604082015260600190565b60208082526015908201527413919514185a5c8e881b1bd85b88195e1c1a5c9959605a1b604082015260600190565b60208082526018908201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604082015260600190565b6020808252601490820152734e4654506169723a206c6f616e2065786973747360601b604082015260600190565b60208082526026908201527f4e4654506169723a204c656e64696e67436c756220646f6573206e6f74206c696040820152656b6520796f7560d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527213919514185a5c8e8818d85b89dd0818d85b1b606a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604082015260600190565b60208082526016908201527509c8ca8a0c2d2e47440e6d6d2da40e8dede40daeac6d60531b604082015260600190565b60208082526019908201527f4e4654506169723a206e6f742074686520626f72726f77657200000000000000604082015260600190565b6020808252601c908201527f4e4654506169723a20616c726561647920696e697469616c697a656400000000604082015260600190565b60208082526011908201527027232a2830b4b91d103130b2103830b4b960791b604082015260600190565b60208082526016908201527513919514185a5c8e881b9bc818dbdb1b185d195c985b60521b604082015260600190565b60208082526014908201527313919514185a5c8e881cdada5b4819985a5b195960621b604082015260600190565b60208082526017908201527f4e4654506169723a206e6f7420746865206c656e646572000000000000000000604082015260600190565b60208082526014908201527313919514185a5c8e881b9bdd08195e1c1a5c995960621b604082015260600190565b6020808252601a908201527f4e4654506169723a207369676e617475726520696e76616c6964000000000000604082015260600190565b6001600160801b039390931683526001600160401b0391909116602083015261ffff16604082015260600190565b91825280516001600160801b03166020808401919091528101516001600160401b0316604080840191909152015161ffff16606082015260800190565b918252602082015260400190565b6000808335601e19843603018112613cd3578283fd5b8301803591506001600160401b03821115613cec578283fd5b602001915036819003821315612bd857600080fd5b6040518181016001600160401b0381118282101715613d1f57600080fd5b604052919050565b60006001600160401b03821115613d3c578081fd5b5060209081020190565b60005b83811015613d61578181015183820152602001613d49565b83811115611dc15750506000910152565b6001600160a01b0381168114613d8757600080fd5b50565b8015158114613d8757600080fd5b61ffff81168114613d8757600080fd5b6001600160401b0381168114613d8757600080fd5b60ff81168114613d8757600080fdfea2646970667358221220be96e15312f71b4b3e89cf5382353d98018daa218fd94eba4b435767c89e377f64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "This contract allows contract calls to any contract (except BentoBox) from arbitrary callers thus, don't trust calls from this contract in any circumstances.",
    "kind": "dev",
    "methods": {
      "cook(uint8[],uint256[],bytes[])": {
        "params": {
          "actions": "An array with a sequence of actions to execute (see ACTION_ declarations).",
          "datas": "A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.",
          "values": "A one-to-one mapped array to `actions`. ETH amounts to send along with the actions. Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`."
        },
        "returns": {
          "value1": "May contain the first positioned return value of the last executed action (if applicable).",
          "value2": "May contain the second positioned return value of the last executed action which returns 2 values (if applicable)."
        }
      },
      "lend(uint256,(uint128,uint64,uint16),bool)": {
        "params": {
          "accepted": "Loan parameters as the lender saw them, for security",
          "skim": "True if the funds have been transfered to the contract",
          "tokenId": "ID of the token that will function as collateral"
        }
      },
      "removeCollateral(uint256,address)": {
        "params": {
          "to": "The receiver of the token.",
          "tokenId": "The token"
        }
      },
      "requestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,bool,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "anyTokenId": "Set if lender agreed to any token. Must have tokenId 0 in signature.",
          "lender": "Lender, whose BentoBox balance the funds will come from",
          "params": "Loan parameters requested, and signed by the lender",
          "recipient": "Address to receive the loan.",
          "skimCollateral": "True if the collateral has already been transfered",
          "tokenId": "ID of the token that will function as collateral"
        }
      },
      "requestLoan(uint256,(uint128,uint64,uint16),address,bool)": {
        "params": {
          "params": "Loan conditions on offer",
          "skim": "True if the token has already been transfered",
          "to": "Address to receive the loan, or option to withdraw collateral",
          "tokenId": "ID of the NFT"
        }
      },
      "setFeeTo(address)": {
        "params": {
          "newFeeTo": "The address of the receiver."
        }
      },
      "takeCollateralAndLend(uint256,address,(uint128,uint64,uint16),bool,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "borrower": "Address that provides collateral and receives the loan",
          "params": "Loan terms offered, and signed by the borrower",
          "skimFunds": "True if the funds have been transfered to the contract",
          "tokenId": "ID of the token that will function as collateral"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "title": "NFTPair",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateInterest(uint256,uint64,uint16)": {
        "notice": "Approximates continuous compounding. Uses Horner's method to evaluate the truncated Maclaurin series for exp - 1, accumulating rounding errors along the way. The following is always guaranteed:   principal * time * apr <= result <= principal * (e^(time * apr) - 1), where time = t/YEAR, up to at most the rounding error obtained in calculating linear interest. If the theoretical result that we are approximating (the rightmost part of the above inquality) fits in 128 bits, then the function is guaranteed not to revert (unless n > 250, which is way too high). If even the linear interest (leftmost part of the inequality) does not the function will revert. Otherwise, the function may revert, return a reasonable result, or return a very inaccurate result. Even then the above inequality is respected."
      },
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "constructor": "The constructor is only used for the initial master contract.Subsequent clones are initialised via `init`.",
      "cook(uint8[],uint256[],bytes[])": {
        "notice": "Executes a set of actions and allows composability (contract calls) to other contracts."
      },
      "init(bytes)": {
        "notice": "De facto constructor for clone contracts"
      },
      "lend(uint256,(uint128,uint64,uint16),bool)": {
        "notice": "Lends with the parameters specified by the borrower."
      },
      "removeCollateral(uint256,address)": {
        "notice": "Removes `tokenId` as collateral and transfers it to `to`.This destroys the loan."
      },
      "requestAndBorrow(uint256,address,address,(uint128,uint64,uint16),bool,bool,uint256,uint8,bytes32,bytes32)": {
        "notice": "Caller provides collateral; loan can go to a different address."
      },
      "requestLoan(uint256,(uint128,uint64,uint16),address,bool)": {
        "notice": "Deposit an NFT as collateral and request a loan against it"
      },
      "setFeeTo(address)": {
        "notice": "Sets the beneficiary of fees accrued in liquidations. MasterContract Only Admin function."
      },
      "takeCollateralAndLend(uint256,address,(uint128,uint64,uint16),bool,uint256,uint8,bytes32,bytes32)": {
        "notice": "Take collateral from a pre-commited borrower and lend against itCollateral must come from the borrower, not a third party."
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      },
      "withdrawFees()": {
        "notice": "Withdraws the fees accumulated."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 674,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 676,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14561,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "feeTo",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 14563,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "collateral",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC721)19856"
      },
      {
        "astId": 14565,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "asset",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)1405"
      },
      {
        "astId": 14567,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "feesEarnedShare",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14571,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "tokenLoanParams",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenLoanParams)14439_storage)"
      },
      {
        "astId": 14593,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "tokenLoan",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(TokenLoan)14589_storage)"
      },
      {
        "astId": 14618,
        "contract": "contracts/NFTPair.sol:NFTPair",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1405": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)19856": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenLoan)14589_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTPair.TokenLoan)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenLoan)14589_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenLoanParams)14439_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenLoanParams)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenLoanParams)14439_storage"
      },
      "t_struct(TokenLoan)14589_storage": {
        "encoding": "inplace",
        "label": "struct NFTPair.TokenLoan",
        "members": [
          {
            "astId": 14582,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "borrower",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14584,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "lender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 14586,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "startTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 14588,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "status",
            "offset": 28,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenLoanParams)14439_storage": {
        "encoding": "inplace",
        "label": "struct TokenLoanParams",
        "members": [
          {
            "astId": 14434,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "valuation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 14436,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "duration",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 14438,
            "contract": "contracts/NFTPair.sol:NFTPair",
            "label": "annualInterestBPS",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}