{
  "address": "0x70beCf593a0F094Dd7d5F8b8B48fB8582c0EC575",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxV1Minimal",
          "name": "_bentoBox",
          "type": "address"
        },
        {
          "internalType": "contract ISolidlyRouter",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract ISolidlyPair",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_mim",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zeroXExchangeProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrToken0SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrToken1SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mim",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract ISolidlyPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ISolidlyRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zeroXExchangeProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd409f1120021721b74b3c5c58ea31a4be36e80d891d56578d57f88232998174c",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0x70beCf593a0F094Dd7d5F8b8B48fB8582c0EC575",
    "transactionIndex": 0,
    "gasUsed": "1386144",
    "logsBloom": "0x
    "blockHash": "0x2f55c7d971297607223cff5fa8c583e1fc400a40b81138101f3a2ef6d89b1262",
    "transactionHash": "0xd409f1120021721b74b3c5c58ea31a4be36e80d891d56578d57f88232998174c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17018015,
        "transactionHash": "0xd409f1120021721b74b3c5c58ea31a4be36e80d891d56578d57f88232998174c",
        "address": "0x4200000000000000000000000000000000000042",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070becf593a0f094dd7d5f8b8b48fb8582c0ec575",
          "0x000000000000000000000000a132dab612db5cb9fc9ac426a0cc215a3423f9c9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x2f55c7d971297607223cff5fa8c583e1fc400a40b81138101f3a2ef6d89b1262"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17018015,
        "transactionHash": "0xd409f1120021721b74b3c5c58ea31a4be36e80d891d56578d57f88232998174c",
        "address": "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070becf593a0f094dd7d5f8b8b48fb8582c0ec575",
          "0x000000000000000000000000a132dab612db5cb9fc9ac426a0cc215a3423f9c9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x2f55c7d971297607223cff5fa8c583e1fc400a40b81138101f3a2ef6d89b1262"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17018015,
        "transactionHash": "0xd409f1120021721b74b3c5c58ea31a4be36e80d891d56578d57f88232998174c",
        "address": "0xB153FB3d196A8eB25522705560ac152eeEc57901",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070becf593a0f094dd7d5f8b8b48fb8582c0ec575",
          "0x000000000000000000000000def1abe32c034e558cdd535791643c58a13acc10"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x2f55c7d971297607223cff5fa8c583e1fc400a40b81138101f3a2ef6d89b1262"
      }
    ],
    "blockNumber": 17018015,
    "cumulativeGasUsed": "1386144",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB3f5c7D0Ac3944a9d9A9623D6B50bCeA85A26753",
    "0xa132DAB612dB5cB9fC9Ac426A0Cc215A3423F9c9",
    "0x47029bc8f5CBe3b464004E87eF9c9419a48018cd",
    "0xB153FB3d196A8eB25522705560ac152eeEc57901",
    "0xDEF1ABE32c034e558Cdd535791643C58a13aCC10"
  ],
  "numDeployments": 1,
  "solcInputHash": "e0bd86da2c8b952442e4530258ea255f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1Minimal\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"contract ISolidlyRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract ISolidlyPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_mim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroXExchangeProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrToken0SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrToken1SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mim\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract ISolidlyPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ISolidlyRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroXExchangeProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Generic LP leverage swapper for Solidly Volatile Pool using Matcha/0x aggregator\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Leverage/0x/ZeroXSolidlyLikeVolatileLPLevSwapper.sol\":\"ZeroXSolidlyLikeVolatileLPLevSwapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":690},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBentoBoxV1Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IBentoBoxV1Minimal {\\r\\n    function toAmount(\\r\\n        address _token,\\r\\n        uint256 _share,\\r\\n        bool _roundUp\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function withdraw(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deploy(\\r\\n        address masterContract,\\r\\n        bytes calldata data,\\r\\n        bool useCreate2\\r\\n    ) external payable returns (address cloneAddress);\\r\\n\\r\\n    function setMasterContractApproval(\\r\\n        address user,\\r\\n        address masterContract,\\r\\n        bool approved,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address, address) external view returns (uint256);\\r\\n\\r\\n    function totals(address) external view returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function flashLoan(\\r\\n        address borrower,\\r\\n        address receiver,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function toShare(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 share);\\r\\n}\\r\\n\",\"keccak256\":\"0x4c0dbd7854da6ce0f8c48dcae3a715f24fa6928358a4cc68e55e939430871e72\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x051f26454648a09bf39bed672a6a7aa9b5bc7b3f74822de5e743beef94428c52\",\"license\":\"MIT\"},\"contracts/interfaces/ILevSwapperV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface ILevSwapperV2 {\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\r\\n}\\r\\n\",\"keccak256\":\"0x5c253e03dd1e8bdc6229c3f725ca9258b46c7dc55c04de29890bb2b7f41ac610\",\"license\":\"MIT\"},\"contracts/interfaces/solidly/ISolidlyPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface ISolidlyPair {\\r\\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function token0() external pure returns (address);\\r\\n\\r\\n    function token1() external pure returns (address);\\r\\n\\r\\n    function reserve0() external pure returns (uint256);\\r\\n\\r\\n    function reserve1() external pure returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5d5d4f290acc97d993b7ec2018fd0e9254381c94479592db20c556f2fe0e0414\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/solidly/ISolidlyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface ISolidlyRouter {\\r\\n    // solhint-disable-next-line contract-name-camelcase\\r\\n    struct route {\\r\\n        address from;\\r\\n        address to;\\r\\n        bool stable;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, route[] memory routes) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function pairFor(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable\\r\\n    ) external view returns (address pair);\\r\\n}\\r\\n\",\"keccak256\":\"0x2e6fd564e6435606e2ca78618e327e9e76d943e27f67fc77d9688dc328db313f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @notice Babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method).\\r\\nlibrary Babylonian {\\r\\n    // computes square roots using the babylonian method\\r\\n    // credit for this implementation goes to\\r\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\r\\n        // however that code costs significantly more gas\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) {\\r\\n            xx >>= 128;\\r\\n            r <<= 64;\\r\\n        }\\r\\n        if (xx >= 0x10000000000000000) {\\r\\n            xx >>= 64;\\r\\n            r <<= 32;\\r\\n        }\\r\\n        if (xx >= 0x100000000) {\\r\\n            xx >>= 32;\\r\\n            r <<= 16;\\r\\n        }\\r\\n        if (xx >= 0x10000) {\\r\\n            xx >>= 16;\\r\\n            r <<= 8;\\r\\n        }\\r\\n        if (xx >= 0x100) {\\r\\n            xx >>= 8;\\r\\n            r <<= 4;\\r\\n        }\\r\\n        if (xx >= 0x10) {\\r\\n            xx >>= 4;\\r\\n            r <<= 2;\\r\\n        }\\r\\n        if (xx >= 0x8) {\\r\\n            r <<= 1;\\r\\n        }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return (r < r1 ? r : r1);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfdbe64ff139295d3a3f80e8f10aa93c49b5f362d61423f0f5613c3f0a392e569\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SolidlyOneSidedVolatile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"../interfaces/solidly/ISolidlyRouter.sol\\\";\\r\\nimport \\\"../interfaces/solidly/ISolidlyPair.sol\\\";\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\nimport \\\"./Babylonian.sol\\\";\\r\\n\\r\\nlibrary SolidlyOneSidedVolatile {\\r\\n    struct AddLiquidityAndOneSideRemainingParams {\\r\\n        ISolidlyRouter router;\\r\\n        ISolidlyPair pair;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        uint256 token0Amount;\\r\\n        uint256 token1Amount;\\r\\n        uint256 minOneSideableAmount0;\\r\\n        uint256 minOneSideableAmount1;\\r\\n        address recipient;\\r\\n        uint256 fee;\\r\\n    }\\r\\n\\r\\n    struct AddLiquidityFromSingleTokenParams {\\r\\n        ISolidlyRouter router;\\r\\n        ISolidlyPair pair;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint256 reserve0;\\r\\n        uint256 reserve1;\\r\\n        address tokenIn;\\r\\n        uint256 tokenInAmount;\\r\\n        address recipient;\\r\\n        uint256 fee;\\r\\n    }\\r\\n\\r\\n    /// @dev adapted from https://blog.alphaventuredao.io/onesideduniswap/\\r\\n    /// turn off fees since they are not automatically added to the pair when swapping\\r\\n    /// but moved out of the pool\\r\\n    function _calculateSwapInAmount(\\r\\n        uint256 reserveIn,\\r\\n        uint256 amountIn,\\r\\n        uint256 fee\\r\\n    ) internal pure returns (uint256) {\\r\\n        /// @dev rought estimation to account for the fact that fees don't stay inside the pool.\\r\\n        amountIn += ((amountIn * fee) / 10000) / 2;\\r\\n\\r\\n        return (Babylonian.sqrt(4000000 * (reserveIn * reserveIn) + (4000000 * amountIn * reserveIn)) - 2000 * reserveIn) / 2000;\\r\\n    }\\r\\n\\r\\n    function _getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) internal pure returns (uint256 amountOut) {\\r\\n        uint256 amountInWithFee = amountIn * 997;\\r\\n        uint256 numerator = amountInWithFee * reserveOut;\\r\\n        uint256 denominator = (reserveIn * 1000) + amountInWithFee;\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    function addLiquidityAndOneSideRemaining(AddLiquidityAndOneSideRemainingParams memory params)\\r\\n        internal\\r\\n        returns (\\r\\n            uint256 idealAmount0,\\r\\n            uint256 idealAmount1,\\r\\n            uint256 liquidity\\r\\n        )\\r\\n    {\\r\\n        (idealAmount0, idealAmount1, liquidity) = params.router.addLiquidity(\\r\\n            params.token0,\\r\\n            params.token1,\\r\\n            false,\\r\\n            params.token0Amount,\\r\\n            params.token1Amount,\\r\\n            0,\\r\\n            0,\\r\\n            params.recipient,\\r\\n            type(uint256).max\\r\\n        );\\r\\n\\r\\n        params.token0Amount -= idealAmount0;\\r\\n        params.token1Amount -= idealAmount1;\\r\\n\\r\\n        address oneSideTokenIn;\\r\\n        uint256 oneSideTokenAmount;\\r\\n\\r\\n        if (params.token0Amount >= params.minOneSideableAmount0) {\\r\\n            oneSideTokenIn = params.token0;\\r\\n            oneSideTokenAmount = params.token0Amount;\\r\\n        } else if (params.token1Amount > params.minOneSideableAmount1) {\\r\\n            oneSideTokenIn = params.token1;\\r\\n            oneSideTokenAmount = params.token1Amount;\\r\\n        }\\r\\n\\r\\n        if (oneSideTokenAmount > 0) {\\r\\n            AddLiquidityFromSingleTokenParams memory _addLiquidityFromSingleTokenParams = AddLiquidityFromSingleTokenParams(\\r\\n                params.router,\\r\\n                params.pair,\\r\\n                params.token0,\\r\\n                params.token1,\\r\\n                params.reserve0,\\r\\n                params.reserve1,\\r\\n                oneSideTokenIn,\\r\\n                oneSideTokenAmount,\\r\\n                params.recipient,\\r\\n                params.fee\\r\\n            );\\r\\n\\r\\n            (uint256 _idealAmount0, uint256 _idealAmount1, uint256 _liquidity) = addLiquidityFromSingleToken(\\r\\n                _addLiquidityFromSingleTokenParams\\r\\n            );\\r\\n\\r\\n            idealAmount0 += _idealAmount0;\\r\\n            idealAmount1 += _idealAmount1;\\r\\n            liquidity += _liquidity;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLiquidityFromSingleToken(AddLiquidityFromSingleTokenParams memory params)\\r\\n        internal\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        )\\r\\n    {\\r\\n        if (params.tokenIn == params.token0) {\\r\\n            uint256 tokenInSwapAmount = _calculateSwapInAmount(params.reserve0, params.tokenInAmount, params.fee);\\r\\n            params.tokenInAmount -= tokenInSwapAmount;\\r\\n            uint256 sideTokenAmount = params.pair.getAmountOut(tokenInSwapAmount, params.token0);\\r\\n            IERC20(params.tokenIn).transfer(address(params.pair), tokenInSwapAmount);\\r\\n            params.pair.swap(0, sideTokenAmount, address(this), \\\"\\\");\\r\\n            return\\r\\n                params.router.addLiquidity(\\r\\n                    params.token0,\\r\\n                    params.token1,\\r\\n                    false,\\r\\n                    params.tokenInAmount,\\r\\n                    sideTokenAmount,\\r\\n                    0,\\r\\n                    0,\\r\\n                    params.recipient,\\r\\n                    type(uint256).max\\r\\n                );\\r\\n        } else {\\r\\n            uint256 tokenInSwapAmount = _calculateSwapInAmount(params.reserve1, params.tokenInAmount, params.fee);\\r\\n            params.tokenInAmount -= tokenInSwapAmount;\\r\\n            uint256 sideTokenAmount = params.pair.getAmountOut(tokenInSwapAmount, params.token1);\\r\\n            IERC20(params.tokenIn).transfer(address(params.pair), tokenInSwapAmount);\\r\\n            params.pair.swap(sideTokenAmount, 0, address(this), \\\"\\\");\\r\\n\\r\\n            return\\r\\n                params.router.addLiquidity(\\r\\n                    params.token0,\\r\\n                    params.token1,\\r\\n                    false,\\r\\n                    sideTokenAmount,\\r\\n                    params.tokenInAmount,\\r\\n                    0,\\r\\n                    0,\\r\\n                    params.recipient,\\r\\n                    type(uint256).max\\r\\n                );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd7ebc245aef80ddccf39f29252aad061c70aef72d4c61be96eb6f5dbf1a5954e\",\"license\":\"MIT\"},\"contracts/swappers/Leverage/0x/ZeroXSolidlyLikeVolatileLPLevSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable avoid-low-level-calls\\r\\npragma solidity >=0.8.10;\\r\\n\\r\\nimport \\\"solmate/src/tokens/ERC20.sol\\\";\\r\\nimport \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\r\\n\\r\\nimport \\\"../../../interfaces/IBentoBoxV1Minimal.sol\\\";\\r\\nimport \\\"../../../interfaces/ILevSwapperV2.sol\\\";\\r\\nimport \\\"../../../interfaces/solidly/ISolidlyPair.sol\\\";\\r\\nimport \\\"../../../interfaces/solidly/ISolidlyRouter.sol\\\";\\r\\nimport \\\"../../../libraries/SolidlyOneSidedVolatile.sol\\\";\\r\\n\\r\\n/// @notice Generic LP leverage swapper for Solidly Volatile Pool using Matcha/0x aggregator\\r\\ncontract ZeroXSolidlyLikeVolatileLPLevSwapper is ILevSwapperV2 {\\r\\n    using SafeTransferLib for ERC20;\\r\\n\\r\\n    error ErrToken0SwapFailed();\\r\\n    error ErrToken1SwapFailed();\\r\\n\\r\\n    IBentoBoxV1Minimal public immutable bentoBox;\\r\\n    ISolidlyPair public immutable pair;\\r\\n    ISolidlyRouter public immutable router;\\r\\n    ERC20 public immutable mim;\\r\\n    ERC20 public immutable token0;\\r\\n    ERC20 public immutable token1;\\r\\n\\r\\n    address public immutable zeroXExchangeProxy;\\r\\n\\r\\n    constructor(\\r\\n        IBentoBoxV1Minimal _bentoBox,\\r\\n        ISolidlyRouter _router,\\r\\n        ISolidlyPair _pair,\\r\\n        ERC20 _mim,\\r\\n        address _zeroXExchangeProxy\\r\\n    ) {\\r\\n        bentoBox = _bentoBox;\\r\\n        router = _router;\\r\\n        pair = _pair;\\r\\n        mim = _mim;\\r\\n        zeroXExchangeProxy = _zeroXExchangeProxy;\\r\\n\\r\\n        ERC20 _token0 = ERC20(_pair.token0());\\r\\n        ERC20 _token1 = ERC20(_pair.token1());\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n\\r\\n        _token0.safeApprove(address(_router), type(uint256).max);\\r\\n        _token1.safeApprove(address(_router), type(uint256).max);\\r\\n        _mim.approve(_zeroXExchangeProxy, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ILevSwapperV2\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom,\\r\\n        bytes calldata data\\r\\n    ) external override returns (uint256 extraShare, uint256 shareReturned) {\\r\\n        // 0: MIM -> token0\\r\\n        // 1: MIM -> token1\\r\\n        (bytes[] memory swapData, uint256 minOneSideableAmount0, uint256 minOneSideableAmount1, uint256 fee) = abi.decode(\\r\\n            data,\\r\\n            (bytes[], uint256, uint256, uint256)\\r\\n        );\\r\\n\\r\\n        bentoBox.withdraw(address(mim), address(this), address(this), 0, shareFrom);\\r\\n\\r\\n        {\\r\\n            // MIM -> token0\\r\\n            (bool success, ) = zeroXExchangeProxy.call(swapData[0]);\\r\\n            if (!success) {\\r\\n                revert ErrToken0SwapFailed();\\r\\n            }\\r\\n\\r\\n            // MIM -> token1\\r\\n            (success, ) = zeroXExchangeProxy.call(swapData[1]);\\r\\n            if (!success) {\\r\\n                revert ErrToken1SwapFailed();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 liquidity;\\r\\n\\r\\n        {\\r\\n            SolidlyOneSidedVolatile.AddLiquidityAndOneSideRemainingParams memory params = SolidlyOneSidedVolatile\\r\\n                .AddLiquidityAndOneSideRemainingParams(\\r\\n                    router,\\r\\n                    pair,\\r\\n                    address(token0),\\r\\n                    address(token1),\\r\\n                    pair.reserve0(),\\r\\n                    pair.reserve1(),\\r\\n                    token0.balanceOf(address(this)),\\r\\n                    token1.balanceOf(address(this)),\\r\\n                    minOneSideableAmount0,\\r\\n                    minOneSideableAmount1,\\r\\n                    address(bentoBox),\\r\\n                    fee\\r\\n                );\\r\\n\\r\\n            (, , liquidity) = SolidlyOneSidedVolatile.addLiquidityAndOneSideRemaining(params);\\r\\n        }\\r\\n\\r\\n        (, shareReturned) = bentoBox.deposit(address(pair), address(bentoBox), recipient, liquidity, 0);\\r\\n        extraShare = shareReturned - shareToMin;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x808603dbc384d64bcfa1e895099dceedfad25b0413d71e36951fb3c62bc5367b\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001a7a38038062001a7a8339810160408190526200003591620002a9565b6001600160a01b0380861660805284811660c05283811660a081905283821660e0529082166101405260408051630dfe168160e01b8152905160009291630dfe16819160048083019260209291908290030181865afa1580156200009d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c3919062000329565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000106573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012c919062000329565b6001600160a01b03838116610100819052908216610120529091506200016290876000196200020e602090811b620008ae17901c565b6200018986600019836001600160a01b03166200020e60201b620008ae179092919060201c565b60405163095ea7b360e01b81526001600160a01b038481166004830152600019602483015285169063095ea7b3906044016020604051808303816000875af1158015620001da573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000200919062000350565b505050505050505062000374565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806200028a5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b50505050565b6001600160a01b0381168114620002a657600080fd5b50565b600080600080600060a08688031215620002c257600080fd5b8551620002cf8162000290565b6020870151909550620002e28162000290565b6040870151909450620002f58162000290565b6060870151909350620003088162000290565b60808701519092506200031b8162000290565b809150509295509295909350565b6000602082840312156200033c57600080fd5b8151620003498162000290565b9392505050565b6000602082840312156200036357600080fd5b815180151581146200034957600080fd5b60805160a05160c05160e05161010051610120516101405161163e6200043c6000396000818160fd015281816102cf015261038501526000818161019a015281816104da01526106c50152600081816092015281816104ab0152610635015260008181610124015261020d0152600081816101c1015261044d01526000818161014b0152818161047c015281816105090152818161059001526107ba01526000818160d60152818161025b015281816107430152818161078b01526107db015261163e6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a8aa1b311161005b578063a8aa1b3114610146578063b691d78c1461016d578063d21220a714610195578063f887ea40146101bc57600080fd5b80630dfe16811461008d5780636b2ace87146100d15780639997c7f1146100f85780639f67679e1461011f575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b61018061017b366004611289565b6101e3565b604080519283526020830191909152016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b600080808080806101f687890189611372565b60405163097da6d360e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301819052604483015260006064830152608482018f905294985092965090945092507f0000000000000000000000000000000000000000000000000000000000000000909116906397da6d309060a40160408051808303816000875af11580156102a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c9919061149d565b505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168560008151811061030a5761030a6114c1565b602002602001015160405161031f91906114d7565b6000604051808303816000865af19150503d806000811461035c576040519150601f19603f3d011682016040523d82523d6000602084013e610361565b606091505b50509050806103835760405163c4a632a560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001815181106103c0576103c06114c1565b60200260200101516040516103d591906114d7565b6000604051808303816000865af19150503d8060008114610412576040519150601f19603f3d011682016040523d82523d6000602084013e610417565b606091505b5050809150508061043b576040516326bfc13160e11b815260040160405180910390fd5b506000806040518061018001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663443cb4bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105899190611512565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a76f25e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106109190611512565b81526040516370a0823160e01b81523060048201526020909101906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a09190611512565b81526040516370a0823160e01b81523060048201526020909101906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107309190611512565b81526020018681526020018581526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316815260200184815250905061077f8161093e565b909150905080925050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302b9446c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008f8560006040518663ffffffff1660e01b815260040161084d9594939291906001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60408051808303816000875af115801561086b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088f919061149d565b965061089d90508b87611541565b965050505050509550959350505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806109385760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c4544000000000000000000000000000000000000604482015260640160405180910390fd5b50505050565b8051604080830151606084015160c085015160e08601516101408701519451635a47ddc360e01b81526001600160a01b03948516600482015292841660248401526000604484018190526064840192909252608483015260a4820181905260c4820181905292821660e482015260001961010482015291928392839290911690635a47ddc390610124016060604051808303816000875af11580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190611558565b60c08701805193965091945092508491610a26908390611541565b90525060e084018051839190610a3d908390611541565b90525061010084015160c0850151600091829110610a66575050604084015160c0850151610a84565b8561012001518660e001511115610a84575050606084015160e08501515b8015610b6a57600060405180610140016040528088600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b0316815260200188606001516001600160a01b03168152602001886080015181526020018860a001518152602001846001600160a01b031681526020018381526020018861014001516001600160a01b0316815260200188610160015181525090506000806000610b3a84610b73565b91945092509050610b4b838a611586565b9850610b578289611586565b9750610b638188611586565b9650505050505b50509193909250565b600080600083604001516001600160a01b03168460c001516001600160a01b03161415610e21576000610bb485608001518660e00151876101200151611063565b9050808560e001818151610bc89190611541565b905250602085015160408087015190516378a051ad60e11b81526000926001600160a01b03169163f140a35a91610c159186916004019182526001600160a01b0316602082015260400190565b602060405180830381865afa158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c569190611512565b60c0870151602088015160405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350169063a9059cbb906044016020604051808303816000875af1158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd5919061159e565b50602086015160405163022c0d9f60e01b8152600060048201819052602482018490523060448301526080606483015260848201526001600160a01b039091169063022c0d9f9060a401600060405180830381600087803b158015610d3957600080fd5b505af1158015610d4d573d6000803e3d6000fd5b505087516040808a015160608b015160e08c01516101008d01519351635a47ddc360e01b81526001600160a01b039384166004820152918316602483015260006044830181905260648301919091526084820188905260a4820181905260c482015291811660e48301526000196101048301529091169250635a47ddc39150610124015b6060604051808303816000875af1158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e149190611558565b945094509450505061105c565b6000610e3b8560a001518660e00151876101200151611063565b9050808560e001818151610e4f9190611541565b905250602085015160608601516040516378a051ad60e11b81526000926001600160a01b03169163f140a35a91610e9c9186916004019182526001600160a01b0316602082015260400190565b602060405180830381865afa158015610eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edd9190611512565b60c0870151602088015160405163a9059cbb60e01b81526001600160a01b03918216600482015260248101869052929350169063a9059cbb906044016020604051808303816000875af1158015610f38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5c919061159e565b50602086015160405163022c0d9f60e01b8152600481018390526000602482018190523060448301526080606483015260848201526001600160a01b039091169063022c0d9f9060a401600060405180830381600087803b158015610fc057600080fd5b505af1158015610fd4573d6000803e3d6000fd5b505087516040808a015160608b015160e08c01516101008d01519351635a47ddc360e01b81526001600160a01b039384166004820152918316602483015260006044830181905260648301899052608483019190915260a4820181905260c482015291811660e48301526000196101048301529091169250635a47ddc3915061012401610dd1565b9193909250565b6000600261271061107484866115c7565b61107e91906115e6565b61108891906115e6565b6110929084611586565b92506107d06110a185826115c7565b6110e2866110b287623d09006115c7565b6110bc91906115c7565b6110c688806115c7565b6110d390623d09006115c7565b6110dd9190611586565b6110fe565b6110ec9190611541565b6110f691906115e6565b949350505050565b60008161110d57506000919050565b81600170010000000000000000000000000000000082106111335760809190911c9060401b5b68010000000000000000821061114e5760409190911c9060201b5b64010000000082106111655760209190911c9060101b5b62010000821061117a5760109190911c9060081b5b610100821061118e5760089190911c9060041b5b601082106111a15760049190911c9060021b5b600882106111ad5760011b5b60016111b982866115e6565b6111c39083611586565b901c905060016111d382866115e6565b6111dd9083611586565b901c905060016111ed82866115e6565b6111f79083611586565b901c9050600161120782866115e6565b6112119083611586565b901c9050600161122182866115e6565b61122b9083611586565b901c9050600161123b82866115e6565b6112459083611586565b901c9050600161125582866115e6565b61125f9083611586565b901c9050600061126f82866115e6565b905080821061127e5780611280565b815b95945050505050565b6000806000806000608086880312156112a157600080fd5b85356001600160a01b03811681146112b857600080fd5b94506020860135935060408601359250606086013567ffffffffffffffff808211156112e357600080fd5b818801915088601f8301126112f757600080fd5b81358181111561130657600080fd5b89602082850101111561131857600080fd5b9699959850939650602001949392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561136a5761136a61132b565b604052919050565b6000806000806080858703121561138857600080fd5b843567ffffffffffffffff808211156113a057600080fd5b818701915087601f8301126113b457600080fd5b81356020828211156113c8576113c861132b565b8160051b6113d7828201611341565b928352848101820192828101908c8511156113f157600080fd5b83870192505b8483101561147f5782358681111561140e57600080fd5b8701603f81018e1361141f57600080fd5b84810135878111156114335761143361132b565b611445601f8201601f19168701611341565b8181528f604083850101111561145b5760008081fd5b816040840188830137600091810187019190915283525091830191908301906113f7565b9c928b01359b50505060408901359860600135975095505050505050565b600080604083850312156114b057600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b6000825160005b818110156114f857602081860181015185830152016114de565b81811115611507576000828501525b509190910192915050565b60006020828403121561152457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156115535761155361152b565b500390565b60008060006060848603121561156d57600080fd5b8351925060208401519150604084015190509250925092565b600082198211156115995761159961152b565b500190565b6000602082840312156115b057600080fd5b815180151581146115c057600080fd5b9392505050565b60008160001904831182151516156115e1576115e161152b565b500290565b60008261160357634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212203f001fc688e99c6963cc7580ed6e3f257c689633920e2c656cb8bd85539ef54d64736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Generic LP leverage swapper for Solidly Volatile Pool using Matcha/0x aggregator",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}