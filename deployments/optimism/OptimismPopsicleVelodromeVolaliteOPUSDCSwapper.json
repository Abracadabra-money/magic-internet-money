{
  "address": "0x2ed641367f16f9783666409be7d083c8c49cBEc2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bentoBox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mim",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zeroXExchangeProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrToken0SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrToken1SwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxV1Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mim",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareToMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareFrom",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareReturned",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "swapExact",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zeroXExchangeProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x346198f66d68fffaeec9ce827f377dc7e9b0841ded262ccfcbf179e05bf00e87",
  "receipt": {
    "to": null,
    "from": "0xfB3485c2e209A5cfBDC1447674256578f1A80eE3",
    "contractAddress": "0x2ed641367f16f9783666409be7d083c8c49cBEc2",
    "transactionIndex": 0,
    "gasUsed": "758656",
    "logsBloom": "0x
    "blockHash": "0x0af8d29eb568e8383015b0e08a82c91f9d087515c6dfc9b42ad9b9d560f0b60f",
    "transactionHash": "0x346198f66d68fffaeec9ce827f377dc7e9b0841ded262ccfcbf179e05bf00e87",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17017934,
        "transactionHash": "0x346198f66d68fffaeec9ce827f377dc7e9b0841ded262ccfcbf179e05bf00e87",
        "address": "0x4200000000000000000000000000000000000042",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002ed641367f16f9783666409be7d083c8c49cbec2",
          "0x000000000000000000000000def1abe32c034e558cdd535791643c58a13acc10"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x0af8d29eb568e8383015b0e08a82c91f9d087515c6dfc9b42ad9b9d560f0b60f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17017934,
        "transactionHash": "0x346198f66d68fffaeec9ce827f377dc7e9b0841ded262ccfcbf179e05bf00e87",
        "address": "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002ed641367f16f9783666409be7d083c8c49cbec2",
          "0x000000000000000000000000def1abe32c034e558cdd535791643c58a13acc10"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x0af8d29eb568e8383015b0e08a82c91f9d087515c6dfc9b42ad9b9d560f0b60f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17017934,
        "transactionHash": "0x346198f66d68fffaeec9ce827f377dc7e9b0841ded262ccfcbf179e05bf00e87",
        "address": "0xB153FB3d196A8eB25522705560ac152eeEc57901",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000002ed641367f16f9783666409be7d083c8c49cbec2",
          "0x000000000000000000000000b3f5c7d0ac3944a9d9a9623d6b50bcea85a26753"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x0af8d29eb568e8383015b0e08a82c91f9d087515c6dfc9b42ad9b9d560f0b60f"
      }
    ],
    "blockNumber": 17017934,
    "cumulativeGasUsed": "758656",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB3f5c7D0Ac3944a9d9A9623D6B50bCeA85A26753",
    "0x47029bc8f5CBe3b464004E87eF9c9419a48018cd",
    "0xB153FB3d196A8eB25522705560ac152eeEc57901",
    "0xDEF1ABE32c034e558Cdd535791643C58a13aCC10"
  ],
  "numDeployments": 1,
  "solcInputHash": "e0bd86da2c8b952442e4530258ea255f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zeroXExchangeProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrToken0SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrToken1SwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mim\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"swapExact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroXExchangeProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap(address,address,address,uint256,uint256,bytes)\":{\"notice\":\"Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for at least 'amountToMin' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Returns the amount of tokens 'to' transferred to BentoBox. (The BentoBox skim function will be used by the caller to get the swapped funds).\"},\"swapExact(address,address,address,address,uint256,uint256,bytes)\":{\"notice\":\"Calculates the amount of token 'from' needed to complete the swap (amountFrom), this should be less than or equal to amountFromMax. Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for exactly 'exactAmountTo' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom). Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom). (The BentoBox skim function will be used by the caller to get the swapped funds).\"}},\"notice\":\"Generic LP liquidation/deleverage swapper for Uniswap like compatible DEX using Matcha/0x aggregator\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swappers/Liquidations/0x/ZeroXUniswapLikeLPSwapper.sol\":\"ZeroXUniswapLikeLPSwapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":690},\"remappings\":[]},\"sources\":{\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBentoBoxV1Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface IBentoBoxV1Minimal {\\r\\n    function toAmount(\\r\\n        address _token,\\r\\n        uint256 _share,\\r\\n        bool _roundUp\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function withdraw(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deposit(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    function deploy(\\r\\n        address masterContract,\\r\\n        bytes calldata data,\\r\\n        bool useCreate2\\r\\n    ) external payable returns (address cloneAddress);\\r\\n\\r\\n    function setMasterContractApproval(\\r\\n        address user,\\r\\n        address masterContract,\\r\\n        bool approved,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address, address) external view returns (uint256);\\r\\n\\r\\n    function totals(address) external view returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function flashLoan(\\r\\n        address borrower,\\r\\n        address receiver,\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function toShare(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 share);\\r\\n}\\r\\n\",\"keccak256\":\"0x4c0dbd7854da6ce0f8c48dcae3a715f24fa6928358a4cc68e55e939430871e72\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapperV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity >=0.6.12;\\r\\n\\r\\ninterface ISwapperV2 {\\r\\n    /// @notice Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\r\\n    /// Swaps it for at least 'amountToMin' of token 'to'.\\r\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\r\\n    /// Returns the amount of tokens 'to' transferred to BentoBox.\\r\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\r\\n    function swap(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256 extraShare, uint256 shareReturned);\\r\\n\\r\\n    /// @notice Calculates the amount of token 'from' needed to complete the swap (amountFrom),\\r\\n    /// this should be less than or equal to amountFromMax.\\r\\n    /// Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper.\\r\\n    /// Swaps it for exactly 'exactAmountTo' of token 'to'.\\r\\n    /// Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer.\\r\\n    /// Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom).\\r\\n    /// Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom).\\r\\n    /// (The BentoBox skim function will be used by the caller to get the swapped funds).\\r\\n    function swapExact(\\r\\n        address fromToken,\\r\\n        address toToken,\\r\\n        address recipient,\\r\\n        address refundTo,\\r\\n        uint256 shareFromSupplied,\\r\\n        uint256 shareToExact,\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256 shareUsed, uint256 shareReturned);\\r\\n}\\r\\n\",\"keccak256\":\"0x5cf1bf2c7d1b10ce3cc5072147b2dcbe6acdc19fced9cf06bcb60f0d8fd9dff3\",\"license\":\"MIT\"},\"contracts/swappers/Liquidations/0x/ZeroXUniswapLikeLPSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// solhint-disable avoid-low-level-calls\\r\\npragma solidity >= 0.8.10;\\r\\n\\r\\nimport \\\"solmate/src/tokens/ERC20.sol\\\";\\r\\nimport \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\r\\n\\r\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\nimport \\\"../../../interfaces/IBentoBoxV1Minimal.sol\\\";\\r\\nimport \\\"../../../interfaces/ISwapperV2.sol\\\";\\r\\n\\r\\n/// @notice Generic LP liquidation/deleverage swapper for Uniswap like compatible DEX using Matcha/0x aggregator\\r\\ncontract ZeroXUniswapLikeLPSwapper is ISwapperV2 {\\r\\n    using SafeTransferLib for ERC20;\\r\\n\\r\\n    error ErrToken0SwapFailed();\\r\\n    error ErrToken1SwapFailed();\\r\\n\\r\\n    IBentoBoxV1Minimal public immutable bentoBox;\\r\\n    IUniswapV2Pair public immutable pair;\\r\\n    ERC20 public immutable mim;\\r\\n\\r\\n    address public immutable zeroXExchangeProxy;\\r\\n\\r\\n    constructor(\\r\\n        address _bentoBox,\\r\\n        address _pair,\\r\\n        address _mim,\\r\\n        address _zeroXExchangeProxy\\r\\n    ) {\\r\\n        bentoBox = IBentoBoxV1Minimal(_bentoBox);\\r\\n        pair = IUniswapV2Pair(_pair);\\r\\n        mim = ERC20(_mim);\\r\\n        zeroXExchangeProxy = _zeroXExchangeProxy;\\r\\n\\r\\n        ERC20(pair.token0()).safeApprove(_zeroXExchangeProxy, type(uint256).max);\\r\\n        ERC20(pair.token1()).safeApprove(_zeroXExchangeProxy, type(uint256).max);\\r\\n\\r\\n        mim.approve(address(_bentoBox), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISwapperV2\\r\\n    function swap(\\r\\n        address,\\r\\n        address,\\r\\n        address recipient,\\r\\n        uint256 shareToMin,\\r\\n        uint256 shareFrom,\\r\\n        bytes calldata data\\r\\n    ) public override returns (uint256 extraShare, uint256 shareReturned) {\\r\\n        // 0: token0 -> MIM\\r\\n        // 1: token1 -> MIM\\r\\n        bytes[] memory swapData = abi.decode(data, (bytes[]));\\r\\n\\r\\n        (uint256 amountFrom, ) = bentoBox.withdraw(address(pair), address(this), address(this), 0, shareFrom);\\r\\n\\r\\n        pair.transfer(address(pair), amountFrom);\\r\\n        pair.burn(address(this));\\r\\n\\r\\n        // token0 -> MIM\\r\\n        (bool success, ) = zeroXExchangeProxy.call(swapData[0]);\\r\\n        if (!success) {\\r\\n            revert ErrToken0SwapFailed();\\r\\n        }\\r\\n\\r\\n        // token1 -> MIM\\r\\n        (success, ) = zeroXExchangeProxy.call(swapData[1]);\\r\\n        if (!success) {\\r\\n            revert ErrToken1SwapFailed();\\r\\n        }\\r\\n\\r\\n        (, shareReturned) = bentoBox.deposit(address(mim), address(this), recipient, mim.balanceOf(address(this)), 0);\\r\\n        extraShare = shareReturned - shareToMin;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISwapperV2\\r\\n    function swapExact(\\r\\n        address,\\r\\n        address,\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (uint256, uint256) {\\r\\n        return (0, 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8f2a6097e5bcfba722f5e00ec0172956260b4f32af00b6201a0a27516b328c2e\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162000e4838038062000e48833981016040819052620000359162000250565b6001600160a01b0380851660805283811660a081905283821660c05290821660e05260408051630dfe168160e01b81529051620000e292849260001992630dfe1681916004808201926020929091908290030181865afa1580156200009e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c49190620002ad565b6001600160a01b0316620001b160201b6200065a179092919060201c565b6200012b8160001960a0516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200009e573d6000803e3d6000fd5b60c05160405163095ea7b360e01b81526001600160a01b03868116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af115801562000180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a69190620002d2565b5050505050620002f6565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806200022d5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b50505050565b80516001600160a01b03811681146200024b57600080fd5b919050565b600080600080608085870312156200026757600080fd5b620002728562000233565b9350620002826020860162000233565b9250620002926040860162000233565b9150620002a26060860162000233565b905092959194509250565b600060208284031215620002c057600080fd5b620002cb8262000233565b9392505050565b600060208284031215620002e557600080fd5b81518015158114620002cb57600080fd5b60805160a05160c05160e051610ae3620003656000396000818160c001528181610376015261042c01526000818160e7015261052b0152600081816101360152818161019d0152818161026101526102fc015260008181607c015281816101e501526105010152610ae36000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063a5d4096b11610050578063a5d4096b14610109578063a8aa1b3114610131578063c507ffc11461015857600080fd5b80636b2ace87146100775780639997c7f1146100bb5780639f67679e146100e2575b600080fd5b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61011c61011736600461074f565b610176565b604080519283526020830191909152016100b2565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61011c6101663660046107d8565b6000809850989650505050505050565b60008080610186848601866108b8565b60405163097da6d360e41b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015230602483018190526044830152600060648301819052608483018a90529293507f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af115801561022d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025191906109d1565b5060405163a9059cbb60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600482018190526024820183905291925063a9059cbb906044016020604051808303816000875af11580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e691906109f5565b5060405163226bf2d160e21b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906389afcb449060240160408051808303816000875af115801561034c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037091906109d1565b505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836000815181106103b1576103b1610a1e565b60200260200101516040516103c69190610a34565b6000604051808303816000865af19150503d8060008114610403576040519150601f19603f3d011682016040523d82523d6000602084013e610408565b606091505b505090508061042a5760405163c4a632a560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168360018151811061046757610467610a1e565b602002602001015160405161047c9190610a34565b6000604051808303816000865af19150503d80600081146104b9576040519150601f19603f3d011682016040523d82523d6000602084013e6104be565b606091505b505080915050806104e2576040516326bfc13160e11b815260040160405180910390fd5b6040516370a0823160e01b815230600482018190526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926302b9446c927f00000000000000000000000000000000000000000000000000000000000000009290918f918416906370a0823190602401602060405180830381865afa158015610578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059c9190610a6f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292841660248401529216604482015260648101919091526000608482015260a40160408051808303816000875af1158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b91906109d1565b945061064990508985610a88565b945050505097509795505050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806106e45760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c4544000000000000000000000000000000000000604482015260640160405180910390fd5b50505050565b80356001600160a01b038116811461070157600080fd5b919050565b60008083601f84011261071857600080fd5b50813567ffffffffffffffff81111561073057600080fd5b60208301915083602082850101111561074857600080fd5b9250929050565b600080600080600080600060c0888a03121561076a57600080fd5b610773886106ea565b9650610781602089016106ea565b955061078f604089016106ea565b9450606088013593506080880135925060a088013567ffffffffffffffff8111156107b957600080fd5b6107c58a828b01610706565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156107f457600080fd5b6107fd896106ea565b975061080b60208a016106ea565b965061081960408a016106ea565b955061082760608a016106ea565b94506080890135935060a0890135925060c089013567ffffffffffffffff81111561085157600080fd5b61085d8b828c01610706565b999c989b5096995094979396929594505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108b0576108b0610871565b604052919050565b600060208083850312156108cb57600080fd5b823567ffffffffffffffff808211156108e357600080fd5b8185019150601f86818401126108f857600080fd5b82358281111561090a5761090a610871565b8060051b610919868201610887565b918252848101860191868101908a84111561093357600080fd5b87870192505b838310156109c3578235868111156109515760008081fd5b8701603f81018c136109635760008081fd5b8881013560408882111561097957610979610871565b61098a828901601f19168c01610887565b8281528e8284860101111561099f5760008081fd5b828285018d83013760009281018c0192909252508352509187019190870190610939565b9a9950505050505050505050565b600080604083850312156109e457600080fd5b505080516020909101519092909150565b600060208284031215610a0757600080fd5b81518015158114610a1757600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000825160005b81811015610a555760208186018101518583015201610a3b565b81811115610a64576000828501525b509190910192915050565b600060208284031215610a8157600080fd5b5051919050565b600082821015610aa857634e487b7160e01b600052601160045260246000fd5b50039056fea26469706673582212207196149263cc9c6804aac9c4f14d99f9b5d97797a6266b276a300afaae369f5364736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063a5d4096b11610050578063a5d4096b14610109578063a8aa1b3114610131578063c507ffc11461015857600080fd5b80636b2ace87146100775780639997c7f1146100bb5780639f67679e146100e2575b600080fd5b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61011c61011736600461074f565b610176565b604080519283526020830191909152016100b2565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61011c6101663660046107d8565b6000809850989650505050505050565b60008080610186848601866108b8565b60405163097da6d360e41b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015230602483018190526044830152600060648301819052608483018a90529293507f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af115801561022d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025191906109d1565b5060405163a9059cbb60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600482018190526024820183905291925063a9059cbb906044016020604051808303816000875af11580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e691906109f5565b5060405163226bf2d160e21b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906389afcb449060240160408051808303816000875af115801561034c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037091906109d1565b505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836000815181106103b1576103b1610a1e565b60200260200101516040516103c69190610a34565b6000604051808303816000865af19150503d8060008114610403576040519150601f19603f3d011682016040523d82523d6000602084013e610408565b606091505b505090508061042a5760405163c4a632a560e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168360018151811061046757610467610a1e565b602002602001015160405161047c9190610a34565b6000604051808303816000865af19150503d80600081146104b9576040519150601f19603f3d011682016040523d82523d6000602084013e6104be565b606091505b505080915050806104e2576040516326bfc13160e11b815260040160405180910390fd5b6040516370a0823160e01b815230600482018190526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926302b9446c927f00000000000000000000000000000000000000000000000000000000000000009290918f918416906370a0823190602401602060405180830381865afa158015610578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059c9190610a6f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292841660248401529216604482015260648101919091526000608482015260a40160408051808303816000875af1158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b91906109d1565b945061064990508985610a88565b945050505097509795505050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806106e45760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c4544000000000000000000000000000000000000604482015260640160405180910390fd5b50505050565b80356001600160a01b038116811461070157600080fd5b919050565b60008083601f84011261071857600080fd5b50813567ffffffffffffffff81111561073057600080fd5b60208301915083602082850101111561074857600080fd5b9250929050565b600080600080600080600060c0888a03121561076a57600080fd5b610773886106ea565b9650610781602089016106ea565b955061078f604089016106ea565b9450606088013593506080880135925060a088013567ffffffffffffffff8111156107b957600080fd5b6107c58a828b01610706565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156107f457600080fd5b6107fd896106ea565b975061080b60208a016106ea565b965061081960408a016106ea565b955061082760608a016106ea565b94506080890135935060a0890135925060c089013567ffffffffffffffff81111561085157600080fd5b61085d8b828c01610706565b999c989b5096995094979396929594505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108b0576108b0610871565b604052919050565b600060208083850312156108cb57600080fd5b823567ffffffffffffffff808211156108e357600080fd5b8185019150601f86818401126108f857600080fd5b82358281111561090a5761090a610871565b8060051b610919868201610887565b918252848101860191868101908a84111561093357600080fd5b87870192505b838310156109c3578235868111156109515760008081fd5b8701603f81018c136109635760008081fd5b8881013560408882111561097957610979610871565b61098a828901601f19168c01610887565b8281528e8284860101111561099f5760008081fd5b828285018d83013760009281018c0192909252508352509187019190870190610939565b9a9950505050505050505050565b600080604083850312156109e457600080fd5b505080516020909101519092909150565b600060208284031215610a0757600080fd5b81518015158114610a1757600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000825160005b81811015610a555760208186018101518583015201610a3b565b81811115610a64576000828501525b509190910192915050565b600060208284031215610a8157600080fd5b5051919050565b600082821015610aa857634e487b7160e01b600052601160045260246000fd5b50039056fea26469706673582212207196149263cc9c6804aac9c4f14d99f9b5d97797a6266b276a300afaae369f5364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swap(address,address,address,uint256,uint256,bytes)": {
        "notice": "Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for at least 'amountToMin' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Returns the amount of tokens 'to' transferred to BentoBox. (The BentoBox skim function will be used by the caller to get the swapped funds)."
      },
      "swapExact(address,address,address,address,uint256,uint256,bytes)": {
        "notice": "Calculates the amount of token 'from' needed to complete the swap (amountFrom), this should be less than or equal to amountFromMax. Withdraws 'amountFrom' of token 'from' from the BentoBox account for this swapper. Swaps it for exactly 'exactAmountTo' of token 'to'. Transfers the swapped tokens of 'to' into the BentoBox using a plain ERC20 transfer. Transfers allocated, but unused 'from' tokens within the BentoBox to 'refundTo' (amountFromMax - amountFrom). Returns the amount of 'from' tokens withdrawn from BentoBox (amountFrom). (The BentoBox skim function will be used by the caller to get the swapped funds)."
      }
    },
    "notice": "Generic LP liquidation/deleverage swapper for Uniswap like compatible DEX using Matcha/0x aggregator",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}